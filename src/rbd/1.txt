import { useState } from "react";
import { DragDropContext } from "react-beautiful-dnd";
import { useDispatch, useSelector } from "react-redux";
import { Route, Routes } from "react-router-dom";

import { Preloader } from "../../component/Preloader";
import { useFireBase } from "../../effect";
import { ProjectBoard } from "../../pages/ProjectBoard";
import { TaskBoard } from "../../pages/TaskBoard";
import { State } from "../../types";

import style from "./index.module.scss";

export const FireBaseContainer = () => {
  const { view } = useSelector((state) => state);
  const dispatch = useDispatch();

  const getView = () => {
    switch (view) {
      case "preloader": {
        return <Preloader type="big" />;
      }

      default: {
        return (
          <Routes>
            <Route path="/" element={<ProjectBoard />} />
            <Route path="/project/:id" element={<TaskBoard />} />
          </Routes>
        );
      }
    }
  };

  useFireBase();

  const initialData = {
    tasks: {
      taskFirst: { id: "taskFirst", content: "Take out the garbage" },
      taskSecond: { id: "taskSecond", content: "Watch my favorite show" },
      taskThird: { id: "taskThird", content: "Charge my phone" },
      taskFourth: { id: "taskFourth", content: "Cook dinner" },
    },
    columns: {
      columnFirst: {
        id: "columnFirst",
        title: "To do",
        taskIds: ["taskFirst", "taskSecond", "taskThird", "taskFourth"],
      },
      columnSecond: {
        id: "columnSecond",
        title: "In progress",
        taskIds: [],
      },
      columnThird: {
        id: "columnThird",
        title: "Done",
        taskIds: [],
      },
    },
    // Facilitate reordering of the columns
    columnOrder: ["columnFirst", "columnSecond", "columnThird"],
  };

  const [state, setState] = useState(initialData);

  const onDragEnd = (result) => {
    const { destination, source, draggableId } = result;

    if (!destination) {
      return;
    }

    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    ) {
      return;
    }

    const start = state.columns[source.droppableId];
    const finish = state.columns[destination.droppableId];

    if (start === finish) {
      const newTaskIds = Array.from(start.taskIds);
      newTaskIds.splice(source.index, 1);
      newTaskIds.splice(destination.index, 0, draggableId);

      const newColumn = {
        ...start,
        taskIds: newTaskIds,
      };

      const newState = {
        ...state,
        columns: {
          ...state.columns,
          [newColumn.id]: newColumn,
        },
      };

      setState(newState);
      return;
    }

    // Moving from one list to another
    const startTaskIds = Array.from(start.taskIds);
    startTaskIds.splice(source.index, 1);
    const newStart = {
      ...start,
      taskIds: startTaskIds,
    };

    const finishTaskIds = Array.from(finish.taskIds);
    finishTaskIds.splice(destination.index, 0, draggableId);
    const newFinish = {
      ...finish,
      taskIds: finishTaskIds,
    };

    const newState = {
      ...state,
      columns: {
        ...state.columns,
        [newStart.id]: newStart,
        [newFinish.id]: newFinish,
      },
    };
    setState(newState);
  };

  return (
    <DragDropContext onDragEnd={onDragEnd}>
      <div className={style.container}>{getView()}</div>
    </DragDropContext>
  );
};
