{"version":3,"sources":["features/MoveControls.tsx","features/Dice.tsx","shared/config/walls.ts","shared/config/index.ts","components/Health.tsx","business/phases/common/getNextPlayerCoord.ts","business/phases/common/getNeighboringCellList.ts","business/phases/common/checkCellHasWall.ts","components/Player/index.tsx","components/Player/canInteractWithCell.ts","components/Enemy.tsx","components/BoardsCard.tsx","components/WeaponCard.tsx","features/PlayGrid/getCards.tsx","features/PlayGrid/getPlayersList.tsx","features/PlayGrid/getEnemyList.tsx","features/PlayGrid/Barrier.tsx","features/PlayGrid/getFilledPlayGrid.tsx","features/PlayGrid/index.tsx","components/HealthSlots.tsx","components/Inventory.tsx","features/PlayerStatus.tsx","features/StatusList.tsx","features/PlayersStatusList.tsx","pages/EndScreen.tsx","pages/StartScreen.tsx","business/initialState/getGameField/getFieldCells.ts","business/initialState/getGameField/spreadCards.ts","business/initialState/getGameField/index.ts","business/initialState/getPlayers.ts","business/initialState/getEnemies.ts","business/initialState/index.ts","business/phases/waitingStart/index.ts","business/phases/gameStarted/playerMove/checkCanTakeCell.ts","business/phases/common/getStateCardSelected.ts","business/phases/gameStarted/playerMove/index.ts","business/phases/gameStarted/playerMove/getPlayerMoveResult.ts","business/phases/gameStarted/playerMove/changePlayerCoord.ts","business/phases/gameStarted/takeCard/index.ts","business/phases/gameStarted/takeCard/openCard.ts","business/phases/gameStarted/takeCard/deleteCard.ts","business/phases/gameStarted/trownDice.ts","business/phases/gameStarted/interactWithEnemy/getBattleResult.ts","business/phases/common/deleteSelectedCard.ts","business/phases/gameStarted/interactWithEnemy/index.ts","business/phases/gameStarted/interactWithEnemy/openEnemyCard.ts","business/phases/gameStarted/applyCard/changeHealth.ts","business/phases/gameStarted/applyCard/index.ts","business/phases/gameStarted/applyCard/getStateGiveCard.ts","business/phases/gameStarted/applyCard/getStateHealCurrPlayer.ts","business/phases/gameStarted/applyCard/getStateHealAnotherPlayer.ts","business/phases/gameStarted/applyCard/getStateHoleFilled.ts","business/phases/gameStarted/getPlayersOrder.ts","business/phases/endGame/index.ts","business/store.ts","business/reducer.ts","App.tsx","business/effects/useOpenCard.ts","business/effects/usePlayerMove.ts","business/effects/useEndScreen.ts","business/effects/useInteractWithEnemy.ts","reportWebVitals.ts","index.tsx"],"names":["Arrow","styled","div","props","direction","ArrowContainer","MoveControls","dispatch","useDispatch","renderArrow","onClick","type","payload","DiceWrap","DiceButton","button","DiceNumber","Dice","useSelector","state","dice","diceNumber","Math","floor","random","CELLS_BARRIERS_LIST","coord","hor","vert","barrierList","name","isOpen","START_COORD","FINISH_COORD","APPERANCE_CARD","MOVE_DIRECTION_LIST","StyledHealthCard","apperance","Health","getNextPlayerCoord","currentCoord","split","currPlayerHor","currPlayerVert","nextPlayerVert","parseInt","nextPlayerHor","prevPlayerVert","prevPlayerHor","getNeighboringCellList","prevPlayerCoord","gameField","map","directionItem","filter","cellItem","values","checkCellHasWall","newPlayerCoord","playerList","numberOfPlayer","currCellCoord","currCell","nextCell","oppositeDirection","getOppositeDirection","currCellHasBarrier","checkCellOnBarrier","nextCellHasBarrier","cell","cellHasWall","find","barrier","cellHasClosedHole","PlayerCard","isCurrent","needHighlightning","PlayerCardList","PlayerList","playerListOnCell","getContextMenu","listForInteract","getAvailableCellList","chosedCard","inventory","card","isSelected","typeOfChosedCard","playerCardItem","index","canInteractWithPlayer","includes","id","orderNumber","calculateHighlightning","playerClickedHandler","gameState","availableCellList","nextPlayerCoord","canInteractWithCell","currPlayerCoord","availableCellsCoords","concat","isCurrentPlayer","console","log","EnemyCard","EnemiesCardList","EnemyList","enemyArray","list","enemyCard","StyledBoardsCard","BoardsCard","StyledWeaponCard","WeaponCard","getCards","healthCardItem","cardItem","boardsCardItem","weaponCardItem","getPlayersList","playersList","playersArr","playerKey","push","length","getEnemyList","enemiesList","enemiesArr","enemiesKey","Wall","barrierItem","highlightningList","item","Barrier","orderIndex","cellValues","neighboringCellList","needCheckHighlightning","getHighlightningList","getHigtlightningDirection","cellType","currCoord","currCellHasHole","checkCellOnHole","nextCellHasHole","availableCell","selectedCard","cellHasWindow","cellHasDoor","Wrap","CellItem","hasMarker","getFilledPlayGrid","enemyList","orderGameCells","order","availableCells","GridItem","ContextMenu","x","y","Button","PlayGrid","useState","contextMenuState","updatecontextMenuState","height","playerEl","document","getElementById","playerCoord","getBoundingClientRect","useEffect","bodyElement","querySelector","callback","e","target","stopPropagation","prevState","removeEventListener","capture","addEventListener","playerNumber","className","HealthSlotList","HealthSlot","isFilled","HealthSlots","getHealthSlot","healthSlotFilled","playerHealth","getPlayerHealth","Array","fill","reduce","prev","currSlot","health","InventoryWrap","Slot","highlighting","Inventory","inventoryCard","inventoryCardindex","getChildrenComponent","PlayerStatusCard","CharacterAvatar","Status","HealthStatus","InventoryStatus","Column","PlayerStatus","StatusList","status","updateStatus","doEffect","gameResult","newStatus","getTextStatus","PlayersListWrap","amount","HealthSlotsWrap","InventorysWrap","PlayersStatusList","player","Fragment","GameScore","EndScreen","StartButton","StartScreen","createEmptyFieldCells","cellList","emptyFieldItem","newEmptyGameField","forEach","getOrganizedFieldCells","emptyField","startIndex","finishIndex","getCellsWalls","cellsWithBarrierList","cellBarrier","cellIndex","cellWithoutBarrier","cellsWithBarriers","Object","fromEntries","cardsList","setCards","currCardSet","cellListWithCards","cellWithCards","getListForCards","emptyCellsList","entries","AMOUNT_EMPTY_CELLS","amoutCurrentCards","prevkeyList","randomNumber","getRandomNumber","keyItem","arrNumber","maxNumber","number","getGameField","getCellOrder","gameFieldCells","cellsWithAllCards","filled–°ells","gameFieldCellsWithPrevios","cellsForCards","filledWithCardsFieldCells","spreadCards","emptyFieldCells","fieldCellsWithWalls","getFieldCells","width","orderList","getPlayers","startCoord","getEnemies","getEmptyList","enemiesCoords","getListOfIndexes","getListOfEnemy","power","initialState","gameFieldWithoutEnemy","getInitialState","waitingStart","action","checkNextCellOccupied","newCoord","some","getStateCardSelected","targerCard","newPlayerList","changeSelectedCard","hasAnyCardSelected","stateWithSelectedCard","stateWithoutSelectedCard","currentCardIndex","targetCard","newInventory","playerMove","getAvailableCells","getStatePlayerMoved","getStateClearedAvailableCells","newCellWithPlayer","isLastStepOfMove","takeFinish","takeCard","metEnemyCard","getPlayerMoveResult","changePlayerCoord","metBarrier","isNextCellOcupied","checkCanTakeCell","getStateOpenCard","getStateCardTaken","getStateDeletedCard","playerCoordIndex","cellWithOpenCard","cardItemWithOpenCard","openCard","newGameField","cardItems","newPlayer","cellWithoutCard","deleteCard","trownDice","getStatePlayerCanFight","getStatePlayerRunsAway","getStatePlayetLoseHealth","isPlayerAlive","deleteSelectedCard","indexCurrPlayer","currInventory","removedCardIndex","findIndex","indexOfCard","interactWithEnemy","trownBattleDice","selectCard","defeatEnemy","removeEnemyCard","checkCardApperance","currEnemyCard","openedEnemyCard","newEnemyList","openEnemyCard","getBattleResult","currEnemyCoord","currEnemy","defeatedEnemy","isNeedOpenEnemyCard","changeHealth","indexTarget","applyCard","chosenCardType","recipientPlayerNumber","currentPlayerInventory","recepientPlayerInventory","sharedCardIndex","sharedCard","sharedCardWithoutHighlightning","newCurrentPlayerInventory","newRecepientPlayerInventory","getStateGiveCard","indexChosenPlayer","newHealth","getStateHealCurrPlayer","getStateHealAnotherPlayer","cellWithChosedHole","barriersWithClosedHole","getStateHoleFilled","getPlayersOrder","numberCurrPlayer","nextPlayersNumber","endGame","store","createStore","phaseOuter","phaseInner","window","__REDUX_DEVTOOLS_EXTENSION__","Field","Game","LeftPanel","RightPanel","GameControls","GetApp","timerOpen","setTimeout","clearTimeout","timerTakeCard","timerChangePlayerHealth","timerDeleteCard","useOpenCard","timerMarkCell","usePlayerMove","timer","useEndScreen","timerGetResult","timerRemoveEnemy","useInteractWithEnemy","getGameScreen","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.627b4578.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { MoveDirection } from \"../business/types\";\r\n\r\ntype ArrowProps = {\r\n  direction: MoveDirection;\r\n};\r\n\r\nconst Arrow = styled.div<ArrowProps>`\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  border: 1px solid lightgrey;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: pink;\r\n  }\r\n\r\n  &:active {\r\n    color: red;\r\n  }\r\n\r\n  transform: ${(props) => {\r\n    switch (props.direction) {\r\n      case \"top\":\r\n        return \"rotate(-90deg)\";\r\n      case \"bottom\":\r\n        return \"rotate(90deg)\";\r\n      case \"left\":\r\n        return \"rotate(-180deg)\";\r\n    }\r\n  }};\r\n\r\n  grid-area: ${(props) => {\r\n    switch (props.direction) {\r\n      case \"top\":\r\n        return \"arrow_top;\";\r\n      case \"bottom\":\r\n        return \"arrow_bottom\";\r\n      case \"left\":\r\n        return \"arrow_left\";\r\n      case \"right\":\r\n        return \"arrow_right\";\r\n    }\r\n  }};\r\n`;\r\n\r\nconst ArrowContainer = styled.div`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \". arrow_top .\"\r\n    \"arrow_left . arrow_right \"\r\n    \". arrow_bottom . \";\r\n  width: 100px;\r\n  height: 100px;\r\n  & > * {\r\n    padding: 6px;\r\n    box-sizing: border-box;\r\n\r\n  }\r\n`;\r\n\r\nexport const MoveControls = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const renderArrow = (direction: MoveDirection) => {\r\n    return (\r\n      <Arrow\r\n        direction={direction}\r\n        onClick={() => {\r\n          dispatch({ type: \"playerMoved\", payload: direction });\r\n        }}\r\n      >\r\n        &gt;\r\n      </Arrow>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ArrowContainer>\r\n      {renderArrow(\"top\")}\r\n      {renderArrow(\"right\")}\r\n      {renderArrow(\"left\")}\r\n      {renderArrow(\"bottom\")}\r\n    </ArrowContainer>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { State } from \"../business/types\";\r\n\r\nconst DiceWrap = styled.div`\r\n  border: 1px solid lightgray;\r\n  width: 100px;\r\n  height: 100px;\r\n  display: grid;\r\n`;\r\n\r\nconst DiceButton = styled.button`\r\n  margin: 0 auto;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst DiceNumber = styled.div`\r\n  height: 30px;\r\n  margin-top: 20px;\r\n  text-align: center;\r\n`;\r\n\r\nconst maxNumber = 4;\r\n\r\nexport const Dice = () => {\r\n  const dispatch = useDispatch();\r\n  const [diceNumber] = useSelector((state: State) => [state.dice]);\r\n  const getNumber = () => {\r\n    return Math.floor(Math.random() * maxNumber + 1);\r\n  };\r\n\r\n  return (\r\n    <DiceWrap>\r\n      <DiceNumber>{diceNumber}</DiceNumber>\r\n      <DiceButton\r\n        onClick={() => {\r\n          dispatch({\r\n            type: \"diceThrown\",\r\n            payload: getNumber(),\r\n          });\r\n        }}\r\n      >\r\n        –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\r\n      </DiceButton>\r\n    </DiceWrap>\r\n  );\r\n};\r\n","import { CellsBarrierListType } from \"../../business/types\";\r\n\r\n// The array is convenient for iterating\r\nexport const CELLS_BARRIERS_LIST: CellsBarrierListType = [\r\n  {\r\n    coord: { hor: 2, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 3 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 4 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 5 },\r\n    barrierList: [\r\n      {\r\n        name: \"window\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 6 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  \r\n  {\r\n    coord: { hor: 2, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 8 },\r\n    barrierList: [\r\n      {\r\n        name: \"window\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 9 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 3, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 4, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 5, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"door\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 6, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 8, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 9, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 10, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 9 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 3, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 4, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"door\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 5, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"window\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 6, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 8, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"window\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 9, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 10, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 10, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 3, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 4, vert: 9 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 4, vert: 8 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 4, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"door\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n      {\r\n        name: \"door\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 5, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 6, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 7, vert: 8 },\r\n    barrierList: [\r\n      {\r\n        name: \"door\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 8, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 9, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"door\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 6 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 5 },\r\n    barrierList: [\r\n      {\r\n        name: \"door\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 4 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 3 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 11, vert: 9 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 11, vert: 8 },\r\n    barrierList: [\r\n      {\r\n        name: \"window\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 11, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 11, vert: 6 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 11, vert: 5 },\r\n    barrierList: [\r\n      {\r\n        name: \"window\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 11, vert: 4 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 11, vert: 3 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 11, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  //it is needed for now for pretty  wall painting\r\n  {\r\n    coord: { hor: 11, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: null,\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import { MoveDirectionList } from \"../../business/types\";\r\n\r\nexport const START_COORD = { hor: 0, vert: 0 };\r\nexport const FINISH_COORD = { hor: 11, vert: 11 };\r\nexport const INITIAL_PLAYER_HEALTH = 3;\r\nexport const AMOUNT_HEALTH_ITEMS = 0;\r\nexport const AMOUNT_BOARDS_ITEMS =0;\r\nexport const AMOUNT_WEAPONS_ITEMS = 40;\r\nexport const AMOUNT_PLAYERS = 2;\r\nexport const AMOUNT_ENEMIES = 60;\r\nexport const APPERANCE_CARD = \"open\";\r\n\r\nexport const MAX_HEALTH_AMOUNT = 7;\r\n\r\nexport const MOVE_DIRECTION_LIST: MoveDirectionList = [\r\n  \"top\",\r\n  \"right\",\r\n  \"bottom\",\r\n  \"left\",\r\n];\r\n\r\nexport { CELLS_BARRIERS_LIST } from \"./walls\";\r\n","import styled from \"styled-components\";\r\n\r\nimport { HealthCardType } from \"../business/types\";\r\n\r\ntype HealthApperanceType = {\r\n  apperance?: \"closed\" | \"open\";\r\n};\r\n\r\nexport const StyledHealthCard = styled.div<HealthApperanceType>`\r\n  position: absolute;\r\n  border: 5px solid;\r\n  width: 15px;\r\n  height: 15px;\r\n  margin: 12px;\r\n\r\n  background-color: ${(props) => {\r\n    if (props.apperance === \"closed\") {\r\n      return \"gray\";\r\n    } else {\r\n      return \"green\";\r\n    }\r\n  }};\r\n\r\n  border-color: ${(props) => {\r\n    if (props.apperance === \"closed\") {\r\n      return \"gray\";\r\n    } else {\r\n      return \"green\";\r\n    }\r\n  }};\r\n`;\r\n\r\nexport const Health = (props: HealthApperanceType) => {\r\n  return <StyledHealthCard {...props}></StyledHealthCard>;\r\n};\r\n","import { MoveDirection } from \"../../types\";\r\n\r\n/**\r\n * Returns new coordinate of player.\r\n * @param currentCoord A string of current coordinate.\r\n * @param direction  A string of direction.\r\n * @returns A string with new coordinate.\r\n */\r\n\r\nexport const getNextPlayerCoord = (\r\n  currentCoord: string,\r\n  direction: MoveDirection\r\n) => {\r\n  \r\n  const [currPlayerHor, currPlayerVert] = currentCoord.split(\".\");\r\n  const nextPlayerVert = parseInt(currPlayerVert) + 1;\r\n  const nextPlayerHor = parseInt(currPlayerHor) + 1;\r\n  const prevPlayerVert = parseInt(currPlayerVert) - 1;\r\n  const prevPlayerHor = parseInt(currPlayerHor) - 1;\r\n\r\n  switch (direction) {\r\n    case \"top\": {\r\n      return `${currPlayerHor}.${nextPlayerVert}`;\r\n    }\r\n\r\n    case \"bottom\": {\r\n      return `${currPlayerHor}.${prevPlayerVert}`;\r\n    }\r\n\r\n    case \"left\": {\r\n      return `${prevPlayerHor}.${currPlayerVert}`;\r\n    }\r\n\r\n    case \"right\": {\r\n      return `${nextPlayerHor}.${currPlayerVert}`;\r\n    }\r\n\r\n    default:\r\n      return `${currPlayerHor}.${currPlayerVert}`;\r\n  }\r\n};\r\n","import { State, AvailableCellListType, GameField } from \"../../types\";\r\nimport { MOVE_DIRECTION_LIST } from \"../../../shared/config\";\r\nimport { getNextPlayerCoord } from \"./getNextPlayerCoord\";\r\n\r\n/**\r\n * Returns the coordinates of neighboribgCells that lying in the GameField.\r\n */\r\nexport const getNeighboringCellList = (\r\n  prevPlayerCoord: string,\r\n  gameField: GameField\r\n): AvailableCellListType => {\r\n  const coordNeighboringCells: AvailableCellListType = MOVE_DIRECTION_LIST.map(\r\n    (directionItem) => {\r\n      return {\r\n        direction: directionItem,\r\n        coord: getNextPlayerCoord(prevPlayerCoord, directionItem),\r\n      };\r\n    }\r\n  );\r\n\r\n  /**\r\n   * Returns the coordinates that lying in the GameField.\r\n   */\r\n  const existanceInGameFieldCells: AvailableCellListType =\r\n    coordNeighboringCells.filter((cellItem) => {\r\n      const { direction, coord } = cellItem;\r\n      return gameField.values[coord];\r\n    });\r\n  return existanceInGameFieldCells;\r\n};\r\n","import { State, PlayerListType, MoveDirection, CellType } from \"../../types\";\r\n\r\n/**\r\n * Returns true if current or next cell has wall\r\n */\r\nexport const checkCellHasWall = (\r\n  state: State,\r\n  newPlayerCoord: string,\r\n  direction: MoveDirection\r\n) => {\r\n  const { playerList, numberOfPlayer, gameField } = state;\r\n  const currCellCoord = playerList[numberOfPlayer].coord;\r\n  const currCell = gameField.values[currCellCoord];\r\n  const nextCell = gameField.values[newPlayerCoord];\r\n  const oppositeDirection = getOppositeDirection(direction);\r\n  const currCellHasBarrier = checkCellOnBarrier(currCell, direction);\r\n\r\n  const nextCellHasBarrier = checkCellOnBarrier(nextCell, oppositeDirection);\r\n\r\n  if (currCellHasBarrier || nextCellHasBarrier) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst checkCellOnBarrier = (cell: CellType, direction: MoveDirection) => {\r\n  if (cell.name === \"commonCell\") {\r\n    //Now in config just left and bottom walls\r\n    if (direction === \"left\" || direction === \"bottom\") {\r\n      const cellHasWall = cell.barrierList?.find(\r\n        (barrier) => barrier.name === \"wall\" && barrier.direction === direction\r\n      )\r\n        ? true\r\n        : false;\r\n      const cellHasClosedHole = cell.barrierList?.find(\r\n        (barrier) => barrier.isOpen === false && barrier.direction === direction\r\n      )\r\n        ? true\r\n        : false;\r\n      const cellHasBarrier = cellHasWall || cellHasClosedHole;\r\n      return cellHasBarrier;\r\n    }\r\n    return false;\r\n  }\r\n};\r\n\r\nconst getOppositeDirection = (direction: MoveDirection): MoveDirection => {\r\n  switch (direction) {\r\n    case \"top\": {\r\n      return \"bottom\";\r\n    }\r\n    case \"bottom\": {\r\n      return \"top\";\r\n    }\r\n    case \"left\": {\r\n      return \"right\";\r\n    }\r\n    case \"right\": {\r\n      return \"left\";\r\n    }\r\n  }\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  PlayerCardType,\r\n  AvailableCellListType,\r\n  State,\r\n} from \"../../business/types\";\r\nimport { getNeighboringCellList } from \"../../business/phases/common/getNeighboringCellList\";\r\nimport { canInteractWithCell } from \"./canInteractWithCell\";\r\n\r\ntype PlayerItem = {\r\n  isCurrent: boolean;\r\n  needHighlightning?: boolean;\r\n};\r\n\r\ntype PlayerListItem = {\r\n  playerListOnCell: PlayerCardType[];\r\n  getContextMenu: Function;\r\n};\r\n\r\ntype ContextMenuType = {\r\n  visible: boolean;\r\n};\r\n\r\ntype TypeOfCard = \"boards\" | \"health\" | \"weapon\" | null;\r\n\r\nconst PlayerCard = styled.div<PlayerItem>`\r\n  background-color: #9f3f3f;\r\n  border-radius: 50%;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 0px;\r\n  z-index: 3;\r\n  text-align: center;\r\n  padding: 4px;\r\n  box-sizing: border-box;\r\n  cursor: default;\r\n\r\n  background-color: ${(props) => {\r\n    if (props.isCurrent) {\r\n      return \"red\";\r\n    }\r\n  }};\r\n\r\n  &:before {\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 12px;\r\n    height: 12px;\r\n    border-radius: 50%;\r\n    border: ${(props) => {\r\n      if (props.needHighlightning) {\r\n        return \"3px solid #34b834;\";\r\n      }\r\n    }};\r\n    pointer-events: none;\r\n    opacity: 0.5;\r\n    padding: 4px;\r\n\r\n    left: 0px;\r\n    top: 0px;\r\n  }\r\n`;\r\n\r\nconst PlayerCardList = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  position: absolute;\r\n  z-index: 3;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  color: white;\r\n  padding: 3px;\r\n`;\r\n\r\nexport const PlayerList = (props: PlayerListItem) => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n  const { playerList, numberOfPlayer } = state;\r\n\r\n  /**\r\n   *  playerListOnCell -is all player in one cell\r\n   */\r\n  const { playerListOnCell, getContextMenu } = props;\r\n\r\n  const listForInteract = getAvailableCellList(state);\r\n  const currPlayer = playerList[numberOfPlayer];\r\n  const chosedCard = currPlayer.inventory.find(\r\n    (card) => card?.isSelected === true\r\n  );\r\n  const typeOfChosedCard = chosedCard?.name || null;\r\n\r\n  return (\r\n    <PlayerCardList>\r\n      {playerListOnCell.map((playerCardItem, index) => {\r\n        const canInteractWithPlayer = listForInteract.includes(\r\n          playerCardItem.coord\r\n        );\r\n\r\n        return (\r\n          <PlayerCard\r\n            id={`player${playerCardItem.orderNumber}`}\r\n            key={index}\r\n            isCurrent={numberOfPlayer == playerCardItem.orderNumber}\r\n            needHighlightning={calculateHighlightning(\r\n              canInteractWithPlayer,\r\n              typeOfChosedCard\r\n            )}\r\n            onClick={() => {\r\n              playerClickedHandler(\r\n                getContextMenu,\r\n                playerCardItem,\r\n                numberOfPlayer,\r\n                canInteractWithPlayer,\r\n                typeOfChosedCard,\r\n                dispatch\r\n              );\r\n            }}\r\n          >\r\n            {playerCardItem.orderNumber + 1}\r\n          </PlayerCard>\r\n        );\r\n      })}\r\n    </PlayerCardList>\r\n  );\r\n};\r\n\r\nconst getAvailableCellList = (state: State) => {\r\n  const { gameState, playerList, numberOfPlayer, gameField } = state;\r\n  const prevPlayerCoord = playerList[numberOfPlayer].coord;\r\n  const neighboringCellList = getNeighboringCellList(\r\n    prevPlayerCoord,\r\n    gameField\r\n  );\r\n  const availableCellList: AvailableCellListType = neighboringCellList.filter(\r\n    (cellItem) => {\r\n      const { direction, coord } = cellItem;\r\n\r\n      return canInteractWithCell(state, coord, direction);\r\n    }\r\n  );\r\n\r\n  const currPlayerCoord = playerList[numberOfPlayer].coord;\r\n\r\n  const availableCellsCoords = availableCellList\r\n    .map((cellItem) => {\r\n      const { direction, coord } = cellItem;\r\n      return coord;\r\n    })\r\n    .concat(currPlayerCoord);\r\n\r\n  switch (gameState.type) {\r\n    case \"gameStarted.applyCard\":\r\n      return availableCellsCoords;\r\n\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n\r\nconst playerClickedHandler = (\r\n  getContextMenu: Function,\r\n  playerCardItem: PlayerCardType,\r\n  numberOfPlayer: number,\r\n  canInteractWithPlayer: boolean,\r\n  typeOfChosedCard: TypeOfCard,\r\n  dispatch: Function\r\n) => {\r\n  const isCurrentPlayer = playerCardItem.orderNumber == numberOfPlayer;\r\n  switch (canInteractWithPlayer) {\r\n    case true: {\r\n      switch (typeOfChosedCard) {\r\n        case \"health\": {\r\n          switch (isCurrentPlayer) {\r\n            case true: {\r\n              dispatch({\r\n                type: \"req-healPlayer\",\r\n                payload: playerCardItem.orderNumber,\r\n              });\r\n              break;\r\n            }\r\n\r\n            case false: {\r\n              getContextMenu(playerCardItem.orderNumber);\r\n            }\r\n          }\r\n\r\n          break;\r\n        }\r\n        case \"boards\": {\r\n          /**\r\n           * For preventing sharing any cards with himself\r\n           */\r\n          switch (isCurrentPlayer) {\r\n            case true: {\r\n              break;\r\n            }\r\n            case false: {\r\n              dispatch({\r\n                type: \"req-shareCard\",\r\n                payload: playerCardItem.orderNumber,\r\n              });\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        /* default: {\r\n          break;\r\n        } */\r\n      }\r\n      break;\r\n    }\r\n    case false: {\r\n      console.log(\"–Ω–µ –º–æ–∂–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∏–≥—Ä–æ–∫–æ–º –∏–≥—Ä–æ–∫–∞\");\r\n      break;\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nconst calculateHighlightning = (\r\n  canInteractWithPlayer: boolean,\r\n  typeOfChosedCard: TypeOfCard\r\n) => {\r\n  switch (canInteractWithPlayer) {\r\n    case true: {\r\n      switch (typeOfChosedCard) {\r\n        case \"boards\": {\r\n          return false;\r\n        }\r\n\r\n        case \"health\": {\r\n          return true;\r\n        }\r\n\r\n        default: {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    case false: {\r\n      return false;\r\n    }\r\n\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n};\r\n","import {\r\n  State,\r\n  PlayerListType,\r\n  MoveDirection,\r\n  CellType,\r\n} from \"../../business/types\";\r\nimport { checkCellHasWall } from \"../../business/phases/common\";\r\n/** Cheking the cases when can't take the cell. In default we think that can. */\r\nexport const canInteractWithCell = (\r\n  state: State,\r\n  nextPlayerCoord: string,\r\n  direction: MoveDirection\r\n) => {\r\n  const { gameField, playerList, dice } = state;\r\n  const nextCellForPlayer = gameField.values[nextPlayerCoord];\r\n  const nextCellOutOfGameField = nextCellForPlayer ? false : true;\r\n\r\n  switch (nextCellOutOfGameField) {\r\n    case true: {\r\n      return false;\r\n    }\r\n\r\n    case false: {\r\n      const metBarrier = checkCellHasWall(state, nextPlayerCoord, direction);\r\n\r\n      switch (true) {\r\n        case metBarrier: {\r\n          return false;\r\n        }\r\n\r\n        default: {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    default: {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { EnemyCardType, State } from \"../business/types\";\r\n\r\ntype EnemyArray = {\r\n  list: EnemyCardType[];\r\n};\r\n\r\nconst EnemyCard = styled.div<EnemyCardType>`\r\n  position: absolute;\r\n  border: 5px solid;\r\n  width: 25px;\r\n  height: 25px;\r\n  margin: 12px;\r\n  box-sizing: border-box;\r\n  color: #c08f5e;\r\n  font-size: 50px;\r\n  text-align: start;\r\n  vertical-align: bottom;\r\n  line-height: 0.1;\r\n  text-transform: unset;\r\n  font-family: sans-serif;\r\n  text-indent: -5px;\r\n\r\n  background-color: ${(props) => {\r\n    if (props.apperance === \"closed\") {\r\n      return \"lightgray\";\r\n    } else {\r\n      return \"navy\";\r\n    }\r\n  }};\r\n\r\n  border-color: ${(props) => {\r\n    if (props.apperance === \"closed\") {\r\n      return \"lightgray\";\r\n    } else {\r\n      return \"navy\";\r\n    }\r\n  }};\r\n`;\r\n\r\nconst EnemiesCardList = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  position: absolute;\r\n  font-size: 10px;\r\n`;\r\n\r\nexport const EnemyList = (props: EnemyArray) => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n  const { numberOfPlayer, playerList } = state;\r\n  const enemyArray = props.list;\r\n  return (\r\n    <EnemiesCardList>\r\n      {enemyArray.map((enemyCard, index) => (\r\n        <EnemyCard\r\n          key={index}\r\n          {...enemyCard}\r\n          onClick={() => {\r\n            const canFight =\r\n              playerList[numberOfPlayer].coord === enemyCard.coord;\r\n            if (canFight) {\r\n              dispatch({\r\n                type: \"req-defeatEnemy\",\r\n              });\r\n            } else {\r\n              return null;\r\n            }\r\n          }}\r\n        >\r\n          {enemyCard.apperance === \"defeated\" ? \"x\" : null}\r\n        </EnemyCard>\r\n      ))}\r\n    </EnemiesCardList>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\ntype BoardsApperanceType = {\r\n  apperance?: \"closed\" | \"open\";\r\n};\r\n\r\nconst StyledBoardsCard = styled.div<BoardsApperanceType>`\r\n  position: absolute;\r\n  border: 1px solid;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 12px;\r\n  color: black;\r\n  font-size: 20px;\r\n  text-align: center;\r\n  background-color: ${(props) => {\r\n    if (props.apperance === \"closed\") {\r\n      return \"gray\";\r\n    } else {\r\n      return \"white\";\r\n    }\r\n  }};\r\n\r\n  border-color: ${(props) => {\r\n    if (props.apperance === \"closed\") {\r\n      return \"gray\";\r\n    } else {\r\n      return \"gray\";\r\n    }\r\n  }};\r\n`;\r\n\r\nexport const BoardsCard = (props: BoardsApperanceType) => {\r\n  return (\r\n    <StyledBoardsCard {...props}>\r\n      {props.apperance === \"closed\" ? null : \"X\"}\r\n    </StyledBoardsCard>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\ntype WeaponApperanceType = {\r\n  apperance?: \"closed\" | \"open\";\r\n};\r\n\r\nconst StyledWeaponCard = styled.div<WeaponApperanceType>`\r\n  position: absolute;\r\n  border: 1px solid;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 12px;\r\n  color: red;\r\n  font-size: 20px;\r\n  text-align: center;\r\n  background-color: ${(props) => {\r\n    if (props.apperance === \"closed\") {\r\n      return \"gray\";\r\n    } else {\r\n      return \"white\";\r\n    }\r\n  }};\r\n\r\n  border-color: ${(props) => {\r\n    if (props.apperance === \"closed\") {\r\n      return \"gray\";\r\n    } else {\r\n      return \"gray\";\r\n    }\r\n  }};\r\n`;\r\n\r\nexport const WeaponCard = (props: WeaponApperanceType) => {\r\n  return (\r\n    <StyledWeaponCard {...props}>\r\n      {props.apperance === \"closed\" ? null : \"O\"}\r\n    </StyledWeaponCard>\r\n  );\r\n};\r\n","import { Health, BoardsCard, WeaponCard } from \"../../components\";\r\nimport { CellType } from \"../../business/types\";\r\n\r\nexport const getCards = (cell: CellType) => {\r\n  const healthCardItem = cell.cardItem.find(\r\n    (cardItem) => cardItem?.name === \"health\"\r\n  );\r\n\r\n  const boardsCardItem = cell.cardItem.find(\r\n    (cardItem) => cardItem?.name === \"boards\"\r\n  );\r\n  const weaponCardItem = cell.cardItem.find(\r\n    (cardItem) => cardItem?.name === \"weapon\"\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {healthCardItem ? <Health apperance={healthCardItem.apperance} /> : null}\r\n      {boardsCardItem ? (\r\n        <BoardsCard apperance={boardsCardItem.apperance} />\r\n      ) : null}\r\n      {weaponCardItem ? (\r\n        <WeaponCard apperance={weaponCardItem.apperance} />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n","import { PlayerList } from \"../../components\";\r\n\r\nimport { PlayerListType, PlayerCardType } from \"../../business/types\";\r\n\r\nexport const getPlayersList = (\r\n  index: string,\r\n  playersList: PlayerListType,\r\n  numberOfPlayer: number,\r\n  getContextMenu: Function\r\n) => {\r\n  let playersArr: PlayerCardType[] = [];\r\n\r\n  for (let playerKey in playersList) {\r\n    const playerCard = playersList[playerKey];\r\n    const playerCoord = playerCard.coord;\r\n    if (playerCoord === index) {\r\n      playersArr.push(playersList[playerKey]);\r\n    }\r\n  }\r\n  if (playersArr.length > 0) {\r\n    return (\r\n      <PlayerList\r\n        playerListOnCell={playersArr}\r\n        getContextMenu={getContextMenu}\r\n      />\r\n    );\r\n  } else return null;\r\n};\r\n","import { EnemyList } from \"../../components\";\r\n\r\nimport { EnemyListType, EnemyCardType } from \"../../business/types\";\r\n\r\nexport const getEnemyList = (index: string, enemiesList: EnemyListType) => {\r\n  let enemiesArr: EnemyCardType[] = [];\r\n  for (let enemiesKey in enemiesList) {\r\n    const enemiesCard = enemiesList[enemiesKey];\r\n    const enemiesCoord = enemiesCard.coord;\r\n    if (enemiesCoord === index) {\r\n      enemiesArr.push(enemiesList[enemiesKey]);\r\n    }\r\n  }\r\n  if (enemiesArr.length > 0) {\r\n    return <EnemyList list={enemiesArr} />;\r\n  } else return null;\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { getNeighboringCellList } from \"../../business/phases/common/getNeighboringCellList\";\r\n\r\nimport {\r\n  State,\r\n  MoveDirection,\r\n  BarrierItem,\r\n  CommonCell,\r\n  AvailableCellListType,\r\n  GameField,\r\n  GameState,\r\n  PlayerListType,\r\n  CellType,\r\n  AvailableCellType,\r\n} from \"../../business/types\";\r\n\r\ntype WallType = {\r\n  barrierItem?: BarrierItem;\r\n  //TODO: –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø?\r\n  highlightningList: (MoveDirection | null)[] | null;\r\n  onClick: Function;\r\n};\r\n\r\ntype BarrierCoord = {\r\n  orderIndex: string;\r\n};\r\n\r\nconst Wall = styled.div<WallType>`\r\n  cursor: ${(props) => {\r\n    switch (props.barrierItem?.name) {\r\n      case \"wall\": {\r\n        return \"default\";\r\n      }\r\n      case \"door\": {\r\n        return \"pointer\";\r\n      }\r\n      case \"window\": {\r\n        return \"pointer\";\r\n      }\r\n      default:\r\n        return \"default\";\r\n    }\r\n  }};\r\n  &:before {\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 50px;\r\n    height: 50px;\r\n    bottom: 0px;\r\n    z-index: 5;\r\n    height: ${(props) => {\r\n      if (props.barrierItem?.direction === \"bottom\") {\r\n        if (props.barrierItem?.isOpen === false) {\r\n          return \"10px\";\r\n        } else {\r\n          switch (props.barrierItem.name) {\r\n            case \"wall\": {\r\n              return \"5px\";\r\n            }\r\n            case \"door\": {\r\n              return \"3px\";\r\n            }\r\n            case \"window\": {\r\n              return \"3px\";\r\n            }\r\n            default:\r\n              return \"0px\";\r\n          }\r\n        }\r\n      } else if (\r\n        props.barrierItem &&\r\n        props.barrierItem.direction === \"left\" &&\r\n        props.barrierItem.name !== null\r\n      ) {\r\n        return \"50px\";\r\n        //it is needed for now for pretty  wall painting\r\n      } else if (props.barrierItem && props.barrierItem.name === null) {\r\n        return \"5px\";\r\n      } else {\r\n        return \"0px\";\r\n      }\r\n    }};\r\n\r\n    width: ${(props) => {\r\n      if (props.barrierItem?.direction === \"left\") {\r\n        if (props.barrierItem?.isOpen === false) {\r\n          return \"10px\";\r\n        } else {\r\n          switch (props.barrierItem.name) {\r\n            case \"wall\": {\r\n              return \"5px \";\r\n            }\r\n            case \"door\": {\r\n              return \"3px\";\r\n            }\r\n            case \"window\": {\r\n              return \"3px\";\r\n            }\r\n            default:\r\n              return \"5px\";\r\n          }\r\n        }\r\n      } else {\r\n        return \"none\";\r\n      }\r\n    }};\r\n\r\n    background-color: ${(props) => {\r\n      if (props.barrierItem?.isOpen) {\r\n        const needHighlightning = props.highlightningList?.find((item) => {\r\n          return item === \"bottom\" || \"left\";\r\n        });\r\n\r\n        switch (props.barrierItem.name) {\r\n          case \"wall\": {\r\n            return \"#f09308;\";\r\n          }\r\n          case \"door\": {\r\n            if (needHighlightning) {\r\n              return \"#78ff2d\";\r\n            } else {\r\n              return \" #584324;\";\r\n            }\r\n          }\r\n          case \"window\": {\r\n            if (needHighlightning) {\r\n              return \"#78ff2d\";\r\n            } else {\r\n              return \" #a3cdd8;\";\r\n            }\r\n          }\r\n          default:\r\n            return \"#f09308\";\r\n        }\r\n      } else if (props.barrierItem?.isOpen === false) {\r\n        return \"#66615d;\";\r\n      } else {\r\n        return \"none\";\r\n      }\r\n    }};\r\n  }\r\n  &:after {\r\n    content: \"\";\r\n    z-index: 5;\r\n    position: absolute;\r\n    width: 50px;\r\n    height: 50px;\r\n\r\n    top: ${(props) => {\r\n      if (props.barrierItem?.direction === \"left\") {\r\n        return \"0\";\r\n      }\r\n    }};\r\n    height: ${(props) => {\r\n      if (props.barrierItem?.direction === \"bottom\" && props.barrierItem) {\r\n        return \"20px\";\r\n      }\r\n    }};\r\n    width: ${(props) => {\r\n      if (props.barrierItem?.direction === \"left\") {\r\n        return \"20px\";\r\n      }\r\n    }};\r\n    bottom: ${(props) => {\r\n      if (props.barrierItem?.direction === \"bottom\") {\r\n        return \"-10px\";\r\n      }\r\n    }};\r\n    left: ${(props) => {\r\n      if (props.barrierItem?.direction === \"left\") {\r\n        return \"-10px\";\r\n      }\r\n    }};\r\n\r\n    background-color: ${(props) => {\r\n      if (props.barrierItem?.isOpen) {\r\n        const needHighlightning = props.highlightningList?.find((item) => {\r\n          return item === \"bottom\" || \"left\";\r\n        });\r\n\r\n        if (needHighlightning) {\r\n          return \"#79fe2f3d\";\r\n        } else {\r\n          return \"none\";\r\n        }\r\n      }\r\n    }};\r\n  }\r\n`;\r\n\r\nexport const Barrier = (props: BarrierCoord) => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n\r\n  const { gameField, playerList, numberOfPlayer, gameState } = state;\r\n\r\n  const orderIndex = props.orderIndex;\r\n  const cellValues = gameField.values[orderIndex];\r\n  const currPlayerCoord = playerList[numberOfPlayer].coord;\r\n\r\n  const neighboringCellList = getNeighboringCellList(\r\n    currPlayerCoord,\r\n    gameField\r\n  );\r\n\r\n  const neighboringCellListCoord = neighboringCellList.map((cellItem) => {\r\n    const { direction, coord } = cellItem;\r\n    return coord;\r\n  });\r\n\r\n  const checkCellListCoord = neighboringCellListCoord.concat(currPlayerCoord);\r\n\r\n  const needCheckHighlightning = checkCellListCoord.find(\r\n    (coord) => orderIndex === coord\r\n  );\r\n\r\n  const highlightningList = getHighlightningList(\r\n    neighboringCellList,\r\n    gameField,\r\n    currPlayerCoord,\r\n    gameState,\r\n    playerList,\r\n    numberOfPlayer\r\n  );\r\n\r\n  switch (cellValues.name) {\r\n    case \"commonCell\": {\r\n      const barrierList = cellValues.barrierList?.map((barrier) => {\r\n        return (\r\n          <Wall\r\n            key={barrier.direction}\r\n            barrierItem={barrier}\r\n            highlightningList={\r\n              needCheckHighlightning\r\n                ? getHigtlightningDirection(\r\n                    highlightningList,\r\n                    orderIndex,\r\n                    barrier.direction\r\n                  )\r\n                : null\r\n            }\r\n            onClick={() => {\r\n              const canCloseHole = highlightningList.find((cellType) => {\r\n                return (\r\n                  cellType?.coord === orderIndex &&\r\n                  cellType?.direction === barrier.direction &&\r\n                  barrier.isOpen === true\r\n                );\r\n              })\r\n                ? true\r\n                : false;\r\n              if (canCloseHole) {\r\n                dispatch({\r\n                  type: \"req-fillHole\",\r\n                  payload: { coord: orderIndex, direction: barrier.direction },\r\n                });\r\n              } else {\r\n                return null;\r\n              }\r\n            }}\r\n          >\r\n            {\" \"}\r\n          </Wall>\r\n        );\r\n      });\r\n      return <>{barrierList}</>;\r\n    }\r\n    default: {\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nconst getHigtlightningDirection = (\r\n  highlightningList: (AvailableCellType | null)[],\r\n  orderIndex: string,\r\n  direction: MoveDirection\r\n) => {\r\n  const currList = highlightningList.filter((cellItem) => {\r\n    return cellItem?.coord === orderIndex && cellItem?.direction === direction;\r\n  });\r\n\r\n  const structuredList = currList.map((cellItem) => {\r\n    if (cellItem) {\r\n      const { direction, coord } = cellItem;\r\n      return direction;\r\n    } else {\r\n      return null;\r\n    }\r\n  });\r\n\r\n  return structuredList;\r\n};\r\n\r\n/**\r\n * Check the neifhboring of that coord.\r\n * Have they door or window\r\n */\r\nconst getHighlightningList = (\r\n  neighboringCellList: AvailableCellListType,\r\n  gameField: GameField,\r\n  currCoord: string,\r\n  gameState: GameState,\r\n  playerList: PlayerListType,\r\n  numberOfPlayer: number\r\n) => {\r\n  const currCell = gameField.values[currCoord];\r\n\r\n  const availableCellList = neighboringCellList\r\n    .map((cellItem) => {\r\n      const { direction, coord } = cellItem;\r\n      const currCellHasHole = checkCellOnHole(currCell, direction);\r\n      const nextCell = gameField.values[coord];\r\n      const oppositeDirection = getOppositeDirection(direction);\r\n      const nextCellHasHole = checkCellOnHole(nextCell, oppositeDirection);\r\n      if (currCellHasHole) {\r\n        const cellItemWithHole: AvailableCellType = {\r\n          direction,\r\n          coord: currCoord,\r\n        };\r\n\r\n        return cellItemWithHole;\r\n      } else if (nextCellHasHole) {\r\n        const cellItemWithHole: AvailableCellType = {\r\n          direction: oppositeDirection,\r\n          coord,\r\n        };\r\n        return cellItemWithHole;\r\n      } else {\r\n        return null;\r\n      }\r\n    })\r\n    .filter((availableCell) => availableCell !== null);\r\n\r\n  switch (gameState.type) {\r\n    case \"gameStarted.applyCard\":\r\n      const cardItemList = playerList[numberOfPlayer].inventory;\r\n      const selectedCard = cardItemList.find(\r\n        (cardItem) => cardItem?.isSelected === true\r\n      );\r\n      const typeOfSelectedCard = selectedCard?.name;\r\n      if (typeOfSelectedCard === \"boards\") {\r\n        return availableCellList;\r\n      } else {\r\n        return [];\r\n      }\r\n\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n\r\nconst checkCellOnHole = (cell: CellType, direction: MoveDirection) => {\r\n  if (cell.name === \"commonCell\") {\r\n    if (direction === \"left\" || direction === \"bottom\") {\r\n      const cellHasWindow = cell.barrierList?.find(\r\n        (barrier) => barrier.name === \"window\"\r\n      )\r\n        ? true\r\n        : false;\r\n      const cellHasDoor = cell.barrierList?.find(\r\n        (barrier) => barrier.name === \"door\"\r\n      )\r\n        ? true\r\n        : false;\r\n      const cellHasHole = cellHasWindow || cellHasDoor;\r\n      return cellHasHole;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst getOppositeDirection = (direction: MoveDirection): MoveDirection => {\r\n  switch (direction) {\r\n    case \"top\": {\r\n      return \"bottom\";\r\n    }\r\n    case \"bottom\": {\r\n      return \"top\";\r\n    }\r\n    case \"left\": {\r\n      return \"right\";\r\n    }\r\n    case \"right\": {\r\n      return \"left\";\r\n    }\r\n  }\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport {\r\n  GameField,\r\n  PlayerListType,\r\n  EnemyListType,\r\n  CommonCell,\r\n  MoveDirection,\r\n  AvailableCellListType,\r\n  CellType,\r\n  AvailableCellType,\r\n  State,\r\n  GameState,\r\n} from \"../../business/types\";\r\n\r\nimport { getCards } from \"./getCards\";\r\nimport { getPlayersList } from \"./getPlayersList\";\r\nimport { getEnemyList } from \"./getEnemyList\";\r\nimport { Barrier } from \"./Barrier\";\r\n\r\nimport { MOVE_DIRECTION_LIST } from \"../../shared/config\";\r\n\r\ntype CellApperance = {\r\n  hasMarker?: boolean;\r\n};\r\n\r\nconst Wrap = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst CellItem = styled.div<CellApperance>`\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  border: 1px solid lightgray;\r\n  font-size: 14px;\r\n  text-align: right;\r\n  width: 50px;\r\n  height: 50px;\r\n  color: lightgrey;\r\n  background-color: ${(props) => {\r\n    if (props.hasMarker) {\r\n      return \" rgb(241, 224, 224)\";\r\n    }\r\n  }};\r\n`;\r\n\r\nexport const getFilledPlayGrid = (state: State, getContextMenu: Function) => {\r\n  const { gameField, playerList, numberOfPlayer, gameState, enemyList } = state;\r\n  const orderGameCells = gameField.order;\r\n\r\n  const currPlayerCoord = playerList[numberOfPlayer].coord;\r\n\r\n  const availableCells = state.availableCellsCoords?.concat(currPlayerCoord);\r\n\r\n\r\n  const fullPlayerGrid = orderGameCells.map((orderIndex: string) => {\r\n     \r\n    const cellValues = gameField.values[orderIndex];\r\n    const [hor, vert] = orderIndex.split(\".\");\r\n\r\n    const hasMarker = availableCells?.includes(orderIndex);\r\n    return (\r\n      <Wrap key={`${hor}.${vert}`}>\r\n        <CellItem hasMarker={hasMarker}>\r\n          {getCards(cellValues)}\r\n          {getPlayersList(\r\n            orderIndex,\r\n            playerList,\r\n            numberOfPlayer,\r\n            getContextMenu\r\n          )}\r\n          {cellValues.name === \"commonCell\"\r\n            ? getEnemyList(orderIndex, enemyList)\r\n            : null}\r\n          {`${hor}.${vert}`}\r\n        </CellItem>\r\n        {cellValues.name === \"commonCell\" ? (\r\n          <Barrier orderIndex={orderIndex}></Barrier>\r\n        ) : null}\r\n      </Wrap>\r\n    );\r\n  });\r\n\r\n  return fullPlayerGrid;\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { FINISH_COORD } from \"../../shared/config\";\r\nimport { State } from \"../../business/types\";\r\n\r\nimport { getFilledPlayGrid } from \"./getFilledPlayGrid\";\r\n\r\ntype GridProps = {\r\n  vert: number;\r\n  type: \"visible\" | \"hidden\";\r\n};\r\n\r\ntype ContextMenuType = {\r\n  type: \"visible\" | \"hidden\";\r\n  coord?: { x?: number; y?: number };\r\n};\r\n\r\ntype WrapType = {};\r\n\r\nconst GridItem = styled.div<GridProps>`\r\n  outline: 2px solid lightgray;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  transform: rotate(270deg);\r\n  display: grid;\r\n  grid-column-start: -1;\r\n  //–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä—É—é –ø–æ —à–∏—Ä–∏–Ω–µ –ø–æ–ª—è\r\n  grid-template-columns: ${(props) => {\r\n    return `repeat(${props.vert} ,50px)`;\r\n  }};\r\n\r\n  grid-gap: 0px;\r\n  > * {\r\n    transform: rotate(90deg);\r\n  }\r\n`;\r\n\r\nconst ContextMenu = styled.div<ContextMenuType>`\r\n  display: ${(props) => {\r\n    if (props.type === \"visible\") {\r\n      return \"block\";\r\n    } else {\r\n      return \"none\";\r\n    }\r\n  }};\r\n\r\n  flex-direction: column;\r\n  position: absolute;\r\n  width: 100px;\r\n  height: 100px;\r\n  background-color: #ffffff;\r\n  box-shadow: 0 0 10px rgb(0 0 0 / 50%);\r\n  justify-content: start;\r\n  padding: 21px 0 0 12px;\r\n  box-sizing: border-box;\r\n  left: ${(props) => {\r\n    if (props.coord?.x) {\r\n      return `${props.coord?.x + 50}px`;\r\n    } else {\r\n      return \"0px\";\r\n    }\r\n  }};\r\n  top: ${(props) => {\r\n    return `${props.coord?.y}px`;\r\n  }};\r\n`;\r\n\r\nconst Button = styled.button`\r\n  height: 30px;\r\n  width: 70px;\r\n`;\r\n\r\nexport const PlayGrid = () => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n\r\n  type contextMenuType = {\r\n    type: \"visible\" | \"hidden\";\r\n    playerNumber?: Number;\r\n    coord?: { x?: number; y?: number };\r\n  };\r\n\r\n  const initialContextMenuState: contextMenuType = { type: \"hidden\" };\r\n\r\n  const [contextMenuState, updatecontextMenuState] = useState(\r\n    initialContextMenuState\r\n  );\r\n\r\n  const { gameField, playerList, enemyList, numberOfPlayer } = state;\r\n\r\n  const { vert: maxVert } = FINISH_COORD;\r\n  const height = maxVert + 1;\r\n  const playerEl = document.getElementById(`player${numberOfPlayer}`);\r\n  const playerCoord = {\r\n    x: playerEl?.getBoundingClientRect().x,\r\n    y: playerEl?.getBoundingClientRect().y,\r\n  };\r\n\r\n  const getContextMenu = (numberOfPlayer: number) => {\r\n    updatecontextMenuState({\r\n      type: \"visible\",\r\n      playerNumber: numberOfPlayer,\r\n      coord: playerCoord,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    switch (contextMenuState.type) {\r\n      case \"visible\": {\r\n        const bodyElement = document.querySelector(\"body\");\r\n\r\n        const callback = (e: MouseEvent) => {\r\n          /**\r\n           * Its for avoiding event on currentPlayer\r\n           */\r\n          if (\r\n            e.target ===\r\n            document.getElementById(`player${state.numberOfPlayer}`)\r\n          ) {\r\n            e.stopPropagation();\r\n          }\r\n\r\n          updatecontextMenuState((prevState) => {\r\n            return { ...prevState, type: \"hidden\" };\r\n          });\r\n\r\n          bodyElement?.removeEventListener(\"click\", callback, {\r\n            capture: true,\r\n          });\r\n        };\r\n\r\n        bodyElement?.addEventListener(\"click\", callback, {\r\n          capture: true,\r\n        });\r\n\r\n        return () => {\r\n          bodyElement?.removeEventListener(\"click\", callback, {\r\n            capture: true,\r\n          });\r\n        };\r\n      }\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }, [contextMenuState.type]);\r\n\r\n  return (\r\n    <>\r\n      <GridItem vert={height} type={contextMenuState.type}>\r\n        {getFilledPlayGrid(state, getContextMenu)}\r\n      </GridItem>\r\n      <ContextMenu\r\n        type={contextMenuState.type}\r\n        id={\"contextMenu\"}\r\n        className={\"contextMenu\"}\r\n        coord={contextMenuState.coord}\r\n      >\r\n        <Button\r\n          className={\"contextMenu\"}\r\n          onClick={() => {\r\n            dispatch({\r\n              type: \"req-shareCard\",\r\n              payload: contextMenuState.playerNumber,\r\n            });\r\n          }}\r\n        >\r\n          –ø–µ—Ä–µ–¥–∞—Ç—å\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            dispatch({\r\n              type: \"req-healPlayer\",\r\n              payload: contextMenuState.playerNumber,\r\n            });\r\n          }}\r\n        >\r\n          –ª–µ—á–∏—Ç—å\r\n        </Button>\r\n      </ContextMenu>\r\n    </>\r\n  );\r\n};\r\n","import { useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { State, PlayerListType } from \"../business/types\";\r\n\r\nimport { AMOUNT_PLAYERS, MAX_HEALTH_AMOUNT } from \"../shared/config\";\r\n\r\ntype HealthSlotType = {\r\n  isFilled: boolean;\r\n};\r\n\r\nconst HealthSlotList = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\nconst HealthSlot = styled.div<HealthSlotType>`\r\n  width: 5px;\r\n  height: 5px;\r\n  border-radius: 50%;\r\n  border: 1px solid #f09292;\r\n  margin: 1px;\r\n  background-color: ${(props) => {\r\n    if (props.isFilled) {\r\n      return \"#f09292\";\r\n    } else return \"none\";\r\n  }};\r\n`;\r\n\r\nexport const HealthSlots = (props: { index: number }) => {\r\n  const { playerList } = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n\r\n  return (\r\n    <HealthSlotList>\r\n      {getHealthSlot(playerList, props.index).map(\r\n        (healthSlotFilled: boolean, index: number) => {\r\n          return (\r\n            <HealthSlot key={index} isFilled={healthSlotFilled}></HealthSlot>\r\n          );\r\n        }\r\n      )}\r\n    </HealthSlotList>\r\n  );\r\n};\r\n\r\nconst getHealthSlot = (playerList: PlayerListType, index: number) => {\r\n  const playerHealth = getPlayerHealth(playerList, index);\r\n  const maxHealthSlotList = new Array(MAX_HEALTH_AMOUNT).fill(0);\r\n\r\n  const filledHealthSlotList = maxHealthSlotList.reduce(\r\n    (prev, currSlot, index) => {\r\n      if (index < playerHealth) {\r\n        return [...prev, true];\r\n      } else {\r\n        return [...prev, false];\r\n      }\r\n    },\r\n    []\r\n  );\r\n  return filledHealthSlotList;\r\n};\r\n\r\nconst getPlayerHealth = (\r\n  playersList: PlayerListType,\r\n  numberOfPlayer: number\r\n) => {\r\n  return playersList[numberOfPlayer].health;\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  State,\r\n  PlayerListType,\r\n  HealthCardType,\r\n  GameState,\r\n  CardItem,\r\n} from \"../business/types\";\r\nimport { Health } from \"./Health\";\r\nimport { BoardsCard } from \"./BoardsCard\";\r\nimport { WeaponCard } from \"./WeaponCard\";\r\n\r\ntype SlotType = {\r\n  onClick: Function;\r\n  highlighting?: boolean;\r\n};\r\n\r\nconst InventoryWrap = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst Slot = styled.div<SlotType>`\r\n  display: flex;\r\n  cursor: pointer;\r\n\r\n  & > * {\r\n    margin: 2px;\r\n    position: relative;\r\n  }\r\n\r\n  outline: ${(props) => {\r\n    if (props.highlighting === true) {\r\n      return \"1px solid red \";\r\n    }\r\n  }};\r\n`;\r\n\r\nexport const Inventory = (props: { index: number }) => {\r\n  const dispatch = useDispatch();\r\n  const { playerList, gameState } = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n\r\n  const inventory = playerList[props.index].inventory;\r\n  return (\r\n    <InventoryWrap>\r\n      {inventory.map((inventoryCard, inventoryCardindex) => {\r\n        return (\r\n          <Slot\r\n            key={inventoryCardindex}\r\n            highlighting={inventoryCard?.isSelected}\r\n            onClick={() => {\r\n              dispatch({\r\n                type: \"cardChoosed\",\r\n                payload: { index: inventoryCardindex, card: inventoryCard },\r\n              });\r\n            }}\r\n          >\r\n            {getChildrenComponent(inventoryCard)}\r\n          </Slot>\r\n        );\r\n      })}\r\n    </InventoryWrap>\r\n  );\r\n};\r\n\r\nconst getChildrenComponent = (inventoryCard: CardItem) => {\r\n  switch (inventoryCard?.name) {\r\n    case \"health\": {\r\n      return <Health />;\r\n    }\r\n    case \"boards\": {\r\n      return <BoardsCard />;\r\n    }\r\n    case \"weapon\": {\r\n      return <WeaponCard />;\r\n    }\r\n    default: {\r\n      return null;\r\n    }\r\n  }\r\n};\r\n","import { useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { State, PlayerListType } from \"../business/types\";\r\n\r\nimport { MAX_HEALTH_AMOUNT } from \"../shared/config\";\r\nimport { HealthSlots } from \"../components/HealthSlots\";\r\nimport { Inventory } from \"../components/Inventory\";\r\n\r\ntype HealthSlotType = {\r\n  isFilled: boolean;\r\n};\r\n\r\nconst PlayerStatusCard = styled.div`\r\n  width: 250px;\r\n  height: 200px;\r\n  border: 1px solid lightgray;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst CharacterAvatar = styled.div`\r\n  width: 50px;\r\n  height: 70px;\r\n  border: 1px solid lightgray;\r\n  font-size: 14px;\r\n  text-align: center;\r\n`;\r\n\r\nconst Status = styled.div`\r\n  display: flex;\r\n  border: 1px solid lightgray;\r\n\r\n  padding: 3px;\r\n  margin-bottom: 15px;\r\n  font-size: 14px;\r\n  width: 150px;\r\n`;\r\n\r\nconst HealthStatus = styled(Status)`\r\n  height: 20px;\r\n`;\r\n\r\nconst InventoryStatus = styled(Status)`\r\n  height: 100px;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nexport const PlayerStatus = () => {\r\n  const { numberOfPlayer } = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n\r\n  // TODO: why pass the index?\r\n  return (\r\n    <PlayerStatusCard>\r\n      <Column>\r\n        <CharacterAvatar>–∏–≥—Ä–æ–∫ {`${numberOfPlayer + 1}`}</CharacterAvatar>\r\n      </Column>\r\n      <Column>\r\n        <HealthStatus>\r\n          {`–∑–¥–æ—Ä–æ–≤—å–µ:  `}\r\n          <HealthSlots index={numberOfPlayer}></HealthSlots>\r\n        </HealthStatus>\r\n        <InventoryStatus>\r\n          {`–ø—Ä–µ–¥–º–µ—Ç—ã:  `}\r\n          <Inventory index={numberOfPlayer} />\r\n        </InventoryStatus>\r\n      </Column>\r\n    </PlayerStatusCard>\r\n  );\r\n};\r\n","import { useSelector } from \"react-redux\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  State,\r\n  GameState,\r\n  TypeEffect,\r\n  PlayerListType,\r\n} from \"../business/types\";\r\n\r\nimport { PlayerStatus } from \"./PlayerStatus\";\r\nimport { PlayersStatusList } from \"./PlayersStatusList\";\r\n\r\nconst Status = styled.div`\r\n  width: 200px;\r\n  min-height: 18px;\r\n  width: 250px;\r\n  height: 100px;\r\n  border: 1px solid lightgray;\r\n  background-color: #fff2d9;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  color: #5f5757;\r\n  padding-top: 15px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nexport const StatusList = () => {\r\n  type statusType = string;\r\n  const initialStatus: statusType = \"\";\r\n  const [status, updateStatus] = useState(initialStatus);\r\n\r\n  const { dice, playerList, gameState, doEffect, gameResult } = useSelector(\r\n    (state: State) => ({\r\n      ...state,\r\n    })\r\n  );\r\n\r\n  const newStatus = getTextStatus(gameState, doEffect, dice, gameResult);\r\n  const batlePhrase = \"p–µ–∂–∏–º –±–æ—è\";\r\n  useEffect(() => {\r\n    updateStatus(() => {\r\n      if (gameState.type.includes(\"interactWithEnemy\")) {\r\n        if (gameState.type === \"interactWithEnemy\") {\r\n          return newStatus;\r\n        } else {\r\n          return `${batlePhrase}: ${newStatus}`;\r\n        }\r\n      } else {\r\n        return newStatus;\r\n      }\r\n    });\r\n  }, [gameState.type, doEffect?.type]);\r\n  return (\r\n    <>\r\n      <Status>{status}</Status>\r\n      <PlayerStatus />\r\n      {/*    <PlayersStatusList /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nconst getTextStatus = (\r\n  gameState: GameState,\r\n  doEffect: TypeEffect,\r\n  dice: number,\r\n  gameResult: string\r\n) => {\r\n  switch (gameState.type) {\r\n    case \"gameStarted.trownDice\":\r\n      return \"–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\";\r\n    case \"gameStarted.playerMove\":\r\n      return \"—Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥\";\r\n    case \"gameStarted.takeCard\":\r\n      return \"–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É\";\r\n    case \"gameStarted.applyCard\":\r\n      return \"–ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\";\r\n\r\n    /*   case \"interactWithEnemy.applyCard\":\r\n      return \"–ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ\"; */\r\n    case \"interactWithEnemy.throwBattleDice\": {\r\n      return \"–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\";\r\n    }\r\n    case \"interactWithEnemy.applyCard\": {\r\n      return \"–ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ\";\r\n    }\r\n\r\n    case \"interactWithEnemy.makeBattleAction\":\r\n    case \"interactWithEnemy\":\r\n      switch (doEffect?.type) {\r\n        case \"!openEnemyCard\": {\r\n          return \"–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É\";\r\n        }\r\n\r\n        case \"!getBattleResult\": {\r\n          switch (dice) {\r\n            case 1:\r\n            case 2: {\r\n              return `–≤—ã–ø–∞–ª–æ ${dice}: –∏–≥—Ä–æ–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ—Ä—É–∂–∏–µ –∏–ª–∏ –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫ `;\r\n            }\r\n            case 3: {\r\n              return `–≤—ã–ø–∞–ª–æ ${dice}: –∏–≥—Ä–æ–∫ —Ç–µ—Ä—è–µ—Ç 1 –∑–¥–æ—Ä–æ–≤—å–µ`;\r\n            }\r\n            case 4: {\r\n              return `–≤—ã–ø–∞–ª–æ ${dice}: –∏–≥—Ä–æ–∫ —Å–ø–∞—Å–∞–µ—Ç—Å—è –±–µ–≥—Å—Ç–≤–æ–º `;\r\n            }\r\n            default:\r\n              return \"–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ\";\r\n          }\r\n        }\r\n        default:\r\n          return \"—Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥\";\r\n      }\r\n\r\n    /*   case \"gameStarted.interactWithEnemy.fightOrKeepBattle\":\r\n      return \"–ø—Ä–∏–º–µ–Ω–∏—Ç—å  –æ—Ä—É–∂–∏–µ –∏–ª–∏ –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\"; */\r\n\r\n    case \"endGame\":\r\n      return gameResult;\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { State, PlayerListType } from \"../business/types\";\r\n\r\nimport { AMOUNT_PLAYERS, MAX_HEALTH_AMOUNT } from \"../shared/config\";\r\nimport { HealthSlots } from \"../components/HealthSlots\";\r\nimport { Inventory } from \"../components/Inventory\";\r\n\r\ntype HealthSlotType = {\r\n  isFilled: boolean;\r\n};\r\n\r\ntype AmountOfPlayers = {\r\n  amount: number;\r\n};\r\n\r\nconst PlayersListWrap = styled.div<AmountOfPlayers>`\r\n  /*  width: 130px; */\r\n  width: 100%;\r\n  height: 100px;\r\n  /*   border: 1px solid lightgray; */\r\n  display: grid;\r\n\r\n  grid-template-rows: 20% auto auto;\r\n  grid-template-columns: ${(props) => {\r\n    return `repeat(${props.amount} ,25px)`;\r\n  }};\r\n  pointer-events: none;\r\n  margin: 0 30px;\r\n`;\r\n\r\nconst CharacterAvatar = styled.div`\r\n  font-size: 12px;\r\n  text-align: center;\r\n  grid-row-start: 1;\r\n  grid-row-end: 2;\r\n`;\r\n\r\nconst HealthSlotsWrap = styled.div`\r\n  grid-row-start: 2;\r\n  grid-row-end: 3;\r\n  & > * {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst InventorysWrap = styled.div`\r\n  grid-row-start: 3;\r\n  grid-row-end: 4;\r\n  & * {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    box-sizing: border-box;\r\n    outline: none;\r\n    /*  & > * {\r\n      box-sizing: border-box;\r\n    } */\r\n  }\r\n`;\r\n\r\nexport const PlayersStatusList = () => {\r\n  return (\r\n    <PlayersListWrap amount={AMOUNT_PLAYERS}>\r\n      {new Array(AMOUNT_PLAYERS).fill(0).map((player, index) => {\r\n        return (\r\n          <React.Fragment key={index}>\r\n            <CharacterAvatar>{`${index + 1}`}</CharacterAvatar>\r\n            <HealthSlotsWrap>\r\n              <HealthSlots index={index}></HealthSlots>\r\n            </HealthSlotsWrap>\r\n            <InventorysWrap>\r\n              <Inventory index={index} />\r\n            </InventorysWrap>\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </PlayersListWrap>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { State } from \"../business/types\";\r\n\r\nconst GameScore = styled.div`\r\n  margin: 100px;\r\n`;\r\n\r\nexport const EndScreen = () => {\r\n  const gameResult = useSelector((state: State) => state.gameResult);\r\n  return (\r\n    <>\r\n      <GameScore>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. {gameResult}</GameScore>\r\n    </>\r\n  );\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst StartButton = styled.button`\r\n  height: 22px;\r\n  margin: 140px;\r\n`;\r\n\r\nexport const StartScreen = () => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      <StartButton\r\n        onClick={() => {\r\n          dispatch({ type: \"clickedStartButton\" });\r\n        }}\r\n      >\r\n        {\" \"}\r\n        –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\r\n      </StartButton>\r\n    </>\r\n  );\r\n};\r\n","import {\r\n  StartCell,\r\n  CommonCell,\r\n  FinishCell,\r\n  GameFieldCells,\r\n  CellType,\r\n} from \"../../types\";\r\n\r\nimport {\r\n  FINISH_COORD,\r\n  START_COORD,\r\n  CELLS_BARRIERS_LIST,\r\n} from \"../../../shared/config\";\r\n\r\n/**\r\n *  Returns an object with start and finish  in structure of GameValues.\r\n */\r\nexport const getFieldCells = (cellList: string[]): GameFieldCells => {\r\n  const emptyFieldCells = createEmptyFieldCells(cellList);\r\n  const fieldCellsWithWalls = getCellsWalls(emptyFieldCells);\r\n  const organizedFieldCells = getOrganizedFieldCells(fieldCellsWithWalls);\r\n  return organizedFieldCells;\r\n};\r\n\r\n/**\r\n * Creates an object with keys and empty cells in structure of GameValues.\r\n */\r\nconst createEmptyFieldCells = (cellList: Array<string>): GameFieldCells => {\r\n  const emptyFieldItem: CommonCell = {\r\n    name: \"commonCell\",\r\n    cardItem: [],\r\n  };\r\n\r\n  let newEmptyGameField: GameFieldCells = {};\r\n\r\n  cellList.forEach((cell: string) => {\r\n    newEmptyGameField[cell] = emptyFieldItem;\r\n  });\r\n\r\n  return newEmptyGameField;\r\n};\r\n\r\n/**\r\n *  Creates an object with start, finish and walls in structure of GameValues.\r\n */\r\nconst getOrganizedFieldCells = (emptyField: GameFieldCells): GameFieldCells => {\r\n  const startIndex = `${START_COORD.hor}.${START_COORD.vert}`;\r\n  const finishIndex = `${FINISH_COORD.hor}.${FINISH_COORD.vert}`;\r\n\r\n  const startCell: StartCell = {\r\n    name: \"start\",\r\n    cardItem: [],\r\n  };\r\n\r\n  const finishCell: FinishCell = {\r\n    name: \"finish\",\r\n    cardItem: [],\r\n  };\r\n\r\n  const organizedGameFieldCells = {\r\n    ...emptyField,\r\n    [startIndex]: startCell,\r\n    [finishIndex]: finishCell,\r\n  };\r\n\r\n  return organizedGameFieldCells;\r\n};\r\n\r\n/**\r\n * @returns The object in structure GameFieldCells. With walls(barriers) in cells.\r\n */\r\nconst getCellsWalls = (emptyField: GameFieldCells): GameFieldCells => {\r\n  // TODO: Need add checking for CommonCell?\r\n\r\n  /**\r\n   * Returns list of Cells with walls(barriers)\r\n   */\r\n  const cellsWithBarrierList = CELLS_BARRIERS_LIST.map((cellBarrier): [\r\n    string,\r\n    CellType\r\n  ] => {\r\n    const { coord, barrierList } = cellBarrier;\r\n    const cellIndex = `${coord.hor}.${coord.vert}`;\r\n\r\n    const cellWithoutBarrier = emptyField[cellIndex];\r\n\r\n    if (cellWithoutBarrier.name === \"commonCell\") {\r\n      const cellWithBarrier = {\r\n        ...cellWithoutBarrier,\r\n        barrierList: barrierList,\r\n      };\r\n\r\n      return [cellIndex, cellWithBarrier];\r\n    } else {\r\n      return [cellIndex, cellWithoutBarrier];\r\n    }\r\n  });\r\n\r\n  const cellsWithBarriers: GameFieldCells =\r\n    Object.fromEntries(cellsWithBarrierList);\r\n\r\n  const fieldCellsWithWalls = { ...emptyField, ...cellsWithBarriers };\r\n  return fieldCellsWithWalls;\r\n};\r\n","import { CommonCell, GameFieldCells, CardItem } from \"../../types\";\r\n\r\nimport {\r\n  AMOUNT_HEALTH_ITEMS,\r\n  AMOUNT_BOARDS_ITEMS,\r\n  APPERANCE_CARD,\r\n  AMOUNT_WEAPONS_ITEMS,\r\n} from \"../../../shared/config\";\r\n\r\ntype CardSet = {\r\n  card: CardItem;\r\n  amount: number;\r\n};\r\n\r\nconst cardsList: CardSet[] = [\r\n  {\r\n    card: {\r\n      name: \"health\",\r\n      apperance: APPERANCE_CARD,\r\n    },\r\n    amount: AMOUNT_HEALTH_ITEMS,\r\n  },\r\n  {\r\n    card: {\r\n      name: \"boards\",\r\n      apperance: APPERANCE_CARD,\r\n    },\r\n    amount: AMOUNT_BOARDS_ITEMS,\r\n  },\r\n  {\r\n    card: {\r\n      name: \"weapon\",\r\n      apperance: APPERANCE_CARD,\r\n    },\r\n    amount: AMOUNT_WEAPONS_ITEMS,\r\n  },\r\n];\r\n\r\n\r\n\r\n/**\r\n * Returns an object in structure of FieldCells with spreaded cards in random picked cells.\r\n */\r\nexport const spreadCards = (gameFieldCells: GameFieldCells): GameFieldCells => {\r\n  /**\r\n   * filled–°ells - its object with filling cells\r\n   * currCardSet -curr set of cards\r\n   * from cardset making object with cards\r\n   */\r\n  const cellsWithAllCards = cardsList.reduce((filled–°ells, currCardSet) => {\r\n    const gameFieldCellsWithPrevios = { ...gameFieldCells, ...filled–°ells };\r\n\r\n    const cellsForCards = getListForCards(\r\n      gameFieldCellsWithPrevios,\r\n      currCardSet\r\n    );\r\n\r\n    /**\r\n     * Adding filled with previos cardSet cells\r\n     */\r\n    const filledWithCardsFieldCells = setCards(cellsForCards, currCardSet);\r\n    const filledWithAllCardsCells = {\r\n      ...filled–°ells,\r\n      ...filledWithCardsFieldCells,\r\n    };\r\n    return filledWithAllCardsCells;\r\n  }, {});\r\n\r\n  const gameFieldFull = { ...gameFieldCells, ...cellsWithAllCards };\r\n\r\n  return gameFieldFull;\r\n};\r\n\r\n/**\r\n *  Creates an object with spreaded cards into cells from cellsForCards.\r\n */\r\nconst setCards = (\r\n  cellList: [string, CommonCell][],\r\n  currCardSet: CardSet\r\n): GameFieldCells => {\r\n  const cellListWithCards = cellList.map(\r\n    (cellWithCards: [string, CommonCell]) => {\r\n      const [index, cell] = cellWithCards;\r\n\r\n      const cellWithCard: CommonCell = {\r\n        ...cell,\r\n        cardItem: [currCardSet.card],\r\n      };\r\n      return [index, cellWithCard];\r\n    }\r\n  );\r\n\r\n  const fieldCellsWithCards = Object.fromEntries(cellListWithCards);\r\n\r\n  return fieldCellsWithCards;\r\n};\r\n\r\n/**\r\n * Returns an array with random empty cell witch suitable for card.\r\n * Array lenght is equal AMOUNT_..._ITEMS.\r\n */\r\nconst getListForCards = (\r\n  gameField: GameFieldCells,\r\n  currCardSet: CardSet\r\n): [string, CommonCell][] => {\r\n  const listGameField = Object.entries(gameField);\r\n\r\n  /**\r\n   * This array contains only empty cells\r\n   */\r\n\r\n  const emptyCellsList = listGameField.filter((cellItem): cellItem is [\r\n    string,\r\n    CommonCell\r\n  ] => {\r\n    const [, item] = cellItem;\r\n\r\n    return item.name === \"commonCell\" && item.cardItem.length === 0;\r\n  });\r\n\r\n  const AMOUNT_EMPTY_CELLS = emptyCellsList.length;\r\n  const amoutCurrentCards = currCardSet.amount;\r\n\r\n  /**\r\n   * Is a list with number of indexes of empty cells.\r\n   */\r\n  const keyList: Array<number> = new Array(amoutCurrentCards)\r\n    .fill(0)\r\n    .reduce((prevkeyList) => {\r\n      const randomNumber = getRandomNumber(prevkeyList, AMOUNT_EMPTY_CELLS);\r\n\r\n      if (prevkeyList) {\r\n        return [...prevkeyList, randomNumber];\r\n      } else {\r\n        return [randomNumber];\r\n      }\r\n    }, []);\r\n\r\n  const listForCards = keyList.map((keyItem: number): [string, CommonCell] => {\r\n    return emptyCellsList[keyItem];\r\n  });\r\n\r\n  return listForCards;\r\n};\r\n\r\n/**\r\n * Gets an array with the previously selected random numbers and the maximum number to select.\r\n * Returns a random number satisfying the conditions.\r\n */\r\nconst getRandomNumber = (\r\n  arrNumber: Array<number>,\r\n  maxNumber: number\r\n): number => {\r\n  const number = Math.floor(Math.random() * maxNumber);\r\n\r\n  if (arrNumber) {\r\n    return arrNumber.includes(number)\r\n      ? getRandomNumber(arrNumber, maxNumber)\r\n      : number;\r\n  } else {\r\n    return number;\r\n  }\r\n};\r\n","import { FINISH_COORD } from \"../../../shared/config\";\r\nimport { getFieldCells} from \"./getFieldCells\";\r\n/* import { spreadHealthCards } from \"./spreadHealthCards\"; */\r\nimport { spreadCards } from \"./spreadCards\";\r\n\r\n//TODO: Need add some config object for all cards and spreading them simultaneously.\r\nexport const getGameField = () => {\r\n  const order = getCellOrder();\r\n  const gameFieldCells = getFieldCells(order);\r\n  const filledWithCardsCells = spreadCards(gameFieldCells);\r\n  const gameField = { order, values: filledWithCardsCells };\r\n  return gameField;\r\n};\r\n\r\n/**\r\n * Creates an array with cell index order.\r\n */\r\nconst getCellOrder = (): Array<string> => {\r\n  const width = FINISH_COORD.hor;\r\n  const height = FINISH_COORD.vert;\r\n\r\n  let orderList: Array<string> = [];\r\n\r\n  for (let hor = 0; hor <= width; hor++) {\r\n    for (let vert = 0; vert <= height; vert++) {\r\n      const index: string = `${hor}.${vert}`;\r\n      orderList.push(index);\r\n    }\r\n  }\r\n\r\n  return orderList;\r\n};\r\n","import { PlayerListType } from \"../types\";\r\n\r\nimport {\r\n  AMOUNT_PLAYERS,\r\n  INITIAL_PLAYER_HEALTH,\r\n  START_COORD,\r\n} from \"../../shared/config\";\r\n\r\nexport const getPlayers = (): PlayerListType => {\r\n  const startCoord = `${START_COORD.hor}.${START_COORD.vert}`;\r\n  const playersList = new Array(AMOUNT_PLAYERS).fill(0).map((player, index) => {\r\n    const playerCard = {\r\n      name: \"player\",\r\n      health: INITIAL_PLAYER_HEALTH,\r\n      orderNumber: index,\r\n      coord: startCoord,\r\n      inventory: [],\r\n    };\r\n    return [index, playerCard];\r\n  });\r\n\r\n  const playersObj: PlayerListType = Object.fromEntries(playersList);\r\n  return playersObj;\r\n};\r\n","import { EnemyListType, GameField, CommonCell, CellType } from \"../types\";\r\n\r\nimport { AMOUNT_ENEMIES, APPERANCE_CARD } from \"../../shared/config\";\r\n\r\nexport const getEnemies = (gameField: GameField): EnemyListType => {\r\n  const emptyCellsList = getEmptyList(gameField);\r\n  const enemiesCoords = getListOfIndexes(emptyCellsList);\r\n  const enemiesObj = getListOfEnemy(enemiesCoords);\r\n  return enemiesObj;\r\n};\r\n\r\n/**\r\n * For every element checks that cell has no cards on it.\r\n * Returns the list of cells without any cards.\r\n */\r\nconst getEmptyList = (gameField: GameField): [string, CommonCell][] => {\r\n  const listCells = Object.entries(gameField.values);\r\n  const emptyCellsList = listCells.filter((cellItem): cellItem is [\r\n    string,\r\n    CommonCell\r\n  ] => {\r\n    const [, item] = cellItem;\r\n    return item.name === \"commonCell\" && item.cardItem.length === 0;\r\n  });\r\n  return emptyCellsList;\r\n};\r\n\r\n/**\r\n * Returns the list of random picked indexes of emptyCellsList\r\n */\r\nconst getListOfIndexes = (emptyCellsList: [string, CommonCell][]) => {\r\n  const AMOUNT_EMPTY_CELLS = emptyCellsList.length;\r\n\r\n  // TODO: it may be taking out as separate module with getRandomNumber?\r\n  const keyList: Array<number> = new Array(AMOUNT_ENEMIES)\r\n    .fill(0)\r\n    .reduce((prevkeyList) => {\r\n      const randomNumber = getRandomNumber(prevkeyList, AMOUNT_EMPTY_CELLS);\r\n\r\n      if (prevkeyList) {\r\n        return [...prevkeyList, randomNumber];\r\n      } else {\r\n        return [randomNumber];\r\n      }\r\n    }, []);\r\n\r\n  const idexesListForCards = keyList.map((keyItem: number): string => {\r\n    const [index] = emptyCellsList[keyItem];\r\n    return index;\r\n  });\r\n\r\n  return idexesListForCards;\r\n};\r\n\r\n/**\r\n * Returns the object of all enemies\r\n */\r\nconst getListOfEnemy = (enemiesCoords: string[]) => {\r\n  const enemyList = enemiesCoords.map((coord) => {\r\n    const enemyCard = {\r\n      name: \"enemy\",\r\n      power: 1,\r\n      coord: coord,\r\n      apperance: APPERANCE_CARD,\r\n    };\r\n    return [enemyCard.coord, enemyCard];\r\n  });\r\n\r\n  const enemiesObj: EnemyListType = Object.fromEntries(enemyList);\r\n  return enemiesObj;\r\n};\r\n\r\n/**\r\n * Gets an array with the previously selected random numbers and the maximum number to select.\r\n * Returns a random number satisfying the conditions.\r\n */\r\nconst getRandomNumber = (\r\n  arrNumber: Array<number>,\r\n  maxNumber: number\r\n): number => {\r\n  const number = Math.floor(Math.random() * maxNumber);\r\n\r\n  if (arrNumber) {\r\n    return arrNumber.includes(number)\r\n      ? getRandomNumber(arrNumber, maxNumber)\r\n      : number;\r\n  } else {\r\n    return number;\r\n  }\r\n};\r\n","import { State } from \"../types\";\r\n\r\nimport { getGameField } from \"./getGameField\";\r\nimport { getPlayers } from \"./getPlayers\";\r\nimport { getEnemies } from \"./getEnemies\";\r\n\r\nconst getInitialState = (): State => {\r\n  //–æ—Ç–¥–∞–µ–º gameFieldWithoutEnemy –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Ä–∞–≥–æ–≤ –∏–∑ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫\r\n  const gameFieldWithoutEnemy = getGameField();\r\n\r\n  return {\r\n    gameState: { type: \"waitingStart\" },\r\n    dice: 0,\r\n    gameResult: \"\",\r\n    playerList: getPlayers(),\r\n    enemyList: getEnemies(gameFieldWithoutEnemy),\r\n    gameField: gameFieldWithoutEnemy,\r\n    doEffect: null,\r\n    numberOfPlayer: 0,\r\n  };\r\n};\r\n\r\nexport const initialState = getInitialState();\r\n","import { State } from \"../../types\";\r\nimport { ActionType } from \"../../reducer\";\r\n\r\nexport const waitingStart = ( state: State,action: ActionType): State => {\r\n  switch (action.type) {\r\n    case \"clickedStartButton\": {\r\n      return {\r\n        ...state,\r\n        gameState: {\r\n          type: \"gameStarted.trownDice\",\r\n        },\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { State, PlayerListType, MoveDirection, CellType } from \"../../../types\";\r\n\r\nimport { checkCellHasWall } from \"../../common/checkCellHasWall\";\r\n/** Cheking the cases when can't take the cell. In default we think that can. */\r\nexport const checkCanTakeCell = (\r\n  state: State,\r\n  nextPlayerCoord: string,\r\n  direction: MoveDirection\r\n) => {\r\n  const { playerList, dice } = state;\r\n  const metBarrier = checkCellHasWall(state, nextPlayerCoord, direction);\r\n  const isLastStepOfMove = dice === 1;\r\n  const isNextCellOcupied = checkNextCellOccupied(playerList, nextPlayerCoord);\r\n  const canNotTakeCell = isLastStepOfMove && isNextCellOcupied;\r\n\r\n  switch (true) {\r\n    case metBarrier: {\r\n      return false;\r\n    }\r\n\r\n    case canNotTakeCell: {\r\n      // TODO: –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –∑–∞–Ω—è—Ç–æ–π —á–µ–π–∫–µ\r\n      return false;\r\n    }\r\n    default: {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n\r\nconst checkNextCellOccupied = (\r\n  playersList: PlayerListType,\r\n  newCoord: string\r\n): boolean => {\r\n  const iterablePlayerList = Object.entries(playersList);\r\n  const isCellOccupied = iterablePlayerList.some((player) => {\r\n    const [, playerValue] = player;\r\n    return playerValue.coord === newCoord;\r\n  });\r\n  return isCellOccupied;\r\n};\r\n","import { State, PlayerListType, CardItem } from \"../../types\";\r\n\r\n/**\r\n * We need to give highlighting to healthCard\r\n */\r\ntype TargerCard = {\r\n  index: number;\r\n  card: CardItem;\r\n};\r\n\r\nexport const getStateCardSelected = (state: State, targerCard: TargerCard) => {\r\n  // TODO: Need to restrict select unneceserry card -?!\r\n  // Add switch on type of cards\r\n  const { numberOfPlayer } = state;\r\n\r\n  const newPlayerList = changeSelectedCard(state, targerCard.index);\r\n\r\n  const hasAnyCardSelected = newPlayerList[numberOfPlayer].inventory.find(\r\n    (card) => {\r\n      return card?.isSelected === true;\r\n    }\r\n  )\r\n    ? true\r\n    : false;\r\n\r\n  const cardType = targerCard.card?.name;\r\n  // The difference between weaponCard and other  card that weapon are usedin the battle.\r\n  //Obviously we need other stateWithoutSelectedCard for weapon\r\n  const stateWithSelectedCard: State = {\r\n    ...state,\r\n    playerList: newPlayerList,\r\n    gameState: {\r\n      type: \"gameStarted.applyCard\",\r\n    },\r\n  };\r\n\r\n  const stateWithoutSelectedCard: State = {\r\n    ...state,\r\n    playerList: newPlayerList,\r\n    gameState: {\r\n      type: /* cardType === \"weapon\"\r\n          ? \"gameStarted.interactWithEnemy\"\r\n          :  */ \"gameStarted.playerMove\",\r\n    },\r\n  };\r\n\r\n  switch (hasAnyCardSelected) {\r\n    case true:\r\n      return stateWithSelectedCard;\r\n    case false:\r\n      return stateWithoutSelectedCard;\r\n  }\r\n};\r\n\r\nconst changeSelectedCard = (\r\n  state: State,\r\n  currentCardIndex: number\r\n  /*   hasCurrentCardHighlightning: boolean */\r\n) => {\r\n  const { playerList, numberOfPlayer } = state;\r\n  const inventory = playerList[numberOfPlayer].inventory;\r\n  const targetCard = inventory[currentCardIndex];\r\n\r\n  const newInventory = inventory.map((card, index) => {\r\n    if (index === currentCardIndex) {\r\n      return { ...card, isSelected: !targetCard?.isSelected };\r\n    } else {\r\n      return { ...card, isSelected: false };\r\n    }\r\n  });\r\n\r\n  const newPlayerList: PlayerListType = {\r\n    ...playerList,\r\n    [numberOfPlayer]: {\r\n      ...playerList[numberOfPlayer],\r\n      inventory: newInventory,\r\n    },\r\n  };\r\n\r\n  return newPlayerList;\r\n};\r\n","import { State, MoveDirection, AvailableCellListType } from \"../../../types\";\r\n\r\nimport { ActionType } from \"../../../reducer\";\r\nimport { MOVE_DIRECTION_LIST } from \"../../../../shared/config\";\r\n\r\nimport { getNextPlayerCoord } from \"../../common/getNextPlayerCoord\";\r\nimport { getPlayerMoveResult } from \"./getPlayerMoveResult\";\r\nimport { checkCanTakeCell } from \"./checkCanTakeCell\";\r\nimport { changePlayerCoord } from \"./changePlayerCoord\";\r\nimport { getStateCardSelected } from \"../../common/getStateCardSelected\";\r\nimport { getNeighboringCellList } from \"../../common/getNeighboringCellList\";\r\n\r\nexport const playerMove = (state: State, action: ActionType): State => {\r\n  switch (action.type) {\r\n    case \"req-checkAvailableNeighboringCell\": {\r\n      return getAvailableCells(state);\r\n    }\r\n\r\n    case \"playerMoved\": {\r\n      const direction = action.payload;\r\n      return getStatePlayerMoved(state, direction);\r\n    }\r\n\r\n    case \"req-cleanAvailableCells\": {\r\n      return getStateClearedAvailableCells(state);\r\n    }\r\n\r\n    case \"req-getPlayerMoveResult\": {\r\n      return getPlayerMoveResult(state);\r\n    }\r\n\r\n    case \"cardChoosed\": {\r\n      const target = action.payload;\r\n      return getStateCardSelected(state, target);\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Changing coordinates of player if he can take the cell in certain direction.\r\n */\r\nconst getStatePlayerMoved = (state: State, direction: MoveDirection): State => {\r\n  const { playerList, numberOfPlayer, gameField } = state;\r\n\r\n  const prevPlayerCoord = playerList[numberOfPlayer].coord;\r\n  const nextPlayerCoord = getNextPlayerCoord(prevPlayerCoord, direction);\r\n\r\n  /*   const canTakeNextCell = gameField.values[nextPlayerCoord].availableForTake;\r\n   */\r\n\r\n  const canTakeNextCell = state.availableCellsCoords?.includes(nextPlayerCoord);\r\n\r\n  switch (canTakeNextCell) {\r\n    case true: {\r\n      const newPlayerList = changePlayerCoord(state, nextPlayerCoord);\r\n      const newState: State = {\r\n        ...state,\r\n        playerList: newPlayerList,\r\n        doEffect: { type: \"!cleanMarkedCell\" },\r\n      };\r\n      return newState;\r\n    }\r\n    case false: {\r\n      return state;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Current player get field \"availableForTake\" with coordinate of cells that can be taken\r\n */\r\n\r\nexport const getAvailableCells = (state: State): State => {\r\n  const { playerList, numberOfPlayer, gameField } = state;\r\n  const prevPlayerCoord = playerList[numberOfPlayer].coord;\r\n  const neighboringCellList = getNeighboringCellList(\r\n    prevPlayerCoord,\r\n    gameField\r\n  );\r\n\r\n  /**\r\n   * Returns the coordinates of Cell that can be taken by player.\r\n   */\r\n  const availableCellList: AvailableCellListType = neighboringCellList.filter(\r\n    (cellItem) => {\r\n      const { direction, coord } = cellItem;\r\n\r\n      return checkCanTakeCell(state, coord, direction);\r\n    }\r\n  );\r\n\r\n  const availableCellsCoords = availableCellList.map((cellItem) => {\r\n    const { direction, coord } = cellItem;\r\n    return coord;\r\n  });\r\n\r\n  return {\r\n    ...state,\r\n    availableCellsCoords,\r\n  };\r\n};\r\n\r\n/**\r\n *Remove from current player availableCellList\r\n */\r\nconst getStateClearedAvailableCells = (state: State): State => {\r\n  const { playerList, numberOfPlayer, gameField } = state;\r\n\r\n  return {\r\n    ...state,\r\n    doEffect: { type: \"!getPlayerMoveResult\" },\r\n    availableCellsCoords: null,\r\n  };\r\n};\r\n","import { State, PlayerListType, MoveDirection, CellType } from \"../../../types\";\r\n\r\nimport { switchToNextPlayer } from \"../../../../shared/State\";\r\n/**\r\n * @returns A new state depending on the result of the player's movement.\r\n */\r\n\r\nexport const getPlayerMoveResult = (state: State) => {\r\n  const { gameField, playerList, numberOfPlayer, dice } = state;\r\n\r\n  const newPlayerCoord = playerList[numberOfPlayer].coord;\r\n  const newCellWithPlayer = gameField.values[newPlayerCoord];\r\n  const isLastStepOfMove = dice === 1;\r\n\r\n  const takeFinish = newCellWithPlayer?.name === \"finish\";\r\n\r\n  const takeCard =\r\n    newCellWithPlayer?.name === \"commonCell\" &&\r\n    newCellWithPlayer.cardItem.length > 0;\r\n\r\n  const metEnemyCard =\r\n    newCellWithPlayer?.name === \"commonCell\" && state.enemyList[newPlayerCoord]\r\n      ? true\r\n      : false;\r\n\r\n  // TODO: Is flat switch okey? Or i need it nested?!\r\n  switch (true) {\r\n    // TODO: –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —á–∞—Å—Ç—å state\r\n    case takeFinish: {\r\n      const newState: State = {\r\n        ...state,\r\n        dice: state.dice - 1,\r\n        gameResult: \"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏\",\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    case takeCard: {\r\n      const newState: State = {\r\n        ...state,\r\n        dice: state.dice - 1,\r\n        gameState: {\r\n          type: \"gameStarted.takeCard\",\r\n        },\r\n        doEffect: { type: \"!openCard\" },\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    case metEnemyCard: {\r\n      const newState: State = {\r\n        ...state,\r\n        dice: state.dice - 1,\r\n        gameState: {\r\n          type: \"interactWithEnemy\",\r\n        },\r\n        doEffect: { type: \"!checkApperanceEnemyCard\" },\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    case isLastStepOfMove: {\r\n      /*  const changedPartState = switchToNextPlayer(); */\r\n      const newState: State = {\r\n        ...state,\r\n        dice: 0,\r\n        gameState: {\r\n          type: \"gameStarted.getPlayersOrder\",\r\n        },\r\n        doEffect: {\r\n          type: \"!getNextPlayer\",\r\n        },\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    default: {\r\n      const newState: State = {\r\n        ...state,\r\n        dice: state.dice - 1,\r\n        gameState: {\r\n          type: \"gameStarted.playerMove\",\r\n        },\r\n        doEffect: { type: \"!checkAvailableNeighboringCell\" },\r\n      };\r\n      return newState;\r\n    }\r\n  }\r\n};\r\n","import { State } from \"../../../types\";\r\n\r\nexport const changePlayerCoord = (state: State, newPlayerCoord: string) => {\r\n  const { playerList, numberOfPlayer } = state;\r\n\r\n  const newPlayerList = {\r\n    ...playerList,\r\n    [numberOfPlayer]: {\r\n      ...playerList[numberOfPlayer],\r\n      coord: newPlayerCoord,\r\n    },\r\n  };\r\n  return newPlayerList;\r\n};\r\n","import { State, GameField, PlayerListType, CommonCell } from \"../../../types\";\r\n\r\nimport { ActionType } from \"../../../reducer\";\r\nimport { openCard } from \"./openCard\";\r\nimport { deleteCard } from \"./deleteCard\";\r\n\r\nexport const takeCard = (state: State, action: ActionType): State => {\r\n  switch (action.type) {\r\n    case \"req-openCard\": {\r\n      return getStateOpenCard(state);\r\n    }\r\n\r\n    case \"req-takeCard\": {\r\n      return getStateCardTaken(state);\r\n    }\r\n\r\n    case \"req-deleteCard\": {\r\n      return getStateDeletedCard(state);\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst getStateOpenCard = (state: State): State => {\r\n  const { gameField, numberOfPlayer, playerList } = state;\r\n  const playerCoordIndex = playerList[numberOfPlayer].coord;\r\n  const currCell = gameField.values[playerCoordIndex];\r\n\r\n  const cellWithOpenCard = openCard(currCell);\r\n\r\n  const newGameField: GameField = {\r\n    ...gameField,\r\n    values: { ...gameField.values, [playerCoordIndex]: cellWithOpenCard },\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    gameField: newGameField,\r\n    doEffect: { type: \"!takeCard\" },\r\n  };\r\n};\r\n\r\nconst getStateCardTaken = (state: State): State => {\r\n  const { gameField, numberOfPlayer, playerList } = state;\r\n  const player = playerList[numberOfPlayer];\r\n\r\n  const cardItems = gameField.values[player.coord].cardItem;\r\n\r\n  const newPlayer = {\r\n    ...player,\r\n    inventory: [...player.inventory, ...cardItems],\r\n  };\r\n\r\n  const newPlayerList: PlayerListType = {\r\n    ...playerList,\r\n    [numberOfPlayer]: newPlayer,\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    doEffect: { type: \"!deleteCard\" },\r\n    playerList: newPlayerList,\r\n  };\r\n};\r\n\r\nconst getStateDeletedCard = (state: State): State => {\r\n  const { gameField, numberOfPlayer, playerList } = state;\r\n  const playerCoordIndex = playerList[numberOfPlayer].coord;\r\n  const currCell = gameField.values[playerCoordIndex];\r\n  const cellWithoutCard = deleteCard(currCell);\r\n\r\n  const newGameField: GameField = {\r\n    ...gameField,\r\n    values: {\r\n      ...gameField.values,\r\n      [playerCoordIndex]: cellWithoutCard,\r\n    },\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    gameField: newGameField,\r\n    gameState: {\r\n      type: \"gameStarted.getPlayersOrder\",\r\n    },\r\n    doEffect: {\r\n      type: \"!getNextPlayer\",\r\n    },\r\n    dice: 0,\r\n  };\r\n};\r\n","import { CellType, CardItem } from \"../../../types\";\r\n\r\nexport const openCard = (cell: CellType): CellType => {\r\n  if (cell.name === \"commonCell\") {\r\n    /**\r\n     * When we open card we now for sure that in cell lying only one card\r\n     */\r\n    const cardItemWithOpenCard = cell.cardItem.map((cardItem) => {\r\n      if (cardItem) {\r\n        const openedCard: CardItem = {\r\n          ...cardItem,\r\n          apperance: \"open\",\r\n        };\r\n        return openedCard;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    const openedItem: CellType = {\r\n      ...cell,\r\n      cardItem: cardItemWithOpenCard,\r\n    };\r\n\r\n    return openedItem;\r\n  } else {\r\n    return cell;\r\n  }\r\n};\r\n","import { CommonCell, CellType } from \"../../../types\";\r\n\r\nexport const deleteCard = (currCell: CellType): CellType => {\r\n  /**\r\n   * When we delete card we now for sure that in cell lying only one card\r\n   */\r\n  if (currCell.name === \"commonCell\") {\r\n    const cellWithoutHealth: CommonCell = {\r\n      ...currCell,\r\n      cardItem: [],\r\n    };\r\n    return cellWithoutHealth;\r\n  } else return currCell;\r\n};\r\n","import { State } from \"../../types\";\r\nimport { ActionType } from \"../../reducer\";\r\n\r\n\r\nexport const trownDice = ( state: State,action: ActionType): State => {\r\n  switch (action.type) {\r\n    case \"diceThrown\": {\r\n      return {\r\n        ...state,\r\n        dice: action.payload,\r\n        gameState: {\r\n          type: \"gameStarted.playerMove\",\r\n        },\r\n        doEffect: { type: \"!checkAvailableNeighboringCell\" },\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { State } from \"../../../types\";\r\n\r\nexport const getBattleResult = (state: State): State => {\r\n  const { dice } = state;\r\n\r\n  switch (dice) {\r\n    case 1:\r\n    case 2: {\r\n      return getStatePlayerCanFight(state);\r\n    }\r\n\r\n    case 3: {\r\n      return getStatePlayetLoseHealth(state);\r\n    }\r\n\r\n    case 4: {\r\n      return getStatePlayerRunsAway(state);\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst getStatePlayerCanFight = (state: State): State => {\r\n  //Player can use weapon or rethrow dice\r\n  return {\r\n    ...state,\r\n    dice: 0,\r\n    gameState: { type: \"interactWithEnemy.makeBattleAction\" },\r\n  };\r\n};\r\n\r\nconst getStatePlayerRunsAway = (state: State): State => {\r\n  // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ playerMove?!\r\n  // dice=1 - —É–±–µ–≥–∞–µ—Ç –Ω–∞ 1\r\n  return {\r\n    ...state,\r\n    dice: 0,\r\n    gameState: {\r\n      type: \"gameStarted.trownDice\",\r\n    },\r\n    /*     gameState: {\r\n      type: \"gameStarted.playerMove\",\r\n    },\r\n    doEffect: { type: \"!checkAvailableNeighboringCell\" }, */\r\n  };\r\n};\r\n\r\nconst getStatePlayetLoseHealth = (state: State): State => {\r\n  const { playerList, numberOfPlayer } = state;\r\n  const newPlayerHealth = playerList[numberOfPlayer].health - 1;\r\n  const isPlayerAlive = newPlayerHealth > 0 ? true : false;\r\n\r\n  const newPlayerList = {\r\n    ...playerList,\r\n    [numberOfPlayer]: {\r\n      ...playerList[numberOfPlayer],\r\n      health: playerList[numberOfPlayer].health - 1,\r\n    },\r\n  };\r\n\r\n  // TODO :  —Ä–µ–∂–∏–º –±–æ—è –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏—Å—å –¥–æ –ø–æ–±–µ–¥—ã\\–ø–æ–±–µ–≥–∞\\–ø—Ä–æ–∏–≥—Ä—ã—à–∞\r\n  if (isPlayerAlive) {\r\n    const newState: State = {\r\n      ...state,\r\n      dice: 0,\r\n      gameState: { type: \"interactWithEnemy.throwBattleDice\" },\r\n      /*    gameState: {\r\n        type: \"gameStarted.getPlayersOrder\",\r\n      },\r\n      doEffect: {\r\n        type: \"!getNextPlayer\",\r\n      }, */\r\n      playerList: newPlayerList,\r\n    };\r\n\r\n    return newState;\r\n  } else {\r\n    console.log(`–∏–≥—Ä–æ–∫ ‚Ññ${numberOfPlayer} –ø–æ–≥–∏–±`);\r\n\r\n    return {\r\n      ...state,\r\n      gameState: { type: \"endGame\" },\r\n      gameResult: \"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\",\r\n      doEffect: null,\r\n    };\r\n  }\r\n};\r\n","import { PlayerListType } from \"../../types\";\r\n\r\nexport const deleteSelectedCard = (\r\n  playerList: PlayerListType,\r\n  numberOfPlayer: number\r\n) => {\r\n  const indexCurrPlayer = numberOfPlayer;\r\n  const currInventory = playerList[indexCurrPlayer].inventory;\r\n\r\n  const removedCardIndex = playerList[indexCurrPlayer].inventory.findIndex(\r\n    (card) => {\r\n      return card?.isSelected === true;\r\n    }\r\n  );\r\n\r\n  const newInventory = currInventory.filter((card, indexOfCard) => {\r\n    return indexOfCard !== removedCardIndex;\r\n  });\r\n  return newInventory;\r\n};\r\n","import { State, PlayerListType, CardItem, EnemyCardType } from \"../../../types\";\r\n\r\nimport { ActionType } from \"../../../reducer\";\r\nimport { openEnemyCard } from \"./openEnemyCard\";\r\nimport { getBattleResult } from \"./getBattleResult\";\r\nimport { getStateCardSelected } from \"../../common/getStateCardSelected\";\r\nimport { deleteSelectedCard } from \"../../common/deleteSelectedCard\";\r\nexport const interactWithEnemy = (state: State, action: ActionType): State => {\r\n  const [, phaseInner] = state.gameState.type.split(\".\");\r\n\r\n  switch (phaseInner) {\r\n    case \"makeBattleAction\": {\r\n      switch (action.type) {\r\n        case \"diceThrown\": {\r\n          /*  const dice = action.payload; */\r\n          return trownBattleDice(state, action);\r\n        }\r\n\r\n        case \"cardChoosed\": {\r\n          return selectCard(state, action);\r\n        }\r\n\r\n        default: {\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n\r\n    case \"applyCard\": {\r\n      switch (action.type) {\r\n        case \"cardChoosed\": {\r\n          return selectCard(state, action);\r\n        }\r\n\r\n        case \"req-defeatEnemy\": {\r\n          return defeatEnemy(state);\r\n        }\r\n        case \"req-removeEnemyCard\": {\r\n          return removeEnemyCard(state);\r\n        }\r\n\r\n        default: {\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n    case \"throwBattleDice\": {\r\n      return trownBattleDice(state, action);\r\n    }\r\n\r\n    default: {\r\n      switch (action.type) {\r\n        case \"req-checkEnemyCard\": {\r\n          return checkCardApperance(state);\r\n        }\r\n\r\n        case \"req-openEnemyCard\": {\r\n          return openEnemyCard(state);\r\n        }\r\n\r\n        case \"req-getBattleResult\": {\r\n          return getBattleResult(state);\r\n        }\r\n\r\n        default: {\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst removeEnemyCard = (state: State): State => {\r\n  const { enemyList, numberOfPlayer, playerList } = state;\r\n  const currentCoord = playerList[numberOfPlayer].coord;\r\n  const newEnemyList = { ...enemyList };\r\n  delete newEnemyList[currentCoord];\r\n\r\n  return {\r\n    ...state,\r\n    enemyList: newEnemyList,\r\n    dice: 0,\r\n    gameState: {\r\n      type: \"gameStarted.getPlayersOrder\",\r\n    },\r\n    doEffect: {\r\n      type: \"!getNextPlayer\",\r\n    },\r\n  };\r\n};\r\n\r\nconst defeatEnemy = (state: State): State => {\r\n  const { numberOfPlayer, playerList, enemyList } = state;\r\n  const currEnemyCoord = playerList[numberOfPlayer].coord;\r\n  const currEnemy = enemyList[currEnemyCoord];\r\n  const defeatedEnemy: EnemyCardType = { ...currEnemy, apperance: \"defeated\" };\r\n  const newEnemyList = {\r\n    ...state.enemyList,\r\n    [currEnemyCoord]: defeatedEnemy,\r\n  };\r\n\r\n  const newInventory = deleteSelectedCard(playerList, numberOfPlayer);\r\n\r\n  const newPlayerList = {\r\n    ...playerList,\r\n    [numberOfPlayer]: {\r\n      ...playerList[numberOfPlayer],\r\n      inventory: newInventory,\r\n    },\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    enemyList: newEnemyList,\r\n    playerList: newPlayerList,\r\n    doEffect: { type: \"!removeEnemyCard\" },\r\n  };\r\n};\r\n\r\nconst checkCardApperance = (state: State): State => {\r\n  const { enemyList, playerList, numberOfPlayer } = state;\r\n  const currentCoord = playerList[numberOfPlayer].coord;\r\n\r\n  const isNeedOpenEnemyCard =\r\n    enemyList[currentCoord].apperance === \"open\" ? false : true;\r\n\r\n  switch (true) {\r\n    case isNeedOpenEnemyCard: {\r\n      return {\r\n        ...state,\r\n        doEffect: { type: \"!openEnemyCard\" },\r\n      };\r\n    }\r\n\r\n    case !isNeedOpenEnemyCard: {\r\n      return {\r\n        ...state,\r\n        gameState: { type: \"interactWithEnemy.throwBattleDice\" },\r\n\r\n        dice: 0,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nconst trownBattleDice = (state: State, action: ActionType): State => {\r\n  switch (action.type) {\r\n    case \"diceThrown\": {\r\n      return {\r\n        ...state,\r\n        dice: action.payload,\r\n        gameState: { type: \"interactWithEnemy\" },\r\n        doEffect: { type: \"!getBattleResult\" },\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype TargerCard = {\r\n  index: number;\r\n  card: CardItem;\r\n};\r\n\r\nconst selectCard = (state: State, action: ActionType) => {\r\n  const { numberOfPlayer } = state;\r\n  switch (action.type) {\r\n    case \"cardChoosed\": {\r\n      const newPlayerList = changeSelectedCard(state, action.payload.index);\r\n\r\n      const hasAnyCardSelected = newPlayerList[numberOfPlayer].inventory.find(\r\n        (card) => {\r\n          return card?.isSelected === true;\r\n        }\r\n      )\r\n        ? true\r\n        : false;\r\n\r\n      // The difference between weaponCard and other  card that weapon are usedin the battle.\r\n      //Obviously we need other stateWithoutSelectedCard for weapon\r\n      const stateWithSelectedCard: State = {\r\n        ...state,\r\n        playerList: newPlayerList,\r\n        gameState: { type: \"interactWithEnemy.applyCard\" },\r\n      };\r\n\r\n      const stateWithoutSelectedCard: State = {\r\n        ...state,\r\n        playerList: newPlayerList,\r\n        gameState: { type: \"interactWithEnemy.makeBattleAction\" },\r\n      };\r\n\r\n      switch (hasAnyCardSelected) {\r\n        case true:\r\n          return stateWithSelectedCard;\r\n        case false:\r\n          return stateWithoutSelectedCard;\r\n      }\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nconst changeSelectedCard = (\r\n  state: State,\r\n  currentCardIndex: number\r\n  /*   hasCurrentCardHighlightning: boolean */\r\n) => {\r\n  const { playerList, numberOfPlayer } = state;\r\n  const inventory = playerList[numberOfPlayer].inventory;\r\n  const targetCard = inventory[currentCardIndex];\r\n\r\n  const newInventory = inventory.map((card, index) => {\r\n    if (index === currentCardIndex) {\r\n      return { ...card, isSelected: !targetCard?.isSelected };\r\n    } else {\r\n      return { ...card, isSelected: false };\r\n    }\r\n  });\r\n\r\n  const newPlayerList: PlayerListType = {\r\n    ...playerList,\r\n    [numberOfPlayer]: {\r\n      ...playerList[numberOfPlayer],\r\n      inventory: newInventory,\r\n    },\r\n  };\r\n\r\n  return newPlayerList;\r\n};\r\n","import { EnemyCardType, EnemyListType, State } from \"../../../types\";\r\n\r\nexport const openEnemyCard = (state: State): State => {\r\n  const { enemyList, playerList, numberOfPlayer } = state;\r\n  const currentCoord = playerList[numberOfPlayer].coord;\r\n  /**\r\n   * Need separate method for open EnemyCard\r\n   * Because it dont lying structurally on cell\r\n   */\r\n\r\n  const currEnemyCard = enemyList[currentCoord];\r\n  const openedEnemyCard: EnemyCardType = {\r\n    ...currEnemyCard,\r\n    apperance: \"open\",\r\n  };\r\n\r\n  const newEnemyList = { ...enemyList, [currentCoord]: openedEnemyCard };\r\n  return {\r\n    ...state,\r\n    enemyList: newEnemyList,\r\n    gameState: { type: \"interactWithEnemy.throwBattleDice\" },\r\n    dice: 0,\r\n  };\r\n};\r\n","import { PlayerListType } from \"../../../types\";\r\n\r\nexport const changeHealth = (\r\n  playerList: PlayerListType,\r\n  indexTarget: number\r\n) => {\r\n  return playerList[indexTarget].health + 1;\r\n};\r\n","import { State } from \"../../../types\";\r\nimport { ActionType } from \"../../../reducer\";\r\n\r\nimport { getStateCardSelected } from \"../../common/getStateCardSelected\";\r\nimport { getStateGiveCard } from \"./getStateGiveCard\";\r\nimport { getStateHealCurrPlayer } from \"./getStateHealCurrPlayer\";\r\nimport { getStateHealAnotherPlayer } from \"./getStateHealAnotherPlayer\";\r\nimport { getStateHoleFilled } from \"./getStateHoleFilled\";\r\n/**\r\n *  In payload get order number of chosen for interact player.\r\n * If this number = indexCurrPlayer we heal player.\r\n * If not - we give context menu: need heal or apply.\r\n */\r\nexport const applyCard = (state: State, action: ActionType): State => {\r\n  const { numberOfPlayer, playerList } = state;\r\n\r\n  const chosenCardType = playerList[numberOfPlayer].inventory.find((card) => {\r\n    return card?.isSelected === true;\r\n  })?.name;\r\n\r\n  switch (action.type) {\r\n    case \"req-shareCard\": {\r\n      const recipientPlayerNumber = action.payload;\r\n      return getStateGiveCard(state, recipientPlayerNumber);\r\n    }\r\n\r\n    case \"cardChoosed\": {\r\n      const target = action.payload;\r\n      return getStateCardSelected(state, target);\r\n    }\r\n\r\n    default: {\r\n      switch (chosenCardType) {\r\n        case \"health\": {\r\n          switch (action.type) {\r\n            case \"req-healPlayer\": {\r\n              /**\r\n               * Need to increase playerHealth\r\n               * Then remove card from inventory\r\n               * Can we do this simultaneously?\r\n               */\r\n\r\n              const indexChosenPlayer = action.payload;\r\n              const isCurrPlayer = indexChosenPlayer === numberOfPlayer;\r\n\r\n              switch (isCurrPlayer) {\r\n                case true:\r\n                  return getStateHealCurrPlayer(state);\r\n\r\n                case false: {\r\n                  return getStateHealAnotherPlayer(state, indexChosenPlayer);\r\n                }\r\n                default:\r\n                  return state;\r\n              }\r\n            }\r\n\r\n            default:\r\n              return state;\r\n          }\r\n        }\r\n\r\n        case \"boards\": {\r\n          switch (action.type) {\r\n            case \"req-fillHole\": {\r\n              const { coord, direction } = action.payload;\r\n              console.log(\"–∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–µ–º\", coord, direction);\r\n              return getStateHoleFilled(state, coord, direction);\r\n            }\r\n\r\n            default:\r\n              return state;\r\n          }\r\n        }\r\n\r\n        default:\r\n          return state;\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { State } from \"../../../types\";\r\n\r\nexport const getStateGiveCard = (\r\n  state: State,\r\n  recipientPlayerNumber: number\r\n): State => {\r\n  const { playerList, numberOfPlayer } = state;\r\n  const indexCurrPlayer = numberOfPlayer;\r\n\r\n  const currentPlayerInventory = playerList[indexCurrPlayer].inventory;\r\n  const recepientPlayerInventory = playerList[recipientPlayerNumber].inventory;\r\n\r\n  const sharedCardIndex = playerList[indexCurrPlayer].inventory.findIndex(\r\n    (card) => {\r\n      return card?.isSelected;\r\n    }\r\n  );\r\n\r\n  const sharedCard = [...currentPlayerInventory][sharedCardIndex];\r\n  const sharedCardWithoutHighlightning = { ...sharedCard, isSelected: false };\r\n\r\n  const newCurrentPlayerInventory = currentPlayerInventory.filter(\r\n    (card, indexOfCard) => {\r\n      return indexOfCard !== sharedCardIndex;\r\n    }\r\n  );\r\n\r\n  const newRecepientPlayerInventory = [\r\n    ...recepientPlayerInventory,\r\n    sharedCardWithoutHighlightning,\r\n  ];\r\n\r\n  const newPlayerList = {\r\n    ...playerList,\r\n    [indexCurrPlayer]: {\r\n      ...playerList[indexCurrPlayer],\r\n      inventory: newCurrentPlayerInventory,\r\n    },\r\n    [recipientPlayerNumber]: {\r\n      ...playerList[recipientPlayerNumber],\r\n      inventory: newRecepientPlayerInventory,\r\n    },\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    playerList: newPlayerList,\r\n    gameState: { type: \"gameStarted.playerMove\" },\r\n  };\r\n};\r\n","import { State, PlayerListType } from \"../../../types\";\r\n\r\nimport { deleteSelectedCard } from \"../../common/deleteSelectedCard\";\r\nimport { changeHealth } from \"./changeHealth\";\r\n\r\nexport const getStateHealCurrPlayer = (state: State): State => {\r\n  const { playerList, numberOfPlayer } = state;\r\n  const indexCurrPlayer = numberOfPlayer;\r\n  const newHealth = changeHealth(playerList, indexCurrPlayer);\r\n  const newInventory = deleteSelectedCard(playerList, numberOfPlayer);\r\n  const newPlayerList: PlayerListType = {\r\n    ...playerList,\r\n    [indexCurrPlayer]: {\r\n      ...playerList[indexCurrPlayer],\r\n      inventory: newInventory,\r\n      health: newHealth,\r\n    },\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    playerList: newPlayerList,\r\n    gameState: { type: \"gameStarted.playerMove\" },\r\n  };\r\n};\r\n","import { State, PlayerListType } from \"../../../types\";\r\n\r\nimport { deleteSelectedCard } from \"../../common/deleteSelectedCard\";\r\nimport { changeHealth } from \"./changeHealth\";\r\nexport const getStateHealAnotherPlayer = (\r\n  state: State,\r\n  indexChosenPlayer: number\r\n): State => {\r\n  const { playerList, numberOfPlayer } = state;\r\n  const indexCurrPlayer = numberOfPlayer;\r\n  const newInventory = deleteSelectedCard(playerList, numberOfPlayer);\r\n  const newHealth = changeHealth(playerList, indexChosenPlayer);\r\n\r\n  const newPlayerList: PlayerListType = {\r\n    ...playerList,\r\n    [indexChosenPlayer]: {\r\n      ...playerList[indexChosenPlayer],\r\n      health: newHealth,\r\n    },\r\n    [indexCurrPlayer]: {\r\n      ...playerList[indexCurrPlayer],\r\n      inventory: newInventory,\r\n    },\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    playerList: newPlayerList,\r\n    gameState: { type: \"gameStarted.playerMove\" },\r\n  };\r\n};\r\n","import { State, PlayerListType, MoveDirection } from \"../../../types\";\r\n\r\nimport { deleteSelectedCard } from \"../../common/deleteSelectedCard\";\r\n\r\nexport const getStateHoleFilled = (\r\n  state: State,\r\n  coord: number,\r\n  direction: MoveDirection\r\n) => {\r\n  const { gameField, playerList, numberOfPlayer } = state;\r\n  const indexCurrPlayer = numberOfPlayer;\r\n  const newInventory = deleteSelectedCard(playerList, numberOfPlayer);\r\n  const cellWithChosedHole = gameField.values[coord];\r\n\r\n  if (cellWithChosedHole.name === \"commonCell\") {\r\n    const barriersWithClosedHole = cellWithChosedHole.barrierList?.map(\r\n      (barrier) => {\r\n        if (barrier.direction === direction) {\r\n          return { ...barrier, isOpen: false };\r\n        } else return barrier;\r\n      }\r\n    );\r\n\r\n    const newGameField = {\r\n      ...gameField,\r\n      values: {\r\n        ...gameField.values,\r\n        [coord]: {\r\n          ...gameField.values[coord],\r\n          barrierList: barriersWithClosedHole,\r\n        },\r\n      },\r\n    };\r\n\r\n    const newPlayerList: PlayerListType = {\r\n      ...playerList,\r\n      [indexCurrPlayer]: {\r\n        ...playerList[indexCurrPlayer],\r\n        inventory: newInventory,\r\n      },\r\n    };\r\n    const newState: State = {\r\n      ...state,\r\n      gameField: newGameField,\r\n      playerList: newPlayerList,\r\n      gameState: { type: \"gameStarted.playerMove\" },\r\n      doEffect: { type: \"!checkAvailableNeighboringCell\" },\r\n    };\r\n    return newState;\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n","import { AMOUNT_PLAYERS } from \"../../../shared/config\";\r\nimport { State } from \"../../types\";\r\nimport { ActionType } from \"../../reducer\";\r\n\r\nexport const getPlayersOrder = (state: State, action: ActionType): State => {\r\n  const numberCurrPlayer = state.numberOfPlayer;\r\n  const playerList = Object.entries(state.playerList);\r\n  const maxPlayersNumber = playerList.length - 1;\r\n  const minPlayersNumber = 0;\r\n  const nextPlayersNumber =\r\n    numberCurrPlayer + 1 > maxPlayersNumber\r\n      ? minPlayersNumber\r\n      : numberCurrPlayer + 1;\r\n\r\n  switch (action.type) {\r\n    case \"req-getNextPlayer\": {\r\n      return {\r\n        ...state,\r\n        numberOfPlayer: nextPlayersNumber,\r\n        gameState: {\r\n          type: \"gameStarted.trownDice\",\r\n        },\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { State } from \"../../types\";\r\nimport { ActionType } from \"../../reducer\";\r\n\r\nexport const endGame = ( state: State,action: ActionType): State => {\r\n  switch (action.type) {\r\n    case \"req-getEndScreen\": {\r\n      return {\r\n        ...state,\r\n        gameState: { type: \"getEndScreen\" },\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { reducer } from \"./reducer\";\r\nimport { createStore} from \"redux\";\r\n\r\nexport const store = createStore(\r\n  reducer,\r\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n);","import { initialState } from \"./initialState\";\r\nimport { waitingStart } from \"./phases/waitingStart\";\r\nimport {\r\n  trownDice,\r\n  playerMove,\r\n  takeCard,\r\n  interactWithEnemy,\r\n  applyCard,\r\n} from \"./phases/gameStarted\";\r\nimport { getPlayersOrder } from \"./phases/gameStarted\";\r\nimport { endGame } from \"./phases/endGame\";\r\nimport { MoveDirection, State, CardItem } from \"./types\";\r\n\r\n\r\nexport type ActionType =\r\n  | { type: \"clickedStartButton\" }\r\n  | { type: \"diceThrown\"; payload: number }\r\n  | { type: \"playerMoved\"; payload: MoveDirection }\r\n  | { type: \"req-openCard\" }\r\n  | { type: \"req-changePlayerHealth\" }\r\n  | { type: \"req-deleteCard\" }\r\n  | { type: \"req-getNextPlayer\" }\r\n  | { type: \"req-checkEnemyCard\" }\r\n  | { type: \"req-openEnemyCard\" }\r\n  | { type: \"req-getBattleResult\" }\r\n  | { type: \"req-getEndScreen\" }\r\n  | { type: \"req-checkAvailableNeighboringCell\" }\r\n  | { type: \"req-cleanAvailableCells\" }\r\n  | { type: \"req-getPlayerMoveResult\" }\r\n  | { type: \"req-takeCard\" }\r\n  | {\r\n      type: \"cardChoosed\";\r\n      payload: {\r\n        index: number;\r\n        card: CardItem;\r\n      };\r\n    }\r\n  | { type: \"req-choosePlayer\" }\r\n  | { type: \"req-healPlayer\"; payload: number }\r\n  | {\r\n      type: \"req-fillHole\";\r\n      payload: { coord: number; direction: MoveDirection };\r\n    }\r\n  | { type: \"req-shareCard\"; payload: number }\r\n  | { type: \"req-defeatEnemy\" }\r\n  | { type: \"req-removeEnemyCard\" };\r\n\r\nexport const reducer = (\r\n  state: State = initialState,\r\n  action: ActionType\r\n): State => {\r\n  const [phaseOuter, phaseInner] = state.gameState.type.split(\".\");\r\n\r\n  switch (phaseOuter) {\r\n    case \"waitingStart\": {\r\n      return waitingStart(state, action);\r\n    }\r\n\r\n    case \"gameStarted\": {\r\n      switch (phaseInner) {\r\n        case \"trownDice\": {\r\n          return trownDice(state, action);\r\n        }\r\n\r\n        case \"playerMove\": {\r\n          return playerMove(state, action);\r\n        }\r\n\r\n        case \"takeCard\": {\r\n          return takeCard(state, action);\r\n        }\r\n        case \"applyCard\": {\r\n          return applyCard(state, action);\r\n        }\r\n\r\n        case \"getPlayersOrder\": {\r\n          return getPlayersOrder(state, action);\r\n        }\r\n\r\n        default:\r\n          return state;\r\n      }\r\n    }\r\n    case \"interactWithEnemy\": {\r\n      return interactWithEnemy(state, action);\r\n    }\r\n\r\n    case \"endGame\": {\r\n      return endGame(state, action);\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { Provider, useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  PlayGrid,\r\n  MoveControls,\r\n  Dice,\r\n  StatusList,\r\n  PlayersStatusList,\r\n} from \"./features\";\r\nimport { StartScreen, EndScreen } from \"./pages\";\r\nimport { State } from \"./business/types\";\r\nimport { store } from \"./business/store\";\r\nimport {\r\n  useOpenCard,\r\n  useEndScreen,\r\n  usePlayerMove,\r\n  useInteractWithEnemy,\r\n} from \"./business/effects\";\r\nimport { PlayerStatus } from \"./features/PlayerStatus\";\r\n\r\nconst Field = styled.div`\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Game = styled.div`\r\n  width: 900px;\r\n  margin: 40px auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  height: 100vh;\r\n  cursor: default;\r\n`;\r\n\r\nconst LeftPanel = styled.div`\r\n  width: 300px;\r\n  height: 600px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-grow: 0;\r\n  align-items: start;\r\n  margin: 0 30px;\r\n  padding: 50px 0;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst RightPanel = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst GameControls = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n  padding: 0 15px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nexport function GetApp() {\r\n  const { gameState } = useSelector((state: State) => ({ ...state }));\r\n\r\n  useOpenCard();\r\n  usePlayerMove();\r\n  useEndScreen();\r\n  useInteractWithEnemy();\r\n\r\n  const getGameScreen = () => {\r\n    switch (gameState.type) {\r\n      case \"waitingStart\":\r\n        return <StartScreen />;\r\n\r\n      case \"getEndScreen\":\r\n        return <EndScreen />;\r\n\r\n      default:\r\n        return (\r\n          <>\r\n            <RightPanel>\r\n              <PlayersStatusList />\r\n            </RightPanel>\r\n            <Field>\r\n              <PlayGrid />\r\n            </Field>\r\n            <LeftPanel>\r\n              <StatusList />\r\n              <GameControls>\r\n                <Dice />\r\n                <MoveControls />\r\n              </GameControls>\r\n              {/*   <PlayerStatus /> */}\r\n            </LeftPanel>\r\n          </>\r\n        );\r\n    }\r\n  };\r\n\r\n  return <Game>{getGameScreen()}</Game>;\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <GetApp />\r\n    </Provider>\r\n  );\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { State } from \"../types\";\r\n\r\nexport function useOpenCard() {\r\n\r\n  const [doEffect] = useSelector((state: State) => [state.doEffect]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(\r\n    function openCard() {\r\n      switch (doEffect?.type) {\r\n        case \"!openCard\": {\r\n          const timerOpen = setTimeout(\r\n            () =>\r\n              dispatch({\r\n                type: \"req-openCard\",\r\n              }),\r\n            1000\r\n          );\r\n          return () => {\r\n            clearTimeout(timerOpen);\r\n          };\r\n        }\r\n\r\n        case \"!takeCard\": {\r\n          const timerTakeCard = setTimeout(\r\n            () =>\r\n              dispatch({\r\n                type: \"req-takeCard\",\r\n              }),\r\n            500\r\n          );\r\n          return () => {\r\n            clearTimeout(timerTakeCard);\r\n          };\r\n        }\r\n        case \"!changePlayerHealth\": {\r\n          const timerChangePlayerHealth = setTimeout(\r\n            () =>\r\n              dispatch({\r\n                type: \"req-changePlayerHealth\",\r\n              }),\r\n            500\r\n          );\r\n          return () => {\r\n            clearTimeout(timerChangePlayerHealth);\r\n          };\r\n        }\r\n\r\n        case \"!deleteCard\": {\r\n          const timerDeleteCard = setTimeout(\r\n            () =>\r\n              dispatch({\r\n                type: \"req-deleteCard\",\r\n              }),\r\n            500\r\n          );\r\n          return () => {\r\n            clearTimeout(timerDeleteCard);\r\n          };\r\n        }\r\n\r\n        case \"!getNextPlayer\": {\r\n          dispatch({ type: \"req-getNextPlayer\" });\r\n          break;\r\n        }\r\n\r\n        default: {\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    [doEffect]\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { State } from \"../types\";\r\n\r\nexport function usePlayerMove() {\r\n  const [doEffect] = useSelector((state: State) => [state.doEffect]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(\r\n    function playerMove() {\r\n      switch (doEffect?.type) {\r\n        case \"!checkAvailableNeighboringCell\": {\r\n          dispatch({\r\n            type: \"req-checkAvailableNeighboringCell\",\r\n          });\r\n          break;\r\n        }\r\n\r\n        case \"!cleanMarkedCell\": {\r\n          const timerMarkCell = setTimeout(\r\n            () =>\r\n              dispatch({\r\n                type: \"req-cleanAvailableCells\",\r\n              }),\r\n            0\r\n          );\r\n          return () => {\r\n            clearTimeout(timerMarkCell);\r\n          };\r\n        }\r\n        case \"!getPlayerMoveResult\": {\r\n          dispatch({\r\n            type: \"req-getPlayerMoveResult\",\r\n          });\r\n          break;\r\n        }\r\n\r\n        default:\r\n          break;\r\n      }\r\n    },\r\n    [doEffect]\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { State } from \"../types\";\r\n\r\nexport function useEndScreen() {\r\n  const dispatch = useDispatch();\r\n  const gameState = useSelector((state: State) => state.gameState);\r\n\r\n  useEffect(\r\n    function getEndScreen() {\r\n      switch (gameState.type) {\r\n        case \"endGame\":\r\n          const timer = setTimeout(\r\n            () => dispatch({ type: \"req-getEndScreen\" }),\r\n            1000\r\n          );\r\n\r\n          return () => clearTimeout(timer);\r\n\r\n        default:\r\n          break;\r\n      }\r\n    },\r\n    [gameState.type, dispatch]\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { State } from \"../types\";\r\n\r\nexport function useInteractWithEnemy() {\r\n  const [doEffect] = useSelector((state: State) => [state.doEffect]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    switch (doEffect?.type) {\r\n      case \"!checkApperanceEnemyCard\": {\r\n        dispatch({\r\n          type: \"req-checkEnemyCard\",\r\n        });\r\n        break;\r\n      }\r\n\r\n      case \"!openEnemyCard\": {\r\n        const timerOpen = setTimeout(\r\n          () =>\r\n            dispatch({\r\n              type: \"req-openEnemyCard\",\r\n            }),\r\n          1000\r\n        );\r\n        return () => {\r\n          clearTimeout(timerOpen);\r\n        };\r\n      }\r\n\r\n      case \"!getBattleResult\": {\r\n        const timerGetResult = setTimeout(\r\n          () => dispatch({ type: \"req-getBattleResult\" }),\r\n          2000\r\n        );\r\n\r\n        return () => {\r\n          clearTimeout(timerGetResult);\r\n        };\r\n      }\r\n\r\n      case \"!removeEnemyCard\": {\r\n        const timerRemoveEnemy = setTimeout(\r\n          () => dispatch({ type: \"req-removeEnemyCard\" }),\r\n          1000\r\n        );\r\n        return () => {\r\n          clearTimeout(timerRemoveEnemy);\r\n        };\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  }, [doEffect]);\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}