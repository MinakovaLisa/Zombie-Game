{"version":3,"sources":["features/MoveControls.tsx","features/Dice.tsx","shared/config/walls.ts","shared/config/index.ts","components/CommonCard/brain.png","components/CommonCard/CommonCard.tsx","components/Health/health.png","components/Health/Health.tsx","business/phases/common/getNextPlayerCoord.ts","business/phases/common/getNeighboringCellList.ts","business/phases/common/checkCellHasWall.ts","components/Player/player.png","components/Player/index.tsx","components/Player/canInteractWithCell.ts","components/Enemy/zombie.png","components/Enemy/Enemy.tsx","components/Boards/boards.png","components/Boards/BoardsCard.tsx","components/Weapon/weapon.png","components/Weapon/WeaponCard.tsx","features/PlayGrid/getCards.tsx","features/PlayGrid/getPlayersList.tsx","features/PlayGrid/getEnemyList.tsx","features/PlayGrid/Barrier.tsx","features/PlayGrid/getFilledPlayGrid.tsx","features/PlayGrid/house.png","features/PlayGrid/index.tsx","components/HealthSlots.tsx","components/Inventory.tsx","features/PlayerStatus.tsx","features/StatusList.tsx","features/PlayersStatusList.tsx","pages/EndScreen.tsx","pages/StartScreen.tsx","business/initialState/getGameField/getFieldCells.ts","business/initialState/getGameField/spreadCards.ts","business/initialState/getGameField/index.ts","business/initialState/getPlayers.ts","business/initialState/getEnemies.ts","business/initialState/index.ts","business/phases/waitingStart/index.ts","business/phases/gameStarted/playerMove/checkCanTakeCell.ts","business/phases/common/getStateCardSelected.ts","business/phases/gameStarted/playerMove/index.ts","business/phases/gameStarted/playerMove/getPlayerMoveResult.ts","business/phases/gameStarted/playerMove/changePlayerCoord.ts","business/phases/gameStarted/takeCard/index.ts","business/phases/gameStarted/takeCard/openCard.ts","business/phases/gameStarted/takeCard/deleteCard.ts","business/phases/gameStarted/trownDice.ts","business/phases/interactWithEnemy/getBattleResult.ts","business/phases/common/deleteSelectedCard.ts","business/phases/interactWithEnemy/trownBattleDice.ts","business/phases/interactWithEnemy/selectCard.ts","business/phases/interactWithEnemy/changeSelectedCard.ts","business/phases/interactWithEnemy/index.ts","business/phases/interactWithEnemy/defeatEnemy.ts","business/phases/interactWithEnemy/removeEnemyCard.ts","business/phases/interactWithEnemy/checkCardApperance.ts","business/phases/interactWithEnemy/openEnemyCard.ts","business/phases/gameStarted/applyCard/changeHealth.ts","business/phases/gameStarted/applyCard/index.ts","business/phases/gameStarted/applyCard/getStateGiveCard.ts","business/phases/gameStarted/applyCard/getStateHealCurrPlayer.ts","business/phases/gameStarted/applyCard/getStateHealAnotherPlayer.ts","business/phases/gameStarted/applyCard/getStateHoleFilled.ts","business/phases/gameStarted/getPlayersOrder.ts","business/phases/endGame/index.ts","business/store.ts","business/reducer.ts","App.tsx","business/effects/useOpenCard.ts","business/effects/usePlayerMove.ts","business/effects/useEndScreen.ts","business/effects/useInteractWithEnemy.ts","reportWebVitals.ts","index.tsx"],"names":["Arrow","styled","div","props","direction","ArrowContainer","MoveControls","dispatch","useDispatch","renderArrow","onClick","type","payload","DiceWrap","DiceButton","button","DiceNumber","Dice","useSelector","state","dice","diceNumber","Math","floor","random","CELLS_BARRIERS_LIST","coord","hor","vert","barrierList","name","isOpen","START_COORD","FINISH_COORD","CARD_APPERANCE","PLAY_GRID_MODE","MOVE_DIRECTION_LIST","StyledCommonCard","css","img","StyledHealthCard","apperance","Health","getNextPlayerCoord","currentCoord","split","currPlayerHor","currPlayerVert","nextPlayerVert","parseInt","nextPlayerHor","prevPlayerVert","prevPlayerHor","getNeighboringCellList","prevPlayerCoord","gameField","map","directionItem","filter","cellItem","values","checkCellHasWall","newPlayerCoord","playerList","numberOfPlayer","currCellCoord","currCell","nextCell","oppositeDirection","getOppositeDirection","currCellHasBarrier","checkCellOnBarrier","nextCellHasBarrier","cell","cellHasWall","find","barrier","cellHasClosedHole","PlayerCard","needHighlightning","PlayerCardList","PlayerList","playerListOnCell","getContextMenu","listForInteract","getAvailableCellList","currPlayerCoord","listForHealing","concat","chosedCard","inventory","card","isSelected","typeOfChosedCard","playerCardItem","index","canInteractWithPlayer","includes","canHealPlayer","id","orderNumber","isCurrent","calculateHighlightning","playerClickedHandler","gameState","availableCellsCoords","nextPlayerCoord","canInteractWithCell","isCurrentPlayer","console","log","EnemyCard","EnemiesCardList","EnemyList","enemyArray","list","enemyCard","StyledBoardsCard","BoardsCard","StyledWeaponCard","WeaponCard","getCards","healthCardItem","cardItem","boardsCardItem","weaponCardItem","className","getPlayersList","playersList","playersArr","playerKey","push","length","getEnemyList","enemiesList","enemiesArr","enemiesKey","Wall","barrierItem","mode","highlightningList","item","Barrier","orderIndex","cellValues","neighboringCellList","needCheckHighlightning","getHighlightningList","getHigtlightningDirection","cellType","currCoord","availableCellList","currCellHasHole","checkCellOnHole","nextCellHasHole","availableCell","selectedCard","cellHasWindow","cellHasDoor","Wrap","CellItem","hasMarker","UnderlayerItem","Number","coordX","coordY","Test","getFilledPlayGrid","enemyList","orderGameCells","order","availableCells","playerX","playerY","isNeedSepareteCards","cardList","fieildElem","document","getElementById","Fragment","ReactDOM","createPortal","GridItem","ContextMenu","x","y","Button","PlayGrid","useState","contextMenuState","updatecontextMenuState","height","playerEl","playerCoord","getBoundingClientRect","useEffect","bodyElement","querySelector","callback","e","target","stopPropagation","prevState","removeEventListener","capture","addEventListener","playerNumber","HealthSlotList","HealthSlot","isFilled","HealthSlots","getHealthSlot","healthSlotFilled","playerHealth","getPlayerHealth","Array","fill","reduce","prev","currSlot","health","InventoryWrap","Slot","highlighting","Inventory","inventoryCard","inventoryCardindex","getChildrenComponent","PlayerStatusCard","CharacterAvatar","Status","HealthStatus","InventoryStatus","Column","PlayerStatus","StatusList","status","updateStatus","doEffect","gameResult","newStatus","getTextStatus","PlayersListWrap","amount","HealthSlotsWrap","InventorysWrap","PlayersStatusList","player","GameScore","EndScreen","StartButton","StartScreen","createEmptyFieldCells","cellList","emptyFieldItem","newEmptyGameField","forEach","getOrganizedFieldCells","emptyField","startIndex","finishIndex","getCellsWalls","cellsWithBarrierList","cellBarrier","cellIndex","cellWithoutBarrier","cellsWithBarriers","Object","fromEntries","cardsList","setCards","currCardSet","cellListWithCards","cellWithCards","getListForCards","emptyCellsList","entries","AMOUNT_EMPTY_CELLS","amoutCurrentCards","prevkeyList","randomNumber","getRandomNumber","keyItem","arrNumber","maxNumber","number","getGameField","getCellOrder","gameFieldCells","cellsWithAllCards","filled–°ells","gameFieldCellsWithPrevios","cellsForCards","filledWithCardsFieldCells","spreadCards","emptyFieldCells","fieldCellsWithWalls","getFieldCells","width","orderList","getPlayers","startCoord","getEnemies","getEmptyList","enemiesCoords","getListOfIndexes","getListOfEnemy","power","initialState","gameFieldWithoutEnemy","getInitialState","waitingStart","action","checkNextCellOccupied","newCoord","some","getStateCardSelected","targerCard","newPlayerList","changeSelectedCard","hasAnyCardSelected","stateWithSelectedCard","stateWithoutSelectedCard","currentCardIndex","targetCard","newInventory","playerMove","getAvailableCells","getStatePlayerMoved","getStateClearedAvailableCells","newCellWithPlayer","isLastStepOfMove","takeFinish","takeCard","metEnemyCard","getPlayerMoveResult","changePlayerCoord","metBarrier","isNextCellOcupied","checkCanTakeCell","getStateOpenCard","getStateCardTaken","getStateDeletedCard","playerCoordIndex","cellWithOpenCard","cardItemWithOpenCard","openCard","newGameField","cardItems","newPlayer","cellWithoutCard","deleteCard","trownDice","getStatePlayerCanFight","getStatePlayerRunsAway","getStatePlayetLoseHealth","isPlayerAlive","deleteSelectedCard","indexCurrPlayer","currInventory","removedCardIndex","findIndex","indexOfCard","trownBattleDice","selectCard","interactWithEnemy","currEnemyCoord","currEnemy","defeatedEnemy","newEnemyList","defeatEnemy","removeEnemyCard","isNeedOpenEnemyCard","checkCardApperance","currEnemyCard","openedEnemyCard","openEnemyCard","getBattleResult","changeHealth","indexTarget","applyCard","chosenCardType","recipientPlayerNumber","currentPlayerInventory","recepientPlayerInventory","sharedCardIndex","sharedCard","sharedCardWithoutHighlightning","newCurrentPlayerInventory","newRecepientPlayerInventory","getStateGiveCard","indexChosenPlayer","newHealth","getStateHealCurrPlayer","getStateHealAnotherPlayer","cellWithChosedHole","barriersWithClosedHole","getStateHoleFilled","getPlayersOrder","numberCurrPlayer","nextPlayersNumber","endGame","store","createStore","phaseOuter","phaseInner","window","__REDUX_DEVTOOLS_EXTENSION__","Field","Game","RightPanel","LeftPanel","GameControls","GetApp","timerOpen","setTimeout","clearTimeout","timerTakeCard","timerChangePlayerHealth","timerDeleteCard","useOpenCard","timerMarkCell","usePlayerMove","timer","useEndScreen","timerGetResult","timerRemoveEnemy","useInteractWithEnemy","getGameScreen","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.01dee25d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { MoveDirection } from \"../business/types\";\r\n\r\ntype ArrowProps = {\r\n  direction: MoveDirection;\r\n};\r\n\r\nconst Arrow = styled.div<ArrowProps>`\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  border: 1px solid lightgrey;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: pink;\r\n  }\r\n\r\n  &:active {\r\n    color: red;\r\n  }\r\n\r\n  transform: ${(props) => {\r\n    switch (props.direction) {\r\n      case \"top\":\r\n        return \"rotate(-90deg)\";\r\n      case \"bottom\":\r\n        return \"rotate(90deg)\";\r\n      case \"left\":\r\n        return \"rotate(-180deg)\";\r\n    }\r\n  }};\r\n\r\n  grid-area: ${(props) => {\r\n    switch (props.direction) {\r\n      case \"top\":\r\n        return \"arrow_top;\";\r\n      case \"bottom\":\r\n        return \"arrow_bottom\";\r\n      case \"left\":\r\n        return \"arrow_left\";\r\n      case \"right\":\r\n        return \"arrow_right\";\r\n    }\r\n  }};\r\n`;\r\n\r\nconst ArrowContainer = styled.div`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \". arrow_top .\"\r\n    \"arrow_left . arrow_right \"\r\n    \". arrow_bottom . \";\r\n  width: 100px;\r\n  height: 100px;\r\n  & > * {\r\n    padding: 6px;\r\n    box-sizing: border-box;\r\n    background-color: white;\r\n  }\r\n`;\r\n\r\nexport const MoveControls = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const renderArrow = (direction: MoveDirection) => {\r\n    return (\r\n      <Arrow\r\n        direction={direction}\r\n        onClick={() => {\r\n          dispatch({ type: \"playerMoved\", payload: direction });\r\n        }}\r\n      >\r\n        &gt;\r\n      </Arrow>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ArrowContainer>\r\n      {renderArrow(\"top\")}\r\n      {renderArrow(\"right\")}\r\n      {renderArrow(\"left\")}\r\n      {renderArrow(\"bottom\")}\r\n    </ArrowContainer>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { State } from \"../business/types\";\r\n\r\nconst DiceWrap = styled.div`\r\n  border: 1px solid lightgray;\r\n  width: 100px;\r\n  height: 100px;\r\n  display: grid;\r\n  background-color: white;\r\n`;\r\n\r\nconst DiceButton = styled.button`\r\n  margin: 0 auto;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst DiceNumber = styled.div`\r\n  height: 30px;\r\n  margin-top: 20px;\r\n  text-align: center;\r\n`;\r\n\r\nconst maxNumber = 4;\r\n\r\nexport const Dice = () => {\r\n  const dispatch = useDispatch();\r\n  const [diceNumber] = useSelector((state: State) => [state.dice]);\r\n  const getNumber = () => {\r\n    return Math.floor(Math.random() * maxNumber + 1);\r\n  };\r\n\r\n  return (\r\n    <DiceWrap>\r\n      <DiceNumber>{diceNumber}</DiceNumber>\r\n      <DiceButton\r\n        onClick={() => {\r\n          dispatch({\r\n            type: \"diceThrown\",\r\n            payload: getNumber(),\r\n          });\r\n        }}\r\n      >\r\n        –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\r\n      </DiceButton>\r\n    </DiceWrap>\r\n  );\r\n};\r\n","import { CellsBarrierListType } from \"../../business/types\";\r\n\r\n// The array is convenient for iterating\r\nexport const CELLS_BARRIERS_LIST: CellsBarrierListType = [\r\n  {\r\n    coord: { hor: 2, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 3 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 4 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 5 },\r\n    barrierList: [\r\n      {\r\n        name: \"window\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 6 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  \r\n  {\r\n    coord: { hor: 2, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 8 },\r\n    barrierList: [\r\n      {\r\n        name: \"window\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 9 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 2, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 3, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 4, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 5, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"door\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 6, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 8, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 9, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 10, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 9 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 3, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 4, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"door\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 5, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"window\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 6, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 8, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"window\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 9, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 10, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 10, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 3, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 4, vert: 9 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 4, vert: 8 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 4, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"door\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n      {\r\n        name: \"door\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 5, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 6, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 7, vert: 8 },\r\n    barrierList: [\r\n      {\r\n        name: \"door\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 8, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 9, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"door\",\r\n        direction: \"bottom\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 6 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 5 },\r\n    barrierList: [\r\n      {\r\n        name: \"door\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 4 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 7, vert: 3 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 11, vert: 9 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    coord: { hor: 11, vert: 8 },\r\n    barrierList: [\r\n      {\r\n        name: \"window\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 11, vert: 7 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 11, vert: 6 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 11, vert: 5 },\r\n    barrierList: [\r\n      {\r\n        name: \"window\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 11, vert: 4 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 11, vert: 3 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    coord: { hor: 11, vert: 2 },\r\n    barrierList: [\r\n      {\r\n        name: \"wall\",\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n\r\n  //it is needed for now for pretty  wall painting\r\n  {\r\n    coord: { hor: 11, vert: 10 },\r\n    barrierList: [\r\n      {\r\n        name: null,\r\n        direction: \"left\",\r\n        isOpen: true,\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import {\r\n  MoveDirectionList,\r\n  CardApperance,\r\n  PlayGridMode,\r\n} from \"../../business/types\";\r\n\r\nexport const START_COORD = { hor: 0, vert: 0 };\r\nexport const FINISH_COORD = { hor: 11, vert: 11 };\r\nexport const INITIAL_PLAYER_HEALTH = 3;\r\nexport const AMOUNT_HEALTH_ITEMS = 30;\r\nexport const AMOUNT_BOARDS_ITEMS = 30;\r\nexport const AMOUNT_WEAPONS_ITEMS = 30;\r\nexport const AMOUNT_PLAYERS = 1;\r\nexport const AMOUNT_ENEMIES = 30;\r\n\r\nexport const CARD_APPERANCE: CardApperance = \"closed\";\r\n\r\nexport const PLAY_GRID_MODE: PlayGridMode = \"image\";\r\n\r\nexport const MAX_HEALTH_AMOUNT = 7;\r\n\r\nexport const MOVE_DIRECTION_LIST: MoveDirectionList = [\r\n  \"top\",\r\n  \"right\",\r\n  \"bottom\",\r\n  \"left\",\r\n];\r\n\r\nexport { CELLS_BARRIERS_LIST } from \"./walls\";\r\n","export default __webpack_public_path__ + \"static/media/brain.bdd84960.png\";","import styled, { css } from \"styled-components\";\r\nimport img from \"./brain.png\";\r\n\r\nexport const StyledCommonCard = css`\r\n  position: absolute;\r\n  width: 50px;\r\n  height: 50px;\r\n  background-image: url(${img});\r\n  background-size: 44px;\r\n  background-repeat: no-repeat;\r\n  background-position: 3px;\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/health.d3aa03e8.png\";","import styled from \"styled-components\";\r\nimport { StyledCommonCard } from \"../CommonCard/CommonCard\";\r\nimport img from \"./health.png\";\r\n\r\ntype HealthApperanceType = {\r\n  apperance?: \"closed\" | \"open\";\r\n  className?: string;\r\n};\r\n\r\nexport const StyledHealthCard = styled.div<HealthApperanceType>`\r\n  ${StyledCommonCard}\r\n  background-color: ${(props) => {\r\n    if (props.apperance === \"open\") {\r\n      return \"unset\";\r\n    }\r\n  }};\r\n\r\n  background-image: ${(props) => {\r\n    if (props.apperance === \"open\") {\r\n      return `url(${img})`;\r\n    }\r\n  }};\r\n`;\r\n\r\nexport const Health = (props: HealthApperanceType) => {\r\n  return <StyledHealthCard {...props}></StyledHealthCard>;\r\n};\r\n","import { MoveDirection } from \"../../types\";\r\n\r\n/**\r\n * Returns new coordinate of player.\r\n * @param currentCoord A string of current coordinate.\r\n * @param direction  A string of direction.\r\n * @returns A string with new coordinate.\r\n */\r\n\r\nexport const getNextPlayerCoord = (\r\n  currentCoord: string,\r\n  direction: MoveDirection\r\n) => {\r\n  \r\n  const [currPlayerHor, currPlayerVert] = currentCoord.split(\".\");\r\n  const nextPlayerVert = parseInt(currPlayerVert) + 1;\r\n  const nextPlayerHor = parseInt(currPlayerHor) + 1;\r\n  const prevPlayerVert = parseInt(currPlayerVert) - 1;\r\n  const prevPlayerHor = parseInt(currPlayerHor) - 1;\r\n\r\n  switch (direction) {\r\n    case \"top\": {\r\n      return `${currPlayerHor}.${nextPlayerVert}`;\r\n    }\r\n\r\n    case \"bottom\": {\r\n      return `${currPlayerHor}.${prevPlayerVert}`;\r\n    }\r\n\r\n    case \"left\": {\r\n      return `${prevPlayerHor}.${currPlayerVert}`;\r\n    }\r\n\r\n    case \"right\": {\r\n      return `${nextPlayerHor}.${currPlayerVert}`;\r\n    }\r\n\r\n    default:\r\n      return `${currPlayerHor}.${currPlayerVert}`;\r\n  }\r\n};\r\n","import { State, AvailableCellListType, GameField } from \"../../types\";\r\nimport { MOVE_DIRECTION_LIST } from \"../../../shared/config\";\r\nimport { getNextPlayerCoord } from \"./getNextPlayerCoord\";\r\n\r\n/**\r\n * Returns the coordinates of neighboribgCells that lying in the GameField.\r\n */\r\nexport const getNeighboringCellList = (\r\n  prevPlayerCoord: string,\r\n  gameField: GameField\r\n): AvailableCellListType => {\r\n  const coordNeighboringCells: AvailableCellListType = MOVE_DIRECTION_LIST.map(\r\n    (directionItem) => {\r\n      return {\r\n        direction: directionItem,\r\n        coord: getNextPlayerCoord(prevPlayerCoord, directionItem),\r\n      };\r\n    }\r\n  );\r\n\r\n  /**\r\n   * Returns the coordinates that lying in the GameField.\r\n   */\r\n  const existanceInGameFieldCells: AvailableCellListType =\r\n    coordNeighboringCells.filter((cellItem) => {\r\n      const { direction, coord } = cellItem;\r\n      return gameField.values[coord];\r\n    });\r\n  return existanceInGameFieldCells;\r\n};\r\n","import { State, PlayerListType, MoveDirection, CellType } from \"../../types\";\r\n\r\n/**\r\n * Returns true if current or next cell has wall\r\n */\r\nexport const checkCellHasWall = (\r\n  state: State,\r\n  newPlayerCoord: string,\r\n  direction: MoveDirection\r\n) => {\r\n  const { playerList, numberOfPlayer, gameField } = state;\r\n  const currCellCoord = playerList[numberOfPlayer].coord;\r\n  const currCell = gameField.values[currCellCoord];\r\n  const nextCell = gameField.values[newPlayerCoord];\r\n  const oppositeDirection = getOppositeDirection(direction);\r\n  const currCellHasBarrier = checkCellOnBarrier(currCell, direction);\r\n\r\n  const nextCellHasBarrier = checkCellOnBarrier(nextCell, oppositeDirection);\r\n\r\n  if (currCellHasBarrier || nextCellHasBarrier) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst checkCellOnBarrier = (cell: CellType, direction: MoveDirection) => {\r\n  if (cell.name === \"commonCell\") {\r\n    //Now in config just left and bottom walls\r\n    if (direction === \"left\" || direction === \"bottom\") {\r\n      const cellHasWall = cell.barrierList?.find(\r\n        (barrier) => barrier.name === \"wall\" && barrier.direction === direction\r\n      )\r\n        ? true\r\n        : false;\r\n      const cellHasClosedHole = cell.barrierList?.find(\r\n        (barrier) => barrier.isOpen === false && barrier.direction === direction\r\n      )\r\n        ? true\r\n        : false;\r\n      const cellHasBarrier = cellHasWall || cellHasClosedHole;\r\n      return cellHasBarrier;\r\n    }\r\n    return false;\r\n  }\r\n};\r\n\r\nconst getOppositeDirection = (direction: MoveDirection): MoveDirection => {\r\n  switch (direction) {\r\n    case \"top\": {\r\n      return \"bottom\";\r\n    }\r\n    case \"bottom\": {\r\n      return \"top\";\r\n    }\r\n    case \"left\": {\r\n      return \"right\";\r\n    }\r\n    case \"right\": {\r\n      return \"left\";\r\n    }\r\n  }\r\n};\r\n","export default __webpack_public_path__ + \"static/media/player.78f136ce.png\";","import { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  PlayerCardType,\r\n  AvailableCellListType,\r\n  State,\r\n} from \"../../business/types\";\r\nimport { getNeighboringCellList } from \"../../business/phases/common/getNeighboringCellList\";\r\nimport { canInteractWithCell } from \"./canInteractWithCell\";\r\n\r\nimport img from \"./player.png\";\r\n\r\ntype PlayerItem = {\r\n  isCurrent: boolean;\r\n  needHighlightning?: boolean;\r\n};\r\n\r\ntype PlayerListItem = {\r\n  playerListOnCell: PlayerCardType[];\r\n  getContextMenu: Function;\r\n};\r\n\r\ntype ContextMenuType = {\r\n  visible: boolean;\r\n};\r\n\r\ntype TypeOfCard = \"boards\" | \"health\" | \"weapon\" | null;\r\n\r\nconst PlayerCard = styled.div<PlayerItem>`\r\n  width: 50px;\r\n  height: 50px;\r\n  margin: 0px;\r\n  z-index: 3;\r\n  text-align: center;\r\n  padding: 2px;\r\n  box-sizing: border-box;\r\n  cursor: default;\r\n  background-repeat: no-repeat;\r\n  background-position: 0px;\r\n  background-image: url(${img});\r\n  background-size: 44px;\r\n  background-position: 3px;\r\n  &:before {\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 12px;\r\n    height: 12px;\r\n    border-radius: 50%;\r\n    border: ${(props) => {\r\n      if (props.needHighlightning) {\r\n        return \"3px solid #34b834;\";\r\n      }\r\n    }};\r\n    pointer-events: none;\r\n    opacity: 0.5;\r\n    padding: 4px;\r\n\r\n    left: -3px;\r\n    top: -3px;\r\n  }\r\n`;\r\n\r\nconst PlayerCardList = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  position: absolute;\r\n  z-index: 3;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const PlayerList = (props: PlayerListItem) => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n  const { playerList, numberOfPlayer } = state;\r\n\r\n  /**\r\n   *  playerListOnCell -is all player in one cell\r\n   */\r\n  const { playerListOnCell, getContextMenu } = props;\r\n\r\n  const listForInteract = getAvailableCellList(state);\r\n  const currPlayerCoord = playerList[numberOfPlayer].coord;\r\n  const listForHealing = listForInteract.concat(currPlayerCoord);\r\n  const currPlayer = playerList[numberOfPlayer];\r\n  const chosedCard = currPlayer.inventory.find(\r\n    (card) => card?.isSelected === true\r\n  );\r\n  const typeOfChosedCard = chosedCard?.name || null;\r\n\r\n  return (\r\n    <PlayerCardList>\r\n      {playerListOnCell.map((playerCardItem, index) => {\r\n        const canInteractWithPlayer = listForInteract.includes(\r\n          playerCardItem.coord\r\n        );\r\n        const canHealPlayer = listForHealing.includes(playerCardItem.coord);\r\n\r\n        return (\r\n          <PlayerCard\r\n            id={`player${playerCardItem.orderNumber}`}\r\n            key={index}\r\n            isCurrent={numberOfPlayer == playerCardItem.orderNumber}\r\n            needHighlightning={calculateHighlightning(\r\n              canInteractWithPlayer,\r\n              canHealPlayer,\r\n              typeOfChosedCard\r\n            )}\r\n            onClick={() => {\r\n              playerClickedHandler(\r\n                getContextMenu,\r\n                playerCardItem,\r\n                numberOfPlayer,\r\n                canInteractWithPlayer,\r\n                typeOfChosedCard,\r\n                dispatch\r\n              );\r\n            }}\r\n          ></PlayerCard>\r\n        );\r\n      })}\r\n    </PlayerCardList>\r\n  );\r\n};\r\n\r\nconst getAvailableCellList = (state: State) => {\r\n  const { gameState, playerList, numberOfPlayer, gameField } = state;\r\n  const prevPlayerCoord = playerList[numberOfPlayer].coord;\r\n  const neighboringCellList = getNeighboringCellList(\r\n    prevPlayerCoord,\r\n    gameField\r\n  );\r\n  const availableCellList: AvailableCellListType = neighboringCellList.filter(\r\n    (cellItem) => {\r\n      const { direction, coord } = cellItem;\r\n\r\n      return canInteractWithCell(state, coord, direction);\r\n    }\r\n  );\r\n\r\n  const availableCellsCoords = availableCellList.map((cellItem) => {\r\n    const { direction, coord } = cellItem;\r\n    return coord;\r\n  });\r\n\r\n  switch (gameState.type) {\r\n    case \"gameStarted.applyCard\":\r\n      return availableCellsCoords;\r\n\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n\r\nconst playerClickedHandler = (\r\n  getContextMenu: Function,\r\n  playerCardItem: PlayerCardType,\r\n  numberOfPlayer: number,\r\n  canInteractWithPlayer: boolean,\r\n  typeOfChosedCard: TypeOfCard,\r\n  dispatch: Function\r\n) => {\r\n  const isCurrentPlayer = playerCardItem.orderNumber == numberOfPlayer;\r\n  switch (canInteractWithPlayer) {\r\n    case true: {\r\n      switch (typeOfChosedCard) {\r\n        case \"health\": {\r\n          switch (isCurrentPlayer) {\r\n            case true: {\r\n              dispatch({\r\n                type: \"req-healPlayer\",\r\n                payload: playerCardItem.orderNumber,\r\n              });\r\n              break;\r\n            }\r\n\r\n            case false: {\r\n              getContextMenu(playerCardItem.orderNumber);\r\n            }\r\n          }\r\n\r\n          break;\r\n        }\r\n        case \"weapon\":\r\n        case \"boards\": {\r\n          /**\r\n           * For preventing sharing any cards with himself\r\n           */\r\n          switch (isCurrentPlayer) {\r\n            case true: {\r\n              break;\r\n            }\r\n            case false: {\r\n              dispatch({\r\n                type: \"req-shareCard\",\r\n                payload: playerCardItem.orderNumber,\r\n              });\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case false: {\r\n      console.log(\"–Ω–µ –º–æ–∂–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∏–≥—Ä–æ–∫–æ–º –∏–≥—Ä–æ–∫–∞\");\r\n      break;\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nconst calculateHighlightning = (\r\n  canInteractWithPlayer: boolean,\r\n  canHealPlayer: boolean,\r\n  typeOfChosedCard: TypeOfCard\r\n) => {\r\n  switch (canHealPlayer) {\r\n    case true: {\r\n      switch (typeOfChosedCard) {\r\n        case \"health\": {\r\n          return true;\r\n        }\r\n\r\n        case \"weapon\":\r\n        case \"boards\": {\r\n          switch (canInteractWithPlayer) {\r\n            case true: {\r\n              return true;\r\n            }\r\n            case false: {\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n        default: {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    case false: {\r\n      return false;\r\n    }\r\n  }\r\n};\r\n","import {\r\n  State,\r\n  PlayerListType,\r\n  MoveDirection,\r\n  CellType,\r\n} from \"../../business/types\";\r\nimport { checkCellHasWall } from \"../../business/phases/common\";\r\n/** Cheking the cases when can't take the cell. In default we think that can. */\r\nexport const canInteractWithCell = (\r\n  state: State,\r\n  nextPlayerCoord: string,\r\n  direction: MoveDirection\r\n) => {\r\n  const { gameField, playerList, dice } = state;\r\n  const nextCellForPlayer = gameField.values[nextPlayerCoord];\r\n  const nextCellOutOfGameField = nextCellForPlayer ? false : true;\r\n\r\n  switch (nextCellOutOfGameField) {\r\n    case true: {\r\n      return false;\r\n    }\r\n\r\n    case false: {\r\n      const metBarrier = checkCellHasWall(state, nextPlayerCoord, direction);\r\n\r\n      switch (true) {\r\n        case metBarrier: {\r\n          return false;\r\n        }\r\n\r\n        default: {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    default: {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n","export default __webpack_public_path__ + \"static/media/zombie.0f20e592.png\";","import { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { EnemyCardType, State } from \"../../business/types\";\r\nimport { StyledCommonCard } from \"../CommonCard/CommonCard\";\r\n\r\nimport img from \"./zombie.png\";\r\n\r\ntype EnemyArray = {\r\n  list: EnemyCardType[];\r\n};\r\n\r\nconst EnemyCard = styled.div<EnemyCardType>`\r\n  ${StyledCommonCard}\r\n\r\n  font-size: 47px;\r\n  text-align: start;\r\n  vertical-align: bottom;\r\n  line-height: 0.15;\r\n  text-transform: unset;\r\n  font-family: sans-serif;\r\n  text-indent: -4px;\r\n\r\n  cursor: pointer;\r\n\r\n  background-color: ${(props) => {\r\n    if (props.apperance === \"open\" || props.apperance === \"defeated\") {\r\n      return \"unset\";\r\n    }\r\n  }};\r\n\r\n  cursor: ${(props) => {\r\n    if (props.apperance === \"closed\") {\r\n      return \"default\";\r\n    } else {\r\n      return \"pointer\";\r\n    }\r\n  }};\r\n\r\n  background-image: ${(props) => {\r\n    if (props.apperance === \"open\" || props.apperance === \"defeated\") {\r\n      return `url(${img})`;\r\n    }\r\n  }};\r\n`;\r\n\r\nconst EnemiesCardList = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  position: absolute;\r\n  /*   width: 50px;\r\n  height: 50px; */\r\n`;\r\n\r\nexport const EnemyList = (props: EnemyArray) => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n  const { numberOfPlayer, playerList } = state;\r\n  const enemyArray = props.list;\r\n\r\n  return (\r\n    <EnemiesCardList>\r\n      {enemyArray.map((enemyCard, index) => {\r\n        return (\r\n          <EnemyCard\r\n            key={index}\r\n            {...enemyCard}\r\n            onClick={() => {\r\n              const canFight =\r\n                playerList[numberOfPlayer].coord === enemyCard.coord;\r\n              if (canFight) {\r\n                dispatch({\r\n                  type: \"req-defeatEnemy\",\r\n                });\r\n              } else {\r\n                return null;\r\n              }\r\n            }}\r\n          >\r\n            {/*  {enemyCard.apperance === \"defeated\" ? \"x\" : null} */}\r\n          </EnemyCard>\r\n        );\r\n      })}\r\n    </EnemiesCardList>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/boards.3824da3f.png\";","import styled from \"styled-components\";\r\nimport { StyledCommonCard } from \"../CommonCard/CommonCard\";\r\nimport img from \"./boards.png\";\r\n\r\ntype BoardsApperanceType = {\r\n  apperance?: \"closed\" | \"open\";\r\n};\r\n\r\nconst StyledBoardsCard = styled.div<BoardsApperanceType>`\r\n  ${StyledCommonCard}\r\n  background-color: ${(props) => {\r\n    if (props.apperance === \"open\") {\r\n      return \"unset\";\r\n    }\r\n  }};\r\n\r\n  background-image: ${(props) => {\r\n    if (props.apperance === \"open\") {\r\n      return `url(${img})`;\r\n    }\r\n  }};\r\n\r\n  border-color: ${(props) => {\r\n    if (props.apperance === \"open\") {\r\n      return \"gray\";\r\n    }\r\n  }};\r\n`;\r\n\r\nexport const BoardsCard = (props: BoardsApperanceType) => {\r\n  return (\r\n    <StyledBoardsCard {...props}>\r\n      {/*  {props.apperance === \"closed\" ? null : \"X\"} */}\r\n    </StyledBoardsCard>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/weapon.b3c5e028.png\";","import styled from \"styled-components\";\r\nimport { StyledCommonCard } from \"../CommonCard/CommonCard\";\r\nimport img from \"./weapon.png\";\r\n\r\ntype WeaponApperanceType = {\r\n  apperance?: \"closed\" | \"open\";\r\n};\r\n\r\nconst StyledWeaponCard = styled.div<WeaponApperanceType>`\r\n  ${StyledCommonCard}\r\n  background-color: ${(props) => {\r\n    if (props.apperance === \"open\") {\r\n      return \"unset\";\r\n    }\r\n  }};\r\n\r\n  border-color: ${(props) => {\r\n    if (props.apperance === \"open\") {\r\n      return \"gray\";\r\n    }\r\n  }};\r\n  background-image: ${(props) => {\r\n    if (props.apperance === \"open\") {\r\n      return `url(${img})`;\r\n    }\r\n  }};\r\n`;\r\n\r\nexport const WeaponCard = (props: WeaponApperanceType) => {\r\n  return (\r\n    <StyledWeaponCard {...props}>\r\n      {/*      {props.apperance === \"closed\" ? null : \"O\"} */}\r\n    </StyledWeaponCard>\r\n  );\r\n};\r\n","import { Health, BoardsCard, WeaponCard } from \"../../components\";\r\nimport { CellType } from \"../../business/types\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const getCards = (cell: CellType, hor: string, vert: string) => {\r\n  const healthCardItem = cell.cardItem.find(\r\n    (cardItem) => cardItem?.name === \"health\"\r\n  );\r\n\r\n  const boardsCardItem = cell.cardItem.find(\r\n    (cardItem) => cardItem?.name === \"boards\"\r\n  );\r\n  const weaponCardItem = cell.cardItem.find(\r\n    (cardItem) => cardItem?.name === \"weapon\"\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {healthCardItem ? (\r\n        <Health\r\n          apperance={healthCardItem.apperance}\r\n          className={\"\"}\r\n          key={`${hor}.${vert}.health`}\r\n        />\r\n      ) : null}\r\n      {boardsCardItem ? (\r\n        <BoardsCard\r\n          apperance={boardsCardItem.apperance}\r\n          key={`${hor}.${vert}.boards`}\r\n        />\r\n      ) : null}\r\n      {weaponCardItem ? (\r\n        <WeaponCard\r\n          apperance={weaponCardItem.apperance}\r\n          key={`${hor}.${vert}.weapon`}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n","import { PlayerList } from \"../../components\";\r\n\r\nimport { PlayerListType, PlayerCardType } from \"../../business/types\";\r\n\r\nexport const getPlayersList = (\r\n  index: string,\r\n  playersList: PlayerListType,\r\n  numberOfPlayer: number,\r\n  getContextMenu: Function,\r\n  hor: string,\r\n  vert: string\r\n) => {\r\n  let playersArr: PlayerCardType[] = [];\r\n\r\n  for (let playerKey in playersList) {\r\n    const playerCard = playersList[playerKey];\r\n    const playerCoord = playerCard.coord;\r\n    if (playerCoord === index) {\r\n      playersArr.push(playersList[playerKey]);\r\n    }\r\n  }\r\n  if (playersArr.length > 0) {\r\n    return (\r\n      <PlayerList\r\n        playerListOnCell={playersArr}\r\n        getContextMenu={getContextMenu}\r\n      />\r\n    );\r\n  } else return null;\r\n};\r\n","import { EnemyList } from \"../../components\";\r\n\r\nimport { EnemyListType, EnemyCardType } from \"../../business/types\";\r\n\r\nexport const getEnemyList = (\r\n  index: string,\r\n  enemiesList: EnemyListType,\r\n  hor: string,\r\n  vert: string\r\n) => {\r\n  let enemiesArr: EnemyCardType[] = [];\r\n  for (let enemiesKey in enemiesList) {\r\n    const enemiesCard = enemiesList[enemiesKey];\r\n    const enemiesCoord = enemiesCard.coord;\r\n    if (enemiesCoord === index) {\r\n      enemiesArr.push(enemiesList[enemiesKey]);\r\n    }\r\n  }\r\n  if (enemiesArr.length > 0) {\r\n    return <EnemyList list={enemiesArr} key={`${hor}.${vert}.enemy`} />;\r\n  } else return null;\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { getNeighboringCellList } from \"../../business/phases/common/getNeighboringCellList\";\r\n\r\nimport {\r\n  State,\r\n  MoveDirection,\r\n  BarrierItem,\r\n  CommonCell,\r\n  AvailableCellListType,\r\n  GameField,\r\n  GameState,\r\n  PlayerListType,\r\n  CellType,\r\n  AvailableCellType,\r\n  PlayGridMode,\r\n} from \"../../business/types\";\r\n\r\nimport { PLAY_GRID_MODE } from \"../../shared/config\";\r\n\r\ntype WallType = {\r\n  barrierItem?: BarrierItem;\r\n  //TODO: –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø?\r\n  highlightningList: (MoveDirection | null)[] | null;\r\n  onClick: Function;\r\n  mode: PlayGridMode;\r\n};\r\n\r\ntype BarrierCoord = {\r\n  orderIndex: string;\r\n};\r\n\r\nconst Wall = styled.div<WallType>`\r\n  cursor: ${(props) => {\r\n    switch (props.barrierItem?.name) {\r\n      case \"wall\": {\r\n        return \"default\";\r\n      }\r\n      case \"door\": {\r\n        return \"pointer\";\r\n      }\r\n      case \"window\": {\r\n        return \"pointer\";\r\n      }\r\n      default:\r\n        return \"default\";\r\n    }\r\n  }};\r\n\r\n  &:before {\r\n    display: ${(props) => {\r\n      if (props.mode === \"image\") {\r\n        return \"none\";\r\n      }\r\n    }};\r\n\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 50px;\r\n    height: 50px;\r\n    bottom: 0px;\r\n    z-index: 5;\r\n    height: ${(props) => {\r\n      if (props.barrierItem?.direction === \"bottom\") {\r\n        if (props.barrierItem?.isOpen === false) {\r\n          return \"10px\";\r\n        } else {\r\n          switch (props.barrierItem.name) {\r\n            case \"wall\": {\r\n              return \"5px\";\r\n            }\r\n            case \"door\": {\r\n              return \"3px\";\r\n            }\r\n            case \"window\": {\r\n              return \"3px\";\r\n            }\r\n            default:\r\n              return \"0px\";\r\n          }\r\n        }\r\n      } else if (\r\n        props.barrierItem &&\r\n        props.barrierItem.direction === \"left\" &&\r\n        props.barrierItem.name !== null\r\n      ) {\r\n        return \"50px\";\r\n        //it is needed for now for pretty  wall painting\r\n      } else if (props.barrierItem && props.barrierItem.name === null) {\r\n        return \"5px\";\r\n      } else {\r\n        return \"0px\";\r\n      }\r\n    }};\r\n\r\n    width: ${(props) => {\r\n      if (props.barrierItem?.direction === \"left\") {\r\n        if (props.barrierItem?.isOpen === false) {\r\n          return \"10px\";\r\n        } else {\r\n          switch (props.barrierItem.name) {\r\n            case \"wall\": {\r\n              return \"5px \";\r\n            }\r\n            case \"door\": {\r\n              return \"3px\";\r\n            }\r\n            case \"window\": {\r\n              return \"3px\";\r\n            }\r\n            default:\r\n              return \"5px\";\r\n          }\r\n        }\r\n      } else {\r\n        return \"none\";\r\n      }\r\n    }};\r\n\r\n    background-color: ${(props) => {\r\n      if (props.barrierItem?.isOpen) {\r\n        const needHighlightning = props.highlightningList?.find((item) => {\r\n          return item === \"bottom\" || \"left\";\r\n        });\r\n\r\n        switch (props.barrierItem.name) {\r\n          case \"wall\": {\r\n            return \"#f09308;\";\r\n          }\r\n          case \"door\": {\r\n            if (needHighlightning) {\r\n              return \"#78ff2d\";\r\n            } else {\r\n              return \" #584324;\";\r\n            }\r\n          }\r\n          case \"window\": {\r\n            if (needHighlightning) {\r\n              return \"#78ff2d\";\r\n            } else {\r\n              return \" #a3cdd8;\";\r\n            }\r\n          }\r\n          default:\r\n            return \"#f09308\";\r\n        }\r\n      } else if (props.barrierItem?.isOpen === false) {\r\n        return \"#66615d;\";\r\n      } else {\r\n        return \"none\";\r\n      }\r\n    }};\r\n  }\r\n\r\n  &:after {\r\n    display: ${(props) => {\r\n      if (props.mode === \"image\") {\r\n        return \"none\";\r\n      }\r\n    }};\r\n\r\n    content: \"\";\r\n    z-index: 5;\r\n    position: absolute;\r\n    width: 50px;\r\n    height: 50px;\r\n\r\n    top: ${(props) => {\r\n      if (props.barrierItem?.direction === \"left\") {\r\n        return \"0\";\r\n      }\r\n    }};\r\n    height: ${(props) => {\r\n      if (props.barrierItem?.direction === \"bottom\" && props.barrierItem) {\r\n        return \"20px\";\r\n      }\r\n    }};\r\n    width: ${(props) => {\r\n      if (props.barrierItem?.direction === \"left\") {\r\n        return \"20px\";\r\n      }\r\n    }};\r\n    bottom: ${(props) => {\r\n      if (props.barrierItem?.direction === \"bottom\") {\r\n        return \"-10px\";\r\n      }\r\n    }};\r\n    left: ${(props) => {\r\n      if (props.barrierItem?.direction === \"left\") {\r\n        return \"-10px\";\r\n      }\r\n    }};\r\n\r\n    background-color: ${(props) => {\r\n      if (props.barrierItem?.isOpen) {\r\n        const needHighlightning = props.highlightningList?.find((item) => {\r\n          return item === \"bottom\" || \"left\";\r\n        });\r\n\r\n        if (needHighlightning) {\r\n          return \"#79fe2f3d\";\r\n        } else {\r\n          return \"none\";\r\n        }\r\n      }\r\n    }};\r\n  }\r\n`;\r\n\r\nexport const Barrier = (props: BarrierCoord) => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n\r\n  const { gameField, playerList, numberOfPlayer, gameState } = state;\r\n\r\n  const orderIndex = props.orderIndex;\r\n  const cellValues = gameField.values[orderIndex];\r\n  const currPlayerCoord = playerList[numberOfPlayer].coord;\r\n\r\n  const neighboringCellList = getNeighboringCellList(\r\n    currPlayerCoord,\r\n    gameField\r\n  );\r\n\r\n  const neighboringCellListCoord = neighboringCellList.map((cellItem) => {\r\n    const { direction, coord } = cellItem;\r\n    return coord;\r\n  });\r\n\r\n  const checkCellListCoord = neighboringCellListCoord.concat(currPlayerCoord);\r\n\r\n  const needCheckHighlightning = checkCellListCoord.find(\r\n    (coord) => orderIndex === coord\r\n  );\r\n\r\n  const highlightningList = getHighlightningList(\r\n    neighboringCellList,\r\n    gameField,\r\n    currPlayerCoord,\r\n    gameState,\r\n    playerList,\r\n    numberOfPlayer\r\n  );\r\n\r\n  switch (cellValues.name) {\r\n    case \"commonCell\": {\r\n      const barrierList = cellValues.barrierList?.map((barrier) => {\r\n        return (\r\n          <Wall\r\n            key={barrier.direction}\r\n            barrierItem={barrier}\r\n            highlightningList={\r\n              needCheckHighlightning\r\n                ? getHigtlightningDirection(\r\n                    highlightningList,\r\n                    orderIndex,\r\n                    barrier.direction\r\n                  )\r\n                : null\r\n            }\r\n            mode={PLAY_GRID_MODE}\r\n            onClick={() => {\r\n              const canCloseHole = highlightningList.find((cellType) => {\r\n                return (\r\n                  cellType?.coord === orderIndex &&\r\n                  cellType?.direction === barrier.direction &&\r\n                  barrier.isOpen === true\r\n                );\r\n              })\r\n                ? true\r\n                : false;\r\n              if (canCloseHole) {\r\n                dispatch({\r\n                  type: \"req-fillHole\",\r\n                  payload: { coord: orderIndex, direction: barrier.direction },\r\n                });\r\n              } else {\r\n                return null;\r\n              }\r\n            }}\r\n          >\r\n            {\" \"}\r\n          </Wall>\r\n        );\r\n      });\r\n      return <>{barrierList}</>;\r\n    }\r\n    default: {\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nconst getHigtlightningDirection = (\r\n  highlightningList: (AvailableCellType | null)[],\r\n  orderIndex: string,\r\n  direction: MoveDirection\r\n) => {\r\n  const currList = highlightningList.filter((cellItem) => {\r\n    return cellItem?.coord === orderIndex && cellItem?.direction === direction;\r\n  });\r\n\r\n  const structuredList = currList.map((cellItem) => {\r\n    if (cellItem) {\r\n      const { direction, coord } = cellItem;\r\n      return direction;\r\n    } else {\r\n      return null;\r\n    }\r\n  });\r\n\r\n  return structuredList;\r\n};\r\n\r\n/**\r\n * Check the neifhboring of that coord.\r\n * Have they door or window\r\n */\r\nconst getHighlightningList = (\r\n  neighboringCellList: AvailableCellListType,\r\n  gameField: GameField,\r\n  currCoord: string,\r\n  gameState: GameState,\r\n  playerList: PlayerListType,\r\n  numberOfPlayer: number\r\n) => {\r\n  const currCell = gameField.values[currCoord];\r\n\r\n  const availableCellList = neighboringCellList\r\n    .map((cellItem) => {\r\n      const { direction, coord } = cellItem;\r\n      const currCellHasHole = checkCellOnHole(currCell, direction);\r\n      const nextCell = gameField.values[coord];\r\n      const oppositeDirection = getOppositeDirection(direction);\r\n      const nextCellHasHole = checkCellOnHole(nextCell, oppositeDirection);\r\n      if (currCellHasHole) {\r\n        const cellItemWithHole: AvailableCellType = {\r\n          direction,\r\n          coord: currCoord,\r\n        };\r\n\r\n        return cellItemWithHole;\r\n      } else if (nextCellHasHole) {\r\n        const cellItemWithHole: AvailableCellType = {\r\n          direction: oppositeDirection,\r\n          coord,\r\n        };\r\n        return cellItemWithHole;\r\n      } else {\r\n        return null;\r\n      }\r\n    })\r\n    .filter((availableCell) => availableCell !== null);\r\n\r\n  switch (gameState.type) {\r\n    case \"gameStarted.applyCard\":\r\n      const cardItemList = playerList[numberOfPlayer].inventory;\r\n      const selectedCard = cardItemList.find(\r\n        (cardItem) => cardItem?.isSelected === true\r\n      );\r\n      const typeOfSelectedCard = selectedCard?.name;\r\n      if (typeOfSelectedCard === \"boards\") {\r\n        return availableCellList;\r\n      } else {\r\n        return [];\r\n      }\r\n\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n\r\nconst checkCellOnHole = (cell: CellType, direction: MoveDirection) => {\r\n  if (cell.name === \"commonCell\") {\r\n    if (direction === \"left\" || direction === \"bottom\") {\r\n      const cellHasWindow = cell.barrierList?.find(\r\n        (barrier) => barrier.name === \"window\"\r\n      )\r\n        ? true\r\n        : false;\r\n      const cellHasDoor = cell.barrierList?.find(\r\n        (barrier) => barrier.name === \"door\"\r\n      )\r\n        ? true\r\n        : false;\r\n      const cellHasHole = cellHasWindow || cellHasDoor;\r\n      return cellHasHole;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst getOppositeDirection = (direction: MoveDirection): MoveDirection => {\r\n  switch (direction) {\r\n    case \"top\": {\r\n      return \"bottom\";\r\n    }\r\n    case \"bottom\": {\r\n      return \"top\";\r\n    }\r\n    case \"left\": {\r\n      return \"right\";\r\n    }\r\n    case \"right\": {\r\n      return \"left\";\r\n    }\r\n  }\r\n};\r\n","import ReactDOM from \"react-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { State, PlayGridMode } from \"../../business/types\";\r\nimport { getCards } from \"./getCards\";\r\nimport { getPlayersList } from \"./getPlayersList\";\r\nimport { getEnemyList } from \"./getEnemyList\";\r\nimport { Barrier } from \"./Barrier\";\r\n\r\nimport { PLAY_GRID_MODE } from \"../../shared/config\";\r\nimport React from \"react\";\r\n\r\ntype CellApperance = {\r\n  hasMarker?: boolean;\r\n  isNeedSepareteCards: boolean;\r\n  mode: PlayGridMode;\r\n};\r\n\r\ntype UnderlayerType = {\r\n  coordX: string;\r\n  coordY: string;\r\n};\r\nconst Wrap = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst CellItem = styled.div<CellApperance>`\r\n  display: flex;\r\n  position: relative;\r\n  box-sizing: border-box;\r\n\r\n  font-size: 14px;\r\n  text-align: right;\r\n  width: 50px;\r\n  height: 50px;\r\n  color: lightgrey;\r\n\r\n  border: ${(props) => {\r\n    if (props.mode === \"cssStyle\") {\r\n      return \"1px solid lightgray\";\r\n    }\r\n  }};\r\n\r\n  background-color: ${(props) => {\r\n    if (props.hasMarker) {\r\n      return \"rgb(55 163 0 / 77%);\";\r\n    }\r\n  }};\r\n`;\r\n\r\nconst UnderlayerItem = styled.div<UnderlayerType>`\r\n  position: relative;\r\n  display: flex;\r\n  width: 134px;\r\n  height: 100px;\r\n  background-color: rgb(47 84 96 / 77%);\r\n  left: -30px;\r\n  bottom: 120px;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 12px 1px rgb(62 76 81 / 98%);\r\n\r\n  left: ${(props) => {\r\n    return `${Number(props.coordX) * 50 - 30}px`;\r\n  }};\r\n\r\n  bottom: ${(props) => {\r\n    return `${Number(props.coordY) * 50 + 70}px`;\r\n  }};\r\n\r\n  & > * {\r\n    position: relative;\r\n    margin: 30px 0;\r\n    width: 50px;\r\n    height: 50px;\r\n  }\r\n  flex-direction: row;\r\n\r\n  align-items: center;\r\n`;\r\n\r\nconst Test = styled.div`\r\n  position: absolute;\r\n  z-index: 0;\r\n  top: 40px;\r\n  width: 600px;\r\n  height: 600px;\r\n  background-color: rgb(229 203 138 / 53%);\r\n`;\r\n\r\nexport const getFilledPlayGrid = (state: State, getContextMenu: Function) => {\r\n  const { gameField, playerList, numberOfPlayer, gameState, enemyList } = state;\r\n  const orderGameCells = gameField.order;\r\n\r\n  const currPlayerCoord = playerList[numberOfPlayer].coord;\r\n\r\n  const availableCells = state.availableCellsCoords?.concat(currPlayerCoord);\r\n\r\n  const fullPlayerGrid = orderGameCells.map((orderIndex: string) => {\r\n    const cellValues = gameField.values[orderIndex];\r\n    const [hor, vert] = orderIndex.split(\".\");\r\n\r\n    const hasMarker = availableCells?.includes(orderIndex);\r\n\r\n    const [playerX, playerY] = currPlayerCoord.split(\".\");\r\n    const isPhaseCardsSeparate =\r\n      gameState.type.includes(\"interactWithEnemy\") ||\r\n      gameState.type === \"gameStarted.takeCard\";\r\n\r\n    const isNeedSepareteCards =\r\n      isPhaseCardsSeparate && playerX === hor && playerY === vert;\r\n\r\n    const cardList = (\r\n      <>\r\n        {getCards(cellValues, hor, vert)}\r\n        {getPlayersList(\r\n          orderIndex,\r\n          playerList,\r\n          numberOfPlayer,\r\n          getContextMenu,\r\n          hor,\r\n          vert\r\n        )}\r\n        {cellValues.name === \"commonCell\"\r\n          ? getEnemyList(orderIndex, enemyList, hor, vert)\r\n          : null}\r\n      </>\r\n    );\r\n\r\n    switch (isNeedSepareteCards) {\r\n      case true: {\r\n        const fieildElem = document.getElementById(\"field\");\r\n        switch (fieildElem) {\r\n          case null: {\r\n            return null;\r\n          }\r\n          default: {\r\n            return (\r\n              <React.Fragment key={`${hor}.${vert}`}>\r\n                <Wrap key={`${hor}.${vert}`}>\r\n                  <CellItem\r\n                    hasMarker={hasMarker}\r\n                    isNeedSepareteCards={isNeedSepareteCards}\r\n                    mode={PLAY_GRID_MODE}\r\n                  >\r\n                    {PLAY_GRID_MODE === \"cssStyle\" ? `${hor}.${vert}` : null}\r\n                  </CellItem>\r\n                  {cellValues.name === \"commonCell\" ? (\r\n                    <Barrier orderIndex={orderIndex}></Barrier>\r\n                  ) : null}\r\n                </Wrap>\r\n\r\n                {ReactDOM.createPortal(\r\n                  <>\r\n                    <Test />\r\n                    <UnderlayerItem coordX={hor} coordY={vert}>\r\n                      {cardList}{\" \"}\r\n                    </UnderlayerItem>{\" \"}\r\n                  </>,\r\n                  fieildElem\r\n                )}\r\n              </React.Fragment>\r\n            );\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case false: {\r\n        return (\r\n          <Wrap key={`${hor}.${vert}`}>\r\n            <CellItem\r\n              hasMarker={hasMarker}\r\n              isNeedSepareteCards={isNeedSepareteCards}\r\n              mode={PLAY_GRID_MODE}\r\n            >\r\n              {cardList}\r\n\r\n              {PLAY_GRID_MODE === \"cssStyle\" ? `${hor}.${vert}` : null}\r\n            </CellItem>\r\n            {cellValues.name === \"commonCell\" ? (\r\n              <Barrier orderIndex={orderIndex}></Barrier>\r\n            ) : null}\r\n          </Wrap>\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return fullPlayerGrid;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/house.4cae679c.png\";","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { FINISH_COORD } from \"../../shared/config\";\r\nimport { State, PlayGridMode } from \"../../business/types\";\r\nimport { getFilledPlayGrid } from \"./getFilledPlayGrid\";\r\nimport { PLAY_GRID_MODE } from \"../../shared/config\";\r\n\r\nimport img from \"./house.png\";\r\n\r\ntype GridProps = {\r\n  vert: number;\r\n  /*   type: \"visible\" | \"hidden\"; */\r\n  mode: PlayGridMode;\r\n};\r\n\r\ntype ContextMenuType = {\r\n  type: \"visible\" | \"hidden\";\r\n  coord?: { x?: number; y?: number };\r\n};\r\n\r\ntype WrapType = {};\r\n\r\nconst GridItem = styled.div<GridProps>`\r\n  outline: ${(props) => {\r\n    if (props.mode === \"cssStyle\") {\r\n      return \"2px solid lightgray\";\r\n    }\r\n  }};\r\n\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  transform: rotate(270deg);\r\n  display: grid;\r\n  grid-column-start: -1;\r\n  //–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä—É—é –ø–æ —à–∏—Ä–∏–Ω–µ –ø–æ–ª—è\r\n  grid-template-columns: ${(props) => {\r\n    return `repeat(${props.vert} ,50px)`;\r\n  }};\r\n\r\n  grid-gap: 0px;\r\n  > * {\r\n    transform: rotate(90deg);\r\n  }\r\n\r\n  background-image: ${(props) => {\r\n    if (props.mode === \"image\") {\r\n      return `url(${img})`;\r\n    }\r\n  }};\r\n\r\n  background-color: white;\r\n  background-size: 600px;\r\n  box-shadow: 0 0 10px rgb(0 0 0 / 50%);\r\n`;\r\n\r\nconst ContextMenu = styled.div<ContextMenuType>`\r\n  display: ${(props) => {\r\n    if (props.type === \"visible\") {\r\n      return \"block\";\r\n    } else {\r\n      return \"none\";\r\n    }\r\n  }};\r\n\r\n  flex-direction: column;\r\n  position: absolute;\r\n  width: 100px;\r\n  height: 100px;\r\n  background-color: #ffffff;\r\n  box-shadow: 0 0 10px rgb(0 0 0 / 50%);\r\n  justify-content: start;\r\n  padding: 21px 0 0 12px;\r\n  box-sizing: border-box;\r\n  left: ${(props) => {\r\n    if (props.coord?.x) {\r\n      return `${props.coord?.x + 50}px`;\r\n    } else {\r\n      return \"0px\";\r\n    }\r\n  }};\r\n  top: ${(props) => {\r\n    return `${props.coord?.y}px`;\r\n  }};\r\n`;\r\n\r\nconst Button = styled.button`\r\n  height: 30px;\r\n  width: 70px;\r\n`;\r\n\r\nexport const PlayGrid = () => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n\r\n  type contextMenuType = {\r\n    type: \"visible\" | \"hidden\";\r\n    playerNumber?: Number;\r\n    coord?: { x?: number; y?: number };\r\n  };\r\n\r\n  const initialContextMenuState: contextMenuType = { type: \"hidden\" };\r\n\r\n  const [contextMenuState, updatecontextMenuState] = useState(\r\n    initialContextMenuState\r\n  );\r\n\r\n  const { gameField, playerList, enemyList, numberOfPlayer } = state;\r\n\r\n  const { vert: maxVert } = FINISH_COORD;\r\n  const height = maxVert + 1;\r\n  const playerEl = document.getElementById(`player${numberOfPlayer}`);\r\n  const playerCoord = {\r\n    x: playerEl?.getBoundingClientRect().x,\r\n    y: playerEl?.getBoundingClientRect().y,\r\n  };\r\n\r\n  const getContextMenu = (numberOfPlayer: number) => {\r\n    updatecontextMenuState({\r\n      type: \"visible\",\r\n      playerNumber: numberOfPlayer,\r\n      coord: playerCoord,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    switch (contextMenuState.type) {\r\n      case \"visible\": {\r\n        const bodyElement = document.querySelector(\"body\");\r\n\r\n        const callback = (e: MouseEvent) => {\r\n          /**\r\n           * Its for avoiding event on currentPlayer\r\n           */\r\n          if (\r\n            e.target ===\r\n            document.getElementById(`player${state.numberOfPlayer}`)\r\n          ) {\r\n            e.stopPropagation();\r\n          }\r\n\r\n          updatecontextMenuState((prevState) => {\r\n            return { ...prevState, type: \"hidden\" };\r\n          });\r\n\r\n          bodyElement?.removeEventListener(\"click\", callback, {\r\n            capture: true,\r\n          });\r\n        };\r\n\r\n        bodyElement?.addEventListener(\"click\", callback, {\r\n          capture: true,\r\n        });\r\n\r\n        return () => {\r\n          bodyElement?.removeEventListener(\"click\", callback, {\r\n            capture: true,\r\n          });\r\n        };\r\n      }\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }, [contextMenuState.type]);\r\n\r\n  return (\r\n    <>\r\n      <GridItem\r\n        key={\"grid\"}\r\n        vert={height}\r\n        /*  type={contextMenuState.type} */\r\n        mode={PLAY_GRID_MODE}\r\n      >\r\n        {getFilledPlayGrid(state, getContextMenu)}\r\n      </GridItem>\r\n\r\n      <ContextMenu\r\n        type={contextMenuState.type}\r\n        id={\"contextMenu\"}\r\n        className={\"contextMenu\"}\r\n        coord={contextMenuState.coord}\r\n      >\r\n        <Button\r\n          className={\"contextMenu\"}\r\n          onClick={() => {\r\n            dispatch({\r\n              type: \"req-shareCard\",\r\n              payload: contextMenuState.playerNumber,\r\n            });\r\n          }}\r\n        >\r\n          –ø–µ—Ä–µ–¥–∞—Ç—å\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            dispatch({\r\n              type: \"req-healPlayer\",\r\n              payload: contextMenuState.playerNumber,\r\n            });\r\n          }}\r\n        >\r\n          –ª–µ—á–∏—Ç—å\r\n        </Button>\r\n      </ContextMenu>\r\n    </>\r\n  );\r\n};\r\n","import { useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { State, PlayerListType } from \"../business/types\";\r\n\r\nimport { AMOUNT_PLAYERS, MAX_HEALTH_AMOUNT } from \"../shared/config\";\r\n\r\ntype HealthSlotType = {\r\n  isFilled: boolean;\r\n};\r\n\r\nconst HealthSlotList = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\nconst HealthSlot = styled.div<HealthSlotType>`\r\n  width: 5px;\r\n  height: 5px;\r\n  border-radius: 50%;\r\n  border: 1px solid #f09292;\r\n  margin: 1px;\r\n  background-color: ${(props) => {\r\n    if (props.isFilled) {\r\n      return \"#f09292\";\r\n    } else return \"none\";\r\n  }};\r\n`;\r\n\r\nexport const HealthSlots = (props: { index: number }) => {\r\n  const { playerList } = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n\r\n  return (\r\n    <HealthSlotList>\r\n      {getHealthSlot(playerList, props.index).map(\r\n        (healthSlotFilled: boolean, index: number) => {\r\n          return (\r\n            <HealthSlot key={index} isFilled={healthSlotFilled}></HealthSlot>\r\n          );\r\n        }\r\n      )}\r\n    </HealthSlotList>\r\n  );\r\n};\r\n\r\nconst getHealthSlot = (playerList: PlayerListType, index: number) => {\r\n  const playerHealth = getPlayerHealth(playerList, index);\r\n  const maxHealthSlotList = new Array(MAX_HEALTH_AMOUNT).fill(0);\r\n\r\n  const filledHealthSlotList = maxHealthSlotList.reduce(\r\n    (prev, currSlot, index) => {\r\n      if (index < playerHealth) {\r\n        return [...prev, true];\r\n      } else {\r\n        return [...prev, false];\r\n      }\r\n    },\r\n    []\r\n  );\r\n  return filledHealthSlotList;\r\n};\r\n\r\nconst getPlayerHealth = (\r\n  playersList: PlayerListType,\r\n  numberOfPlayer: number\r\n) => {\r\n  return playersList[numberOfPlayer].health;\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  State,\r\n  PlayerListType,\r\n  HealthCardType,\r\n  GameState,\r\n  CardItem,\r\n} from \"../business/types\";\r\nimport { Health } from \"./Health/Health\";\r\nimport { BoardsCard } from \"./Boards/BoardsCard\";\r\nimport { WeaponCard } from \"./Weapon/WeaponCard\";\r\n\r\ntype SlotType = {\r\n  onClick: Function;\r\n  highlighting?: boolean;\r\n};\r\n\r\nconst InventoryWrap = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-content: flex-start;\r\n`;\r\n\r\nconst Slot = styled.div<SlotType>`\r\n  display: flex;\r\n  cursor: pointer;\r\n\r\n  & > * {\r\n    margin: 2px;\r\n    position: relative;\r\n  }\r\n\r\n  outline: ${(props) => {\r\n    if (props.highlighting === true) {\r\n      return \"1px solid red \";\r\n    }\r\n  }};\r\n`;\r\n\r\nexport const Inventory = (props: { index: number }) => {\r\n  const dispatch = useDispatch();\r\n  const { playerList, gameState } = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n\r\n  const inventory = playerList[props.index].inventory;\r\n  return (\r\n    <InventoryWrap>\r\n      {inventory.map((inventoryCard, inventoryCardindex) => {\r\n        return (\r\n          <Slot\r\n            key={inventoryCardindex}\r\n            highlighting={inventoryCard?.isSelected}\r\n            onClick={() => {\r\n              dispatch({\r\n                type: \"cardChoosed\",\r\n                payload: { index: inventoryCardindex, card: inventoryCard },\r\n              });\r\n            }}\r\n          >\r\n            {getChildrenComponent(inventoryCard)}\r\n          </Slot>\r\n        );\r\n      })}\r\n    </InventoryWrap>\r\n  );\r\n};\r\n\r\nconst getChildrenComponent = (inventoryCard: CardItem) => {\r\n  switch (inventoryCard?.name) {\r\n    case \"health\": {\r\n      return <Health apperance={inventoryCard.apperance} />;\r\n    }\r\n    case \"boards\": {\r\n      return <BoardsCard apperance={inventoryCard.apperance} />;\r\n    }\r\n    case \"weapon\": {\r\n      return <WeaponCard apperance={inventoryCard.apperance} />;\r\n    }\r\n    default: {\r\n      return null;\r\n    }\r\n  }\r\n};\r\n","import { useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { State, PlayerListType } from \"../business/types\";\r\n\r\nimport { MAX_HEALTH_AMOUNT } from \"../shared/config\";\r\nimport { HealthSlots } from \"../components/HealthSlots\";\r\nimport { Inventory } from \"../components/Inventory\";\r\n\r\ntype HealthSlotType = {\r\n  isFilled: boolean;\r\n};\r\n\r\nconst PlayerStatusCard = styled.div`\r\n  width: 250px;\r\n  height: 200px;\r\n  border: 1px solid lightgray;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: white;\r\n`;\r\n\r\nconst CharacterAvatar = styled.div`\r\n  width: 50px;\r\n  height: 70px;\r\n  border: 1px solid lightgray;\r\n  font-size: 14px;\r\n  text-align: center;\r\n`;\r\n\r\nconst Status = styled.div`\r\n  display: flex;\r\n  border: 1px solid lightgray;\r\n\r\n  padding: 3px;\r\n  margin-bottom: 15px;\r\n  font-size: 14px;\r\n  width: 150px;\r\n`;\r\n\r\nconst HealthStatus = styled(Status)`\r\n  height: 20px;\r\n`;\r\n\r\nconst InventoryStatus = styled(Status)`\r\n  height: 100px;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const PlayerStatus = () => {\r\n  const { numberOfPlayer } = useSelector((state: State) => ({\r\n    ...state,\r\n  }));\r\n\r\n  // TODO: why pass the index?\r\n  return (\r\n    <PlayerStatusCard>\r\n      <Column>\r\n        <CharacterAvatar>–∏–≥—Ä–æ–∫ {`${numberOfPlayer + 1}`}</CharacterAvatar>\r\n      </Column>\r\n      <Column>\r\n        <HealthStatus>\r\n          {`–∑–¥–æ—Ä–æ–≤—å–µ:  `}\r\n          <HealthSlots index={numberOfPlayer}></HealthSlots>\r\n        </HealthStatus>\r\n        <InventoryStatus>\r\n          {`–ø—Ä–µ–¥–º–µ—Ç—ã:  `}\r\n          <Inventory index={numberOfPlayer} />\r\n        </InventoryStatus>\r\n      </Column>\r\n    </PlayerStatusCard>\r\n  );\r\n};\r\n","import { useSelector } from \"react-redux\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  State,\r\n  GameState,\r\n  TypeEffect,\r\n  PlayerListType,\r\n} from \"../business/types\";\r\n\r\nimport { PlayerStatus } from \"./PlayerStatus\";\r\nimport { PlayersStatusList } from \"./PlayersStatusList\";\r\n\r\nconst Status = styled.div`\r\n  width: 200px;\r\n  min-height: 18px;\r\n  width: 250px;\r\n  height: 100px;\r\n  border: 1px solid lightgray;\r\n  background-color: #fff2d9;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  color: #5f5757;\r\n  padding-top: 15px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nexport const StatusList = () => {\r\n  type statusType = string;\r\n  const initialStatus: statusType = \"\";\r\n  const [status, updateStatus] = useState(initialStatus);\r\n\r\n  const { dice, playerList, gameState, doEffect, gameResult } = useSelector(\r\n    (state: State) => ({\r\n      ...state,\r\n    })\r\n  );\r\n\r\n  const newStatus = getTextStatus(gameState, doEffect, dice, gameResult);\r\n  const batlePhrase = \"p–µ–∂–∏–º –±–æ—è\";\r\n  useEffect(() => {\r\n    updateStatus(() => {\r\n      if (gameState.type.includes(\"interactWithEnemy\")) {\r\n        if (gameState.type === \"interactWithEnemy\") {\r\n          return newStatus;\r\n        } else {\r\n          return `${batlePhrase}: ${newStatus}`;\r\n        }\r\n      } else {\r\n        return newStatus;\r\n      }\r\n    });\r\n  }, [gameState.type, doEffect?.type]);\r\n  return (\r\n    <>\r\n      <Status>{status}</Status>\r\n      <PlayerStatus />\r\n      {/*    <PlayersStatusList /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nconst getTextStatus = (\r\n  gameState: GameState,\r\n  doEffect: TypeEffect,\r\n  dice: number,\r\n  gameResult: string\r\n) => {\r\n  switch (gameState.type) {\r\n    case \"gameStarted.trownDice\":\r\n      return \"–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\";\r\n    case \"gameStarted.playerMove\":\r\n      return \"—Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥\";\r\n    case \"gameStarted.takeCard\":\r\n      return \"–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É\";\r\n    case \"gameStarted.applyCard\":\r\n      return \"–ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\";\r\n\r\n    /*   case \"interactWithEnemy.applyCard\":\r\n      return \"–ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ\"; */\r\n    case \"interactWithEnemy.throwBattleDice\": {\r\n      return \"–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\";\r\n    }\r\n    case \"interactWithEnemy.applyCard\": {\r\n      return \"–ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ\";\r\n    }\r\n\r\n    case \"interactWithEnemy.makeBattleAction\":\r\n    case \"interactWithEnemy\":\r\n      switch (doEffect?.type) {\r\n        case \"!openEnemyCard\": {\r\n          return \"–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É\";\r\n        }\r\n\r\n        case \"!getBattleResult\": {\r\n          switch (dice) {\r\n            case 1:\r\n            case 2: {\r\n              return `–≤—ã–ø–∞–ª–æ ${dice}: –∏–≥—Ä–æ–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ—Ä—É–∂–∏–µ –∏–ª–∏ –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫ `;\r\n            }\r\n            case 3: {\r\n              return `–≤—ã–ø–∞–ª–æ ${dice}: –∏–≥—Ä–æ–∫ —Ç–µ—Ä—è–µ—Ç 1 –∑–¥–æ—Ä–æ–≤—å–µ`;\r\n            }\r\n            case 4: {\r\n              return `–≤—ã–ø–∞–ª–æ ${dice}: –∏–≥—Ä–æ–∫ —Å–ø–∞—Å–∞–µ—Ç—Å—è –±–µ–≥—Å—Ç–≤–æ–º `;\r\n            }\r\n            default:\r\n              return \"–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ\";\r\n          }\r\n        }\r\n        default:\r\n          return \"—Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥\";\r\n      }\r\n\r\n    /*   case \"gameStarted.interactWithEnemy.fightOrKeepBattle\":\r\n      return \"–ø—Ä–∏–º–µ–Ω–∏—Ç—å  –æ—Ä—É–∂–∏–µ –∏–ª–∏ –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\"; */\r\n\r\n    case \"endGame\":\r\n      return gameResult;\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { State, PlayerListType } from \"../business/types\";\r\n\r\nimport { AMOUNT_PLAYERS, MAX_HEALTH_AMOUNT } from \"../shared/config\";\r\nimport { HealthSlots } from \"../components/HealthSlots\";\r\nimport { Inventory } from \"../components/Inventory\";\r\n\r\ntype HealthSlotType = {\r\n  isFilled: boolean;\r\n};\r\n\r\ntype AmountOfPlayers = {\r\n  amount: number;\r\n};\r\n\r\nconst PlayersListWrap = styled.div<AmountOfPlayers>`\r\n  /*  width: 130px; */\r\n  width: 100%;\r\n  height: 100px;\r\n  /*   border: 1px solid lightgray; */\r\n  display: grid;\r\n\r\n  grid-template-rows: 20% auto auto;\r\n  grid-template-columns: ${(props) => {\r\n    return `repeat(${props.amount} ,25px)`;\r\n  }};\r\n  pointer-events: none;\r\n`;\r\n\r\nconst CharacterAvatar = styled.div`\r\n  font-size: 12px;\r\n  text-align: center;\r\n  grid-row-start: 1;\r\n  grid-row-end: 2;\r\n`;\r\n\r\nconst HealthSlotsWrap = styled.div`\r\n  grid-row-start: 2;\r\n  grid-row-end: 3;\r\n  & > * {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst InventorysWrap = styled.div`\r\n  grid-row-start: 3;\r\n  grid-row-end: 4;\r\n  & * {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    box-sizing: border-box;\r\n    outline: none;\r\n    /*  & > * {\r\n      box-sizing: border-box;\r\n    } */\r\n  }\r\n`;\r\n\r\nexport const PlayersStatusList = () => {\r\n  return (\r\n    <PlayersListWrap amount={AMOUNT_PLAYERS}>\r\n      {new Array(AMOUNT_PLAYERS).fill(0).map((player, index) => {\r\n        return (\r\n          <React.Fragment key={index}>\r\n            <CharacterAvatar>{`${index + 1}`}</CharacterAvatar>\r\n            <HealthSlotsWrap>\r\n              <HealthSlots index={index}></HealthSlots>\r\n            </HealthSlotsWrap>\r\n            <InventorysWrap>\r\n              <Inventory index={index} />\r\n            </InventorysWrap>\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </PlayersListWrap>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { State } from \"../business/types\";\r\n\r\nconst GameScore = styled.div`\r\n  margin: 100px;\r\n`;\r\n\r\nexport const EndScreen = () => {\r\n  const gameResult = useSelector((state: State) => state.gameResult);\r\n  return (\r\n    <>\r\n      <GameScore>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. {gameResult}</GameScore>\r\n    </>\r\n  );\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst StartButton = styled.button`\r\n  height: 22px;\r\n  margin: 140px;\r\n`;\r\n\r\nexport const StartScreen = () => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      <StartButton\r\n        onClick={() => {\r\n          dispatch({ type: \"clickedStartButton\" });\r\n        }}\r\n      >\r\n        {\" \"}\r\n        –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\r\n      </StartButton>\r\n    </>\r\n  );\r\n};\r\n","import {\r\n  StartCell,\r\n  CommonCell,\r\n  FinishCell,\r\n  GameFieldCells,\r\n  CellType,\r\n} from \"../../types\";\r\n\r\nimport {\r\n  FINISH_COORD,\r\n  START_COORD,\r\n  CELLS_BARRIERS_LIST,\r\n} from \"../../../shared/config\";\r\n\r\n/**\r\n *  Returns an object with start and finish  in structure of GameValues.\r\n */\r\nexport const getFieldCells = (cellList: string[]): GameFieldCells => {\r\n  const emptyFieldCells = createEmptyFieldCells(cellList);\r\n  const fieldCellsWithWalls = getCellsWalls(emptyFieldCells);\r\n  const organizedFieldCells = getOrganizedFieldCells(fieldCellsWithWalls);\r\n  return organizedFieldCells;\r\n};\r\n\r\n/**\r\n * Creates an object with keys and empty cells in structure of GameValues.\r\n */\r\nconst createEmptyFieldCells = (cellList: Array<string>): GameFieldCells => {\r\n  const emptyFieldItem: CommonCell = {\r\n    name: \"commonCell\",\r\n    cardItem: [],\r\n  };\r\n\r\n  let newEmptyGameField: GameFieldCells = {};\r\n\r\n  cellList.forEach((cell: string) => {\r\n    newEmptyGameField[cell] = emptyFieldItem;\r\n  });\r\n\r\n  return newEmptyGameField;\r\n};\r\n\r\n/**\r\n *  Creates an object with start, finish and walls in structure of GameValues.\r\n */\r\nconst getOrganizedFieldCells = (emptyField: GameFieldCells): GameFieldCells => {\r\n  const startIndex = `${START_COORD.hor}.${START_COORD.vert}`;\r\n  const finishIndex = `${FINISH_COORD.hor}.${FINISH_COORD.vert}`;\r\n\r\n  const startCell: StartCell = {\r\n    name: \"start\",\r\n    cardItem: [],\r\n  };\r\n\r\n  const finishCell: FinishCell = {\r\n    name: \"finish\",\r\n    cardItem: [],\r\n  };\r\n\r\n  const organizedGameFieldCells = {\r\n    ...emptyField,\r\n    [startIndex]: startCell,\r\n    [finishIndex]: finishCell,\r\n  };\r\n\r\n  return organizedGameFieldCells;\r\n};\r\n\r\n/**\r\n * @returns The object in structure GameFieldCells. With walls(barriers) in cells.\r\n */\r\nconst getCellsWalls = (emptyField: GameFieldCells): GameFieldCells => {\r\n  // TODO: Need add checking for CommonCell?\r\n\r\n  /**\r\n   * Returns list of Cells with walls(barriers)\r\n   */\r\n  const cellsWithBarrierList = CELLS_BARRIERS_LIST.map((cellBarrier): [\r\n    string,\r\n    CellType\r\n  ] => {\r\n    const { coord, barrierList } = cellBarrier;\r\n    const cellIndex = `${coord.hor}.${coord.vert}`;\r\n\r\n    const cellWithoutBarrier = emptyField[cellIndex];\r\n\r\n    if (cellWithoutBarrier.name === \"commonCell\") {\r\n      const cellWithBarrier = {\r\n        ...cellWithoutBarrier,\r\n        barrierList: barrierList,\r\n      };\r\n\r\n      return [cellIndex, cellWithBarrier];\r\n    } else {\r\n      return [cellIndex, cellWithoutBarrier];\r\n    }\r\n  });\r\n\r\n  const cellsWithBarriers: GameFieldCells =\r\n    Object.fromEntries(cellsWithBarrierList);\r\n\r\n  const fieldCellsWithWalls = { ...emptyField, ...cellsWithBarriers };\r\n  return fieldCellsWithWalls;\r\n};\r\n","import { CommonCell, GameFieldCells, CardItem } from \"../../types\";\r\n\r\nimport {\r\n  AMOUNT_HEALTH_ITEMS,\r\n  AMOUNT_BOARDS_ITEMS,\r\n  CARD_APPERANCE,\r\n  AMOUNT_WEAPONS_ITEMS,\r\n} from \"../../../shared/config\";\r\n\r\ntype CardSet = {\r\n  card: CardItem;\r\n  amount: number;\r\n};\r\n\r\nconst cardsList: CardSet[] = [\r\n  {\r\n    card: {\r\n      name: \"health\",\r\n      apperance: CARD_APPERANCE,\r\n    },\r\n    amount: AMOUNT_HEALTH_ITEMS,\r\n  },\r\n  {\r\n    card: {\r\n      name: \"boards\",\r\n      apperance: CARD_APPERANCE,\r\n    },\r\n    amount: AMOUNT_BOARDS_ITEMS,\r\n  },\r\n  {\r\n    card: {\r\n      name: \"weapon\",\r\n      apperance: CARD_APPERANCE,\r\n    },\r\n    amount: AMOUNT_WEAPONS_ITEMS,\r\n  },\r\n];\r\n\r\n/**\r\n * Returns an object in structure of FieldCells with spreaded cards in random picked cells.\r\n */\r\nexport const spreadCards = (gameFieldCells: GameFieldCells): GameFieldCells => {\r\n  /**\r\n   * filled–°ells - its object with filling cells\r\n   * currCardSet -curr set of cards\r\n   * from cardset making object with cards\r\n   */\r\n  const cellsWithAllCards = cardsList.reduce((filled–°ells, currCardSet) => {\r\n    const gameFieldCellsWithPrevios = { ...gameFieldCells, ...filled–°ells };\r\n\r\n    const cellsForCards = getListForCards(\r\n      gameFieldCellsWithPrevios,\r\n      currCardSet\r\n    );\r\n\r\n    /**\r\n     * Adding filled with previos cardSet cells\r\n     */\r\n    const filledWithCardsFieldCells = setCards(cellsForCards, currCardSet);\r\n    const filledWithAllCardsCells = {\r\n      ...filled–°ells,\r\n      ...filledWithCardsFieldCells,\r\n    };\r\n    return filledWithAllCardsCells;\r\n  }, {});\r\n\r\n  const gameFieldFull = { ...gameFieldCells, ...cellsWithAllCards };\r\n  return gameFieldFull;\r\n};\r\n\r\n/**\r\n *  Creates an object with spreaded cards into cells from cellsForCards.\r\n */\r\nconst setCards = (\r\n  cellList: [string, CommonCell][],\r\n  currCardSet: CardSet\r\n): GameFieldCells => {\r\n  const cellListWithCards = cellList.map(\r\n    (cellWithCards: [string, CommonCell]) => {\r\n      const [index, cell] = cellWithCards;\r\n\r\n      const cellWithCard: CommonCell = {\r\n        ...cell,\r\n        cardItem: [currCardSet.card],\r\n      };\r\n      return [index, cellWithCard];\r\n    }\r\n  );\r\n\r\n  const fieldCellsWithCards = Object.fromEntries(cellListWithCards);\r\n\r\n  return fieldCellsWithCards;\r\n};\r\n\r\n/**\r\n * Returns an array with random empty cell witch suitable for card.\r\n * Array lenght is equal AMOUNT_..._ITEMS.\r\n */\r\nconst getListForCards = (\r\n  gameField: GameFieldCells,\r\n  currCardSet: CardSet\r\n): [string, CommonCell][] => {\r\n  const listGameField = Object.entries(gameField);\r\n\r\n  /**\r\n   * This array contains only empty cells\r\n   */\r\n\r\n  const emptyCellsList = listGameField.filter(\r\n    (cellItem): cellItem is [string, CommonCell] => {\r\n      const [, item] = cellItem;\r\n\r\n      return item.name === \"commonCell\" && item.cardItem.length === 0;\r\n    }\r\n  );\r\n\r\n  const AMOUNT_EMPTY_CELLS = emptyCellsList.length;\r\n  const amoutCurrentCards = currCardSet.amount;\r\n\r\n  /**\r\n   * Is a list with number of indexes of empty cells.\r\n   */\r\n  const keyList: Array<number> = new Array(amoutCurrentCards)\r\n    .fill(0)\r\n    .reduce((prevkeyList) => {\r\n      const randomNumber = getRandomNumber(prevkeyList, AMOUNT_EMPTY_CELLS);\r\n\r\n      if (prevkeyList) {\r\n        return [...prevkeyList, randomNumber];\r\n      } else {\r\n        return [randomNumber];\r\n      }\r\n    }, []);\r\n\r\n  const listForCards = keyList.map((keyItem: number): [string, CommonCell] => {\r\n    return emptyCellsList[keyItem];\r\n  });\r\n\r\n  return listForCards;\r\n};\r\n\r\n/**\r\n * Gets an array with the previously selected random numbers and the maximum number to select.\r\n * Returns a random number satisfying the conditions.\r\n */\r\nconst getRandomNumber = (\r\n  arrNumber: Array<number>,\r\n  maxNumber: number\r\n): number => {\r\n  const number = Math.floor(Math.random() * maxNumber);\r\n\r\n  if (arrNumber) {\r\n    return arrNumber.includes(number)\r\n      ? getRandomNumber(arrNumber, maxNumber)\r\n      : number;\r\n  } else {\r\n    return number;\r\n  }\r\n};\r\n","import { FINISH_COORD } from \"../../../shared/config\";\r\nimport { getFieldCells} from \"./getFieldCells\";\r\n/* import { spreadHealthCards } from \"./spreadHealthCards\"; */\r\nimport { spreadCards } from \"./spreadCards\";\r\n\r\n//TODO: Need add some config object for all cards and spreading them simultaneously.\r\nexport const getGameField = () => {\r\n  const order = getCellOrder();\r\n  const gameFieldCells = getFieldCells(order);\r\n  const filledWithCardsCells = spreadCards(gameFieldCells);\r\n  const gameField = { order, values: filledWithCardsCells };\r\n  return gameField;\r\n};\r\n\r\n/**\r\n * Creates an array with cell index order.\r\n */\r\nconst getCellOrder = (): Array<string> => {\r\n  const width = FINISH_COORD.hor;\r\n  const height = FINISH_COORD.vert;\r\n\r\n  let orderList: Array<string> = [];\r\n\r\n  for (let hor = 0; hor <= width; hor++) {\r\n    for (let vert = 0; vert <= height; vert++) {\r\n      const index: string = `${hor}.${vert}`;\r\n      orderList.push(index);\r\n    }\r\n  }\r\n\r\n  return orderList;\r\n};\r\n","import { PlayerListType } from \"../types\";\r\n\r\nimport {\r\n  AMOUNT_PLAYERS,\r\n  INITIAL_PLAYER_HEALTH,\r\n  START_COORD,\r\n} from \"../../shared/config\";\r\n\r\nexport const getPlayers = (): PlayerListType => {\r\n  const startCoord = `${START_COORD.hor}.${START_COORD.vert}`;\r\n  const playersList = new Array(AMOUNT_PLAYERS).fill(0).map((player, index) => {\r\n    const playerCard = {\r\n      name: \"player\",\r\n      health: INITIAL_PLAYER_HEALTH,\r\n      orderNumber: index,\r\n      coord: startCoord,\r\n      inventory: [],\r\n    };\r\n    return [index, playerCard];\r\n  });\r\n\r\n  const playersObj: PlayerListType = Object.fromEntries(playersList);\r\n  return playersObj;\r\n};\r\n","import { EnemyListType, GameField, CommonCell, CellType } from \"../types\";\r\n\r\nimport { AMOUNT_ENEMIES, CARD_APPERANCE } from \"../../shared/config\";\r\n\r\nexport const getEnemies = (gameField: GameField): EnemyListType => {\r\n  const emptyCellsList = getEmptyList(gameField);\r\n  const enemiesCoords = getListOfIndexes(emptyCellsList);\r\n  const enemiesObj = getListOfEnemy(enemiesCoords);\r\n  return enemiesObj;\r\n};\r\n\r\n/**\r\n * For every element checks that cell has no cards on it.\r\n * Returns the list of cells without any cards.\r\n */\r\nconst getEmptyList = (gameField: GameField): [string, CommonCell][] => {\r\n  const listCells = Object.entries(gameField.values);\r\n  const emptyCellsList = listCells.filter(\r\n    (cellItem): cellItem is [string, CommonCell] => {\r\n      const [, item] = cellItem;\r\n      return item.name === \"commonCell\" && item.cardItem.length === 0;\r\n    }\r\n  );\r\n  return emptyCellsList;\r\n};\r\n\r\n/**\r\n * Returns the list of random picked indexes of emptyCellsList\r\n */\r\nconst getListOfIndexes = (emptyCellsList: [string, CommonCell][]) => {\r\n  const AMOUNT_EMPTY_CELLS = emptyCellsList.length;\r\n\r\n  // TODO: it may be taking out as separate module with getRandomNumber?\r\n  const keyList: Array<number> = new Array(AMOUNT_ENEMIES)\r\n    .fill(0)\r\n    .reduce((prevkeyList) => {\r\n      const randomNumber = getRandomNumber(prevkeyList, AMOUNT_EMPTY_CELLS);\r\n\r\n      if (prevkeyList) {\r\n        return [...prevkeyList, randomNumber];\r\n      } else {\r\n        return [randomNumber];\r\n      }\r\n    }, []);\r\n\r\n  const idexesListForCards = keyList.map((keyItem: number): string => {\r\n    const [index] = emptyCellsList[keyItem];\r\n    return index;\r\n  });\r\n\r\n  return idexesListForCards;\r\n};\r\n\r\n/**\r\n * Returns the object of all enemies\r\n */\r\nconst getListOfEnemy = (enemiesCoords: string[]) => {\r\n  const enemyList = enemiesCoords.map((coord) => {\r\n    const enemyCard = {\r\n      name: \"enemy\",\r\n      power: 1,\r\n      coord: coord,\r\n      apperance: CARD_APPERANCE,\r\n    };\r\n    return [enemyCard.coord, enemyCard];\r\n  });\r\n\r\n  const enemiesObj: EnemyListType = Object.fromEntries(enemyList);\r\n  return enemiesObj;\r\n};\r\n\r\n/**\r\n * Gets an array with the previously selected random numbers and the maximum number to select.\r\n * Returns a random number satisfying the conditions.\r\n */\r\nconst getRandomNumber = (\r\n  arrNumber: Array<number>,\r\n  maxNumber: number\r\n): number => {\r\n  const number = Math.floor(Math.random() * maxNumber);\r\n\r\n  if (arrNumber) {\r\n    return arrNumber.includes(number)\r\n      ? getRandomNumber(arrNumber, maxNumber)\r\n      : number;\r\n  } else {\r\n    return number;\r\n  }\r\n};\r\n","import { State } from \"../types\";\r\n\r\nimport { getGameField } from \"./getGameField\";\r\nimport { getPlayers } from \"./getPlayers\";\r\nimport { getEnemies } from \"./getEnemies\";\r\n\r\nconst getInitialState = (): State => {\r\n  //–æ—Ç–¥–∞–µ–º gameFieldWithoutEnemy –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Ä–∞–≥–æ–≤ –∏–∑ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫\r\n  const gameFieldWithoutEnemy = getGameField();\r\n\r\n  return {\r\n    gameState: { type: \"waitingStart\" },\r\n    dice: 0,\r\n    gameResult: \"\",\r\n    playerList: getPlayers(),\r\n    enemyList: getEnemies(gameFieldWithoutEnemy),\r\n    gameField: gameFieldWithoutEnemy,\r\n    doEffect: null,\r\n    numberOfPlayer: 0,\r\n  };\r\n};\r\n\r\nexport const initialState = getInitialState();\r\n","import { State } from \"../../types\";\r\nimport { ActionType } from \"../../reducer\";\r\n\r\nexport const waitingStart = ( state: State,action: ActionType): State => {\r\n  switch (action.type) {\r\n    case \"clickedStartButton\": {\r\n      return {\r\n        ...state,\r\n        gameState: {\r\n          type: \"gameStarted.trownDice\",\r\n        },\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { State, PlayerListType, MoveDirection, CellType } from \"../../../types\";\r\n\r\nimport { checkCellHasWall } from \"../../common/checkCellHasWall\";\r\n/** Cheking the cases when can't take the cell. In default we think that can. */\r\nexport const checkCanTakeCell = (\r\n  state: State,\r\n  nextPlayerCoord: string,\r\n  direction: MoveDirection\r\n) => {\r\n  const { playerList, dice } = state;\r\n  const metBarrier = checkCellHasWall(state, nextPlayerCoord, direction);\r\n  const isLastStepOfMove = dice === 1;\r\n  const isNextCellOcupied = checkNextCellOccupied(playerList, nextPlayerCoord);\r\n  const canNotTakeCell = isLastStepOfMove && isNextCellOcupied;\r\n\r\n  switch (true) {\r\n    case metBarrier: {\r\n      return false;\r\n    }\r\n\r\n    case canNotTakeCell: {\r\n      // TODO: –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –∑–∞–Ω—è—Ç–æ–π —á–µ–π–∫–µ\r\n      return false;\r\n    }\r\n    default: {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n\r\nconst checkNextCellOccupied = (\r\n  playersList: PlayerListType,\r\n  newCoord: string\r\n): boolean => {\r\n  const iterablePlayerList = Object.entries(playersList);\r\n  const isCellOccupied = iterablePlayerList.some((player) => {\r\n    const [, playerValue] = player;\r\n    return playerValue.coord === newCoord;\r\n  });\r\n  return isCellOccupied;\r\n};\r\n","import { State, PlayerListType, CardItem } from \"../../types\";\r\n\r\n/**\r\n * We need to give highlighting to healthCard\r\n */\r\ntype TargerCard = {\r\n  index: number;\r\n  card: CardItem;\r\n};\r\n\r\nexport const getStateCardSelected = (state: State, targerCard: TargerCard) => {\r\n  // TODO: Need to restrict select unneceserry card -?!\r\n  // Add switch on type of cards\r\n  const { numberOfPlayer } = state;\r\n\r\n  const newPlayerList = changeSelectedCard(state, targerCard.index);\r\n\r\n  const hasAnyCardSelected = newPlayerList[numberOfPlayer].inventory.find(\r\n    (card) => {\r\n      return card?.isSelected === true;\r\n    }\r\n  )\r\n    ? true\r\n    : false;\r\n\r\n  const cardType = targerCard.card?.name;\r\n  // The difference between weaponCard and other  card that weapon are usedin the battle.\r\n  //Obviously we need other stateWithoutSelectedCard for weapon\r\n  const stateWithSelectedCard: State = {\r\n    ...state,\r\n    playerList: newPlayerList,\r\n    gameState: {\r\n      type: \"gameStarted.applyCard\",\r\n    },\r\n  };\r\n\r\n  const stateWithoutSelectedCard: State = {\r\n    ...state,\r\n    playerList: newPlayerList,\r\n    gameState: {\r\n      type: /* cardType === \"weapon\"\r\n          ? \"gameStarted.interactWithEnemy\"\r\n          :  */ \"gameStarted.playerMove\",\r\n    },\r\n  };\r\n\r\n  switch (hasAnyCardSelected) {\r\n    case true:\r\n      return stateWithSelectedCard;\r\n    case false:\r\n      return stateWithoutSelectedCard;\r\n  }\r\n};\r\n\r\nconst changeSelectedCard = (\r\n  state: State,\r\n  currentCardIndex: number\r\n  /*   hasCurrentCardHighlightning: boolean */\r\n) => {\r\n  const { playerList, numberOfPlayer } = state;\r\n  const inventory = playerList[numberOfPlayer].inventory;\r\n  const targetCard = inventory[currentCardIndex];\r\n\r\n  const newInventory = inventory.map((card, index) => {\r\n    if (index === currentCardIndex) {\r\n      return { ...card, isSelected: !targetCard?.isSelected };\r\n    } else {\r\n      return { ...card, isSelected: false };\r\n    }\r\n  });\r\n\r\n  const newPlayerList: PlayerListType = {\r\n    ...playerList,\r\n    [numberOfPlayer]: {\r\n      ...playerList[numberOfPlayer],\r\n      inventory: newInventory,\r\n    },\r\n  };\r\n\r\n  return newPlayerList;\r\n};\r\n","import { State, MoveDirection, AvailableCellListType } from \"../../../types\";\r\n\r\nimport { ActionType } from \"../../../reducer\";\r\nimport { MOVE_DIRECTION_LIST } from \"../../../../shared/config\";\r\n\r\nimport { getNextPlayerCoord } from \"../../common/getNextPlayerCoord\";\r\nimport { getPlayerMoveResult } from \"./getPlayerMoveResult\";\r\nimport { checkCanTakeCell } from \"./checkCanTakeCell\";\r\nimport { changePlayerCoord } from \"./changePlayerCoord\";\r\nimport { getStateCardSelected } from \"../../common/getStateCardSelected\";\r\nimport { getNeighboringCellList } from \"../../common/getNeighboringCellList\";\r\n\r\nexport const playerMove = (state: State, action: ActionType): State => {\r\n  switch (action.type) {\r\n    case \"req-checkAvailableNeighboringCell\": {\r\n      return getAvailableCells(state);\r\n    }\r\n\r\n    case \"playerMoved\": {\r\n      const direction = action.payload;\r\n      return getStatePlayerMoved(state, direction);\r\n    }\r\n\r\n    case \"req-cleanAvailableCells\": {\r\n      return getStateClearedAvailableCells(state);\r\n    }\r\n\r\n    case \"req-getPlayerMoveResult\": {\r\n      return getPlayerMoveResult(state);\r\n    }\r\n\r\n    case \"cardChoosed\": {\r\n      const target = action.payload;\r\n      return getStateCardSelected(state, target);\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Changing coordinates of player if he can take the cell in certain direction.\r\n */\r\nconst getStatePlayerMoved = (state: State, direction: MoveDirection): State => {\r\n  const { playerList, numberOfPlayer, gameField } = state;\r\n\r\n  const prevPlayerCoord = playerList[numberOfPlayer].coord;\r\n  const nextPlayerCoord = getNextPlayerCoord(prevPlayerCoord, direction);\r\n\r\n  /*   const canTakeNextCell = gameField.values[nextPlayerCoord].availableForTake;\r\n   */\r\n\r\n  const canTakeNextCell = state.availableCellsCoords?.includes(nextPlayerCoord);\r\n\r\n  switch (canTakeNextCell) {\r\n    case true: {\r\n      const newPlayerList = changePlayerCoord(state, nextPlayerCoord);\r\n      const newState: State = {\r\n        ...state,\r\n        playerList: newPlayerList,\r\n        doEffect: { type: \"!cleanMarkedCell\" },\r\n      };\r\n      return newState;\r\n    }\r\n    case false: {\r\n      return state;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Current player get field \"availableForTake\" with coordinate of cells that can be taken\r\n */\r\n\r\nexport const getAvailableCells = (state: State): State => {\r\n  const { playerList, numberOfPlayer, gameField } = state;\r\n  const prevPlayerCoord = playerList[numberOfPlayer].coord;\r\n  const neighboringCellList = getNeighboringCellList(\r\n    prevPlayerCoord,\r\n    gameField\r\n  );\r\n\r\n  /**\r\n   * Returns the coordinates of Cell that can be taken by player.\r\n   */\r\n  const availableCellList: AvailableCellListType = neighboringCellList.filter(\r\n    (cellItem) => {\r\n      const { direction, coord } = cellItem;\r\n\r\n      return checkCanTakeCell(state, coord, direction);\r\n    }\r\n  );\r\n\r\n  const availableCellsCoords = availableCellList.map((cellItem) => {\r\n    const { direction, coord } = cellItem;\r\n    return coord;\r\n  });\r\n\r\n  return {\r\n    ...state,\r\n    availableCellsCoords,\r\n  };\r\n};\r\n\r\n/**\r\n *Remove from current player availableCellList\r\n */\r\nconst getStateClearedAvailableCells = (state: State): State => {\r\n  const { playerList, numberOfPlayer, gameField } = state;\r\n\r\n  return {\r\n    ...state,\r\n    doEffect: { type: \"!getPlayerMoveResult\" },\r\n    availableCellsCoords: null,\r\n  };\r\n};\r\n","import { State, PlayerListType, MoveDirection, CellType } from \"../../../types\";\r\n\r\nimport { switchToNextPlayer } from \"../../../../shared/State\";\r\n/**\r\n * @returns A new state depending on the result of the player's movement.\r\n */\r\n\r\nexport const getPlayerMoveResult = (state: State) => {\r\n  const { gameField, playerList, numberOfPlayer, dice } = state;\r\n\r\n  const newPlayerCoord = playerList[numberOfPlayer].coord;\r\n  const newCellWithPlayer = gameField.values[newPlayerCoord];\r\n  const isLastStepOfMove = dice === 1;\r\n\r\n  const takeFinish = newCellWithPlayer?.name === \"finish\";\r\n\r\n  const takeCard =\r\n    newCellWithPlayer?.name === \"commonCell\" &&\r\n    newCellWithPlayer.cardItem.length > 0;\r\n\r\n\r\n  const metEnemyCard =\r\n    newCellWithPlayer?.name === \"commonCell\" && state.enemyList[newPlayerCoord]\r\n      ? true\r\n      : false;\r\n\r\n  // TODO: Is flat switch okey? Or i need it nested?!\r\n  switch (true) {\r\n    // TODO: –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —á–∞—Å—Ç—å state\r\n    case takeFinish: {\r\n      const newState: State = {\r\n        ...state,\r\n        dice: state.dice - 1,\r\n        gameResult: \"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏\",\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    case takeCard: {\r\n      const newState: State = {\r\n        ...state,\r\n        dice: state.dice - 1,\r\n        gameState: {\r\n          type: \"gameStarted.takeCard\",\r\n        },\r\n        doEffect: { type: \"!openCard\" },\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    case metEnemyCard: {\r\n      const newState: State = {\r\n        ...state,\r\n        dice: state.dice - 1,\r\n        gameState: {\r\n          type: \"interactWithEnemy\",\r\n        },\r\n        doEffect: { type: \"!checkApperanceEnemyCard\" },\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    case isLastStepOfMove: {\r\n      /*  const changedPartState = switchToNextPlayer(); */\r\n      const newState: State = {\r\n        ...state,\r\n        dice: 0,\r\n        gameState: {\r\n          type: \"gameStarted.getPlayersOrder\",\r\n        },\r\n        doEffect: {\r\n          type: \"!getNextPlayer\",\r\n        },\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    default: {\r\n      const newState: State = {\r\n        ...state,\r\n        dice: state.dice - 1,\r\n        gameState: {\r\n          type: \"gameStarted.playerMove\",\r\n        },\r\n        doEffect: { type: \"!checkAvailableNeighboringCell\" },\r\n      };\r\n      return newState;\r\n    }\r\n  }\r\n};\r\n","import { State } from \"../../../types\";\r\n\r\nexport const changePlayerCoord = (state: State, newPlayerCoord: string) => {\r\n  const { playerList, numberOfPlayer } = state;\r\n\r\n  const newPlayerList = {\r\n    ...playerList,\r\n    [numberOfPlayer]: {\r\n      ...playerList[numberOfPlayer],\r\n      coord: newPlayerCoord,\r\n    },\r\n  };\r\n  return newPlayerList;\r\n};\r\n","import { State, GameField, PlayerListType, CommonCell } from \"../../../types\";\r\n\r\nimport { ActionType } from \"../../../reducer\";\r\nimport { openCard } from \"./openCard\";\r\nimport { deleteCard } from \"./deleteCard\";\r\n\r\nexport const takeCard = (state: State, action: ActionType): State => {\r\n  switch (action.type) {\r\n    case \"req-openCard\": {\r\n      return getStateOpenCard(state);\r\n    }\r\n\r\n    case \"req-takeCard\": {\r\n      return getStateCardTaken(state);\r\n    }\r\n\r\n    case \"req-deleteCard\": {\r\n      return getStateDeletedCard(state);\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst getStateOpenCard = (state: State): State => {\r\n  const { gameField, numberOfPlayer, playerList } = state;\r\n  const playerCoordIndex = playerList[numberOfPlayer].coord;\r\n  const currCell = gameField.values[playerCoordIndex];\r\n\r\n  const cellWithOpenCard = openCard(currCell);\r\n\r\n  const newGameField: GameField = {\r\n    ...gameField,\r\n    values: { ...gameField.values, [playerCoordIndex]: cellWithOpenCard },\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    gameField: newGameField,\r\n    doEffect: { type: \"!takeCard\" },\r\n  };\r\n};\r\n\r\nconst getStateCardTaken = (state: State): State => {\r\n  const { gameField, numberOfPlayer, playerList } = state;\r\n  const player = playerList[numberOfPlayer];\r\n\r\n  const cardItems = gameField.values[player.coord].cardItem;\r\n\r\n  const newPlayer = {\r\n    ...player,\r\n    inventory: [...player.inventory, ...cardItems],\r\n  };\r\n\r\n  const newPlayerList: PlayerListType = {\r\n    ...playerList,\r\n    [numberOfPlayer]: newPlayer,\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    doEffect: { type: \"!deleteCard\" },\r\n    playerList: newPlayerList,\r\n  };\r\n};\r\n\r\nconst getStateDeletedCard = (state: State): State => {\r\n  const { gameField, numberOfPlayer, playerList } = state;\r\n  const playerCoordIndex = playerList[numberOfPlayer].coord;\r\n  const currCell = gameField.values[playerCoordIndex];\r\n  const cellWithoutCard = deleteCard(currCell);\r\n\r\n  const newGameField: GameField = {\r\n    ...gameField,\r\n    values: {\r\n      ...gameField.values,\r\n      [playerCoordIndex]: cellWithoutCard,\r\n    },\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    gameField: newGameField,\r\n    gameState: {\r\n      type: \"gameStarted.getPlayersOrder\",\r\n    },\r\n    doEffect: {\r\n      type: \"!getNextPlayer\",\r\n    },\r\n    dice: 0,\r\n  };\r\n};\r\n","import { CellType, CardItem } from \"../../../types\";\r\n\r\nexport const openCard = (cell: CellType): CellType => {\r\n  if (cell.name === \"commonCell\") {\r\n    /**\r\n     * When we open card we now for sure that in cell lying only one card\r\n     */\r\n    const cardItemWithOpenCard = cell.cardItem.map((cardItem) => {\r\n      if (cardItem) {\r\n        const openedCard: CardItem = {\r\n          ...cardItem,\r\n          apperance: \"open\",\r\n        };\r\n        return openedCard;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    const openedItem: CellType = {\r\n      ...cell,\r\n      cardItem: cardItemWithOpenCard,\r\n    };\r\n\r\n    return openedItem;\r\n  } else {\r\n    return cell;\r\n  }\r\n};\r\n","import { CommonCell, CellType } from \"../../../types\";\r\n\r\nexport const deleteCard = (currCell: CellType): CellType => {\r\n  /**\r\n   * When we delete card we now for sure that in cell lying only one card\r\n   */\r\n  if (currCell.name === \"commonCell\") {\r\n    const cellWithoutHealth: CommonCell = {\r\n      ...currCell,\r\n      cardItem: [],\r\n    };\r\n    return cellWithoutHealth;\r\n  } else return currCell;\r\n};\r\n","import { State } from \"../../types\";\r\nimport { ActionType } from \"../../reducer\";\r\n\r\n\r\nexport const trownDice = ( state: State,action: ActionType): State => {\r\n  switch (action.type) {\r\n    case \"diceThrown\": {\r\n      return {\r\n        ...state,\r\n        dice: action.payload,\r\n        gameState: {\r\n          type: \"gameStarted.playerMove\",\r\n        },\r\n        doEffect: { type: \"!checkAvailableNeighboringCell\" },\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { State } from \"../../types\";\r\n\r\nexport const getBattleResult = (state: State): State => {\r\n  const { dice } = state;\r\n\r\n  switch (dice) {\r\n    case 1:\r\n    case 2: {\r\n      return getStatePlayerCanFight(state);\r\n    }\r\n\r\n    case 3: {\r\n      return getStatePlayetLoseHealth(state);\r\n    }\r\n\r\n    case 4: {\r\n      return getStatePlayerRunsAway(state);\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst getStatePlayerCanFight = (state: State): State => {\r\n  //Player can use weapon or rethrow dice\r\n  return {\r\n    ...state,\r\n    dice: 0,\r\n    gameState: { type: \"interactWithEnemy.makeBattleAction\" },\r\n  };\r\n};\r\n\r\nconst getStatePlayerRunsAway = (state: State): State => {\r\n  return {\r\n    ...state,\r\n    dice: 0,\r\n    gameState: {\r\n      type: \"gameStarted.trownDice\",\r\n    },\r\n  };\r\n};\r\n\r\nconst getStatePlayetLoseHealth = (state: State): State => {\r\n  const { playerList, numberOfPlayer } = state;\r\n  const newPlayerHealth = playerList[numberOfPlayer].health - 1;\r\n  const isPlayerAlive = newPlayerHealth > 0 ? true : false;\r\n\r\n  const newPlayerList = {\r\n    ...playerList,\r\n    [numberOfPlayer]: {\r\n      ...playerList[numberOfPlayer],\r\n      health: playerList[numberOfPlayer].health - 1,\r\n    },\r\n  };\r\n\r\n  if (isPlayerAlive) {\r\n    const newState: State = {\r\n      ...state,\r\n      dice: 0,\r\n      gameState: { type: \"interactWithEnemy.throwBattleDice\" },\r\n      playerList: newPlayerList,\r\n    };\r\n\r\n    return newState;\r\n  } else {\r\n    console.log(`–∏–≥—Ä–æ–∫ ‚Ññ${numberOfPlayer} –ø–æ–≥–∏–±`);\r\n\r\n    return {\r\n      ...state,\r\n      gameState: { type: \"endGame\" },\r\n      gameResult: \"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\",\r\n      doEffect: null,\r\n    };\r\n  }\r\n};\r\n","import { PlayerListType } from \"../../types\";\r\n\r\nexport const deleteSelectedCard = (\r\n  playerList: PlayerListType,\r\n  numberOfPlayer: number\r\n) => {\r\n  const indexCurrPlayer = numberOfPlayer;\r\n  const currInventory = playerList[indexCurrPlayer].inventory;\r\n\r\n  const removedCardIndex = playerList[indexCurrPlayer].inventory.findIndex(\r\n    (card) => {\r\n      return card?.isSelected === true;\r\n    }\r\n  );\r\n\r\n  const newInventory = currInventory.filter((card, indexOfCard) => {\r\n    return indexOfCard !== removedCardIndex;\r\n  });\r\n  return newInventory;\r\n};\r\n","import { State } from \"../../types\";\r\nimport { ActionType } from \"../../reducer\";\r\n\r\nexport const trownBattleDice = (state: State, action: ActionType): State => {\r\n  switch (action.type) {\r\n    case \"diceThrown\": {\r\n      return {\r\n        ...state,\r\n        dice: action.payload,\r\n        gameState: { type: \"interactWithEnemy\" },\r\n        doEffect: { type: \"!getBattleResult\" },\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { State, PlayerListType, CardItem, EnemyCardType } from \"../../types\";\r\nimport { ActionType } from \"../../reducer\";\r\nimport { changeSelectedCard } from \"./changeSelectedCard\";\r\n\r\nexport const selectCard = (state: State, action: ActionType) => {\r\n  const { numberOfPlayer } = state;\r\n  switch (action.type) {\r\n    case \"cardChoosed\": {\r\n      const newPlayerList = changeSelectedCard(state, action.payload.index);\r\n\r\n      const hasAnyCardSelected = newPlayerList[numberOfPlayer].inventory.find(\r\n        (card) => {\r\n          return card?.isSelected === true;\r\n        }\r\n      )\r\n        ? true\r\n        : false;\r\n\r\n      // The difference between weaponCard and other card that weapon are used in the battle.\r\n      // Obviously we need other stateWithoutSelectedCard for weapon\r\n      const stateWithSelectedCard: State = {\r\n        ...state,\r\n        playerList: newPlayerList,\r\n        gameState: { type: \"interactWithEnemy.applyCard\" },\r\n      };\r\n\r\n      const stateWithoutSelectedCard: State = {\r\n        ...state,\r\n        playerList: newPlayerList,\r\n        gameState: { type: \"interactWithEnemy.makeBattleAction\" },\r\n      };\r\n\r\n      switch (hasAnyCardSelected) {\r\n        case true:\r\n          return stateWithSelectedCard;\r\n        case false:\r\n          return stateWithoutSelectedCard;\r\n      }\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import { State, PlayerListType } from \"../../types\";\r\n\r\nexport const changeSelectedCard = (state: State, currentCardIndex: number) => {\r\n  const { playerList, numberOfPlayer } = state;\r\n  const inventory = playerList[numberOfPlayer].inventory;\r\n  const targetCard = inventory[currentCardIndex];\r\n\r\n  const newInventory = inventory.map((card, index) => {\r\n    if (index === currentCardIndex) {\r\n      return { ...card, isSelected: !targetCard?.isSelected };\r\n    } else {\r\n      return { ...card, isSelected: false };\r\n    }\r\n  });\r\n\r\n  const newPlayerList: PlayerListType = {\r\n    ...playerList,\r\n    [numberOfPlayer]: {\r\n      ...playerList[numberOfPlayer],\r\n      inventory: newInventory,\r\n    },\r\n  };\r\n\r\n  return newPlayerList;\r\n};\r\n","import { State, PlayerListType, CardItem, EnemyCardType } from \"../../types\";\r\n\r\nimport { ActionType } from \"../../reducer\";\r\nimport { openEnemyCard } from \"./openEnemyCard\";\r\nimport { getBattleResult } from \"./getBattleResult\";\r\nimport { removeEnemyCard } from \"./removeEnemyCard\";\r\nimport { defeatEnemy } from \"./defeatEnemy\";\r\nimport { checkCardApperance } from \"./checkCardApperance\";\r\nimport { trownBattleDice } from \"./trownBattleDice\";\r\nimport { selectCard } from \"./selectCard\";\r\n\r\nexport const interactWithEnemy = (state: State, action: ActionType): State => {\r\n  const [, phaseInner] = state.gameState.type.split(\".\");\r\n\r\n  switch (phaseInner) {\r\n    case \"makeBattleAction\": {\r\n      switch (action.type) {\r\n        case \"diceThrown\": {\r\n          return trownBattleDice(state, action);\r\n        }\r\n\r\n        case \"cardChoosed\": {\r\n          return selectCard(state, action);\r\n        }\r\n\r\n        default: {\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n\r\n    case \"applyCard\": {\r\n      switch (action.type) {\r\n        case \"cardChoosed\": {\r\n          return selectCard(state, action);\r\n        }\r\n\r\n        case \"req-defeatEnemy\": {\r\n          return defeatEnemy(state);\r\n        }\r\n        case \"req-removeEnemyCard\": {\r\n          return removeEnemyCard(state);\r\n        }\r\n\r\n        default: {\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n\r\n    case \"throwBattleDice\": {\r\n      return trownBattleDice(state, action);\r\n    }\r\n\r\n    default: {\r\n      switch (action.type) {\r\n        case \"req-checkEnemyCard\": {\r\n          return checkCardApperance(state);\r\n        }\r\n\r\n        case \"req-openEnemyCard\": {\r\n          return openEnemyCard(state);\r\n        }\r\n\r\n        case \"req-getBattleResult\": {\r\n          return getBattleResult(state);\r\n        }\r\n\r\n        default: {\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { State, EnemyCardType } from \"../../types\";\r\nimport { deleteSelectedCard } from \"../common/deleteSelectedCard\";\r\n\r\nexport const defeatEnemy = (state: State): State => {\r\n  const { numberOfPlayer, playerList, enemyList } = state;\r\n  const currEnemyCoord = playerList[numberOfPlayer].coord;\r\n  const currEnemy = enemyList[currEnemyCoord];\r\n  const defeatedEnemy: EnemyCardType = { ...currEnemy, apperance: \"defeated\" };\r\n  const newEnemyList = {\r\n    ...state.enemyList,\r\n    [currEnemyCoord]: defeatedEnemy,\r\n  };\r\n\r\n  const newInventory = deleteSelectedCard(playerList, numberOfPlayer);\r\n\r\n  const newPlayerList = {\r\n    ...playerList,\r\n    [numberOfPlayer]: {\r\n      ...playerList[numberOfPlayer],\r\n      inventory: newInventory,\r\n    },\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    enemyList: newEnemyList,\r\n    playerList: newPlayerList,\r\n    doEffect: { type: \"!removeEnemyCard\" },\r\n  };\r\n};\r\n","import { State } from \"../../types\";\r\n\r\nexport const removeEnemyCard = (state: State): State => {\r\n  const { enemyList, numberOfPlayer, playerList } = state;\r\n  const currentCoord = playerList[numberOfPlayer].coord;\r\n  const newEnemyList = { ...enemyList };\r\n  delete newEnemyList[currentCoord];\r\n\r\n  return {\r\n    ...state,\r\n    enemyList: newEnemyList,\r\n    dice: 0,\r\n    gameState: {\r\n      type: \"gameStarted.getPlayersOrder\",\r\n    },\r\n    doEffect: {\r\n      type: \"!getNextPlayer\",\r\n    },\r\n  };\r\n};\r\n","import { State } from \"../../types\";\r\n\r\nexport const checkCardApperance = (state: State): State => {\r\n  const { enemyList, playerList, numberOfPlayer } = state;\r\n  const currentCoord = playerList[numberOfPlayer].coord;\r\n\r\n  const isNeedOpenEnemyCard =\r\n    enemyList[currentCoord].apperance === \"open\" ? false : true;\r\n\r\n  switch (true) {\r\n    case isNeedOpenEnemyCard: {\r\n      return {\r\n        ...state,\r\n        doEffect: { type: \"!openEnemyCard\" },\r\n      };\r\n    }\r\n\r\n    case !isNeedOpenEnemyCard: {\r\n      return {\r\n        ...state,\r\n        gameState: { type: \"interactWithEnemy.throwBattleDice\" },\r\n\r\n        dice: 0,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import { EnemyCardType, EnemyListType, State } from \"../../types\";\r\n\r\n/**\r\n * Need separate method for open EnemyCard\r\n * Because it dont lying structurally on cell\r\n */\r\nexport const openEnemyCard = (state: State): State => {\r\n  const { enemyList, playerList, numberOfPlayer } = state;\r\n  const currentCoord = playerList[numberOfPlayer].coord;\r\n\r\n  const currEnemyCard = enemyList[currentCoord];\r\n  const openedEnemyCard: EnemyCardType = {\r\n    ...currEnemyCard,\r\n    apperance: \"open\",\r\n  };\r\n\r\n  const newEnemyList = { ...enemyList, [currentCoord]: openedEnemyCard };\r\n  return {\r\n    ...state,\r\n    enemyList: newEnemyList,\r\n    gameState: { type: \"interactWithEnemy.throwBattleDice\" },\r\n    dice: 0,\r\n  };\r\n};\r\n","import { PlayerListType } from \"../../../types\";\r\n\r\nexport const changeHealth = (\r\n  playerList: PlayerListType,\r\n  indexTarget: number\r\n) => {\r\n  return playerList[indexTarget].health + 1;\r\n};\r\n","import { State } from \"../../../types\";\r\nimport { ActionType } from \"../../../reducer\";\r\n\r\nimport { getStateCardSelected } from \"../../common/getStateCardSelected\";\r\nimport { getStateGiveCard } from \"./getStateGiveCard\";\r\nimport { getStateHealCurrPlayer } from \"./getStateHealCurrPlayer\";\r\nimport { getStateHealAnotherPlayer } from \"./getStateHealAnotherPlayer\";\r\nimport { getStateHoleFilled } from \"./getStateHoleFilled\";\r\n/**\r\n *  In payload get order number of chosen for interact player.\r\n * If this number = indexCurrPlayer we heal player.\r\n * If not - we give context menu: need heal or apply.\r\n */\r\nexport const applyCard = (state: State, action: ActionType): State => {\r\n  const { numberOfPlayer, playerList } = state;\r\n\r\n  const chosenCardType = playerList[numberOfPlayer].inventory.find((card) => {\r\n    return card?.isSelected === true;\r\n  })?.name;\r\n\r\n  switch (action.type) {\r\n    case \"req-shareCard\": {\r\n      const recipientPlayerNumber = action.payload;\r\n      return getStateGiveCard(state, recipientPlayerNumber);\r\n    }\r\n\r\n    case \"cardChoosed\": {\r\n      const target = action.payload;\r\n      return getStateCardSelected(state, target);\r\n    }\r\n\r\n    default: {\r\n      switch (chosenCardType) {\r\n        case \"health\": {\r\n          switch (action.type) {\r\n            case \"req-healPlayer\": {\r\n              /**\r\n               * Need to increase playerHealth\r\n               * Then remove card from inventory\r\n               * Can we do this simultaneously?\r\n               */\r\n\r\n              const indexChosenPlayer = action.payload;\r\n              const isCurrPlayer = indexChosenPlayer === numberOfPlayer;\r\n\r\n              switch (isCurrPlayer) {\r\n                case true:\r\n                  return getStateHealCurrPlayer(state);\r\n\r\n                case false: {\r\n                  return getStateHealAnotherPlayer(state, indexChosenPlayer);\r\n                }\r\n                default:\r\n                  return state;\r\n              }\r\n            }\r\n\r\n            default:\r\n              return state;\r\n          }\r\n        }\r\n\r\n        case \"boards\": {\r\n          switch (action.type) {\r\n            case \"req-fillHole\": {\r\n              const { coord, direction } = action.payload;\r\n              console.log(\"–∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–µ–º\", coord, direction);\r\n              return getStateHoleFilled(state, coord, direction);\r\n            }\r\n\r\n            default:\r\n              return state;\r\n          }\r\n        }\r\n\r\n        default:\r\n          return state;\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { State } from \"../../../types\";\r\n\r\nexport const getStateGiveCard = (\r\n  state: State,\r\n  recipientPlayerNumber: number\r\n): State => {\r\n  const { playerList, numberOfPlayer } = state;\r\n  const indexCurrPlayer = numberOfPlayer;\r\n\r\n  const currentPlayerInventory = playerList[indexCurrPlayer].inventory;\r\n  const recepientPlayerInventory = playerList[recipientPlayerNumber].inventory;\r\n\r\n  const sharedCardIndex = playerList[indexCurrPlayer].inventory.findIndex(\r\n    (card) => {\r\n      return card?.isSelected;\r\n    }\r\n  );\r\n\r\n  const sharedCard = [...currentPlayerInventory][sharedCardIndex];\r\n  const sharedCardWithoutHighlightning = { ...sharedCard, isSelected: false };\r\n\r\n  const newCurrentPlayerInventory = currentPlayerInventory.filter(\r\n    (card, indexOfCard) => {\r\n      return indexOfCard !== sharedCardIndex;\r\n    }\r\n  );\r\n\r\n  const newRecepientPlayerInventory = [\r\n    ...recepientPlayerInventory,\r\n    sharedCardWithoutHighlightning,\r\n  ];\r\n\r\n  const newPlayerList = {\r\n    ...playerList,\r\n    [indexCurrPlayer]: {\r\n      ...playerList[indexCurrPlayer],\r\n      inventory: newCurrentPlayerInventory,\r\n    },\r\n    [recipientPlayerNumber]: {\r\n      ...playerList[recipientPlayerNumber],\r\n      inventory: newRecepientPlayerInventory,\r\n    },\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    playerList: newPlayerList,\r\n    gameState: { type: \"gameStarted.playerMove\" },\r\n  };\r\n};\r\n","import { State, PlayerListType } from \"../../../types\";\r\n\r\nimport { deleteSelectedCard } from \"../../common/deleteSelectedCard\";\r\nimport { changeHealth } from \"./changeHealth\";\r\n\r\nexport const getStateHealCurrPlayer = (state: State): State => {\r\n  const { playerList, numberOfPlayer } = state;\r\n  const indexCurrPlayer = numberOfPlayer;\r\n  const newHealth = changeHealth(playerList, indexCurrPlayer);\r\n  const newInventory = deleteSelectedCard(playerList, numberOfPlayer);\r\n  const newPlayerList: PlayerListType = {\r\n    ...playerList,\r\n    [indexCurrPlayer]: {\r\n      ...playerList[indexCurrPlayer],\r\n      inventory: newInventory,\r\n      health: newHealth,\r\n    },\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    playerList: newPlayerList,\r\n    gameState: { type: \"gameStarted.playerMove\" },\r\n  };\r\n};\r\n","import { State, PlayerListType } from \"../../../types\";\r\n\r\nimport { deleteSelectedCard } from \"../../common/deleteSelectedCard\";\r\nimport { changeHealth } from \"./changeHealth\";\r\nexport const getStateHealAnotherPlayer = (\r\n  state: State,\r\n  indexChosenPlayer: number\r\n): State => {\r\n  const { playerList, numberOfPlayer } = state;\r\n  const indexCurrPlayer = numberOfPlayer;\r\n  const newInventory = deleteSelectedCard(playerList, numberOfPlayer);\r\n  const newHealth = changeHealth(playerList, indexChosenPlayer);\r\n\r\n  const newPlayerList: PlayerListType = {\r\n    ...playerList,\r\n    [indexChosenPlayer]: {\r\n      ...playerList[indexChosenPlayer],\r\n      health: newHealth,\r\n    },\r\n    [indexCurrPlayer]: {\r\n      ...playerList[indexCurrPlayer],\r\n      inventory: newInventory,\r\n    },\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    playerList: newPlayerList,\r\n    gameState: { type: \"gameStarted.playerMove\" },\r\n  };\r\n};\r\n","import { State, PlayerListType, MoveDirection } from \"../../../types\";\r\n\r\nimport { deleteSelectedCard } from \"../../common/deleteSelectedCard\";\r\n\r\nexport const getStateHoleFilled = (\r\n  state: State,\r\n  coord: number,\r\n  direction: MoveDirection\r\n) => {\r\n  const { gameField, playerList, numberOfPlayer } = state;\r\n  const indexCurrPlayer = numberOfPlayer;\r\n  const newInventory = deleteSelectedCard(playerList, numberOfPlayer);\r\n  const cellWithChosedHole = gameField.values[coord];\r\n\r\n  if (cellWithChosedHole.name === \"commonCell\") {\r\n    const barriersWithClosedHole = cellWithChosedHole.barrierList?.map(\r\n      (barrier) => {\r\n        if (barrier.direction === direction) {\r\n          return { ...barrier, isOpen: false };\r\n        } else return barrier;\r\n      }\r\n    );\r\n\r\n    const newGameField = {\r\n      ...gameField,\r\n      values: {\r\n        ...gameField.values,\r\n        [coord]: {\r\n          ...gameField.values[coord],\r\n          barrierList: barriersWithClosedHole,\r\n        },\r\n      },\r\n    };\r\n\r\n    const newPlayerList: PlayerListType = {\r\n      ...playerList,\r\n      [indexCurrPlayer]: {\r\n        ...playerList[indexCurrPlayer],\r\n        inventory: newInventory,\r\n      },\r\n    };\r\n    const newState: State = {\r\n      ...state,\r\n      gameField: newGameField,\r\n      playerList: newPlayerList,\r\n      gameState: { type: \"gameStarted.playerMove\" },\r\n      doEffect: { type: \"!checkAvailableNeighboringCell\" },\r\n    };\r\n    return newState;\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n","import { AMOUNT_PLAYERS } from \"../../../shared/config\";\r\nimport { State } from \"../../types\";\r\nimport { ActionType } from \"../../reducer\";\r\n\r\nexport const getPlayersOrder = (state: State, action: ActionType): State => {\r\n  const numberCurrPlayer = state.numberOfPlayer;\r\n  const playerList = Object.entries(state.playerList);\r\n  const maxPlayersNumber = playerList.length - 1;\r\n  const minPlayersNumber = 0;\r\n  const nextPlayersNumber =\r\n    numberCurrPlayer + 1 > maxPlayersNumber\r\n      ? minPlayersNumber\r\n      : numberCurrPlayer + 1;\r\n\r\n  switch (action.type) {\r\n    case \"req-getNextPlayer\": {\r\n      return {\r\n        ...state,\r\n        numberOfPlayer: nextPlayersNumber,\r\n        gameState: {\r\n          type: \"gameStarted.trownDice\",\r\n        },\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { State } from \"../../types\";\r\nimport { ActionType } from \"../../reducer\";\r\n\r\nexport const endGame = ( state: State,action: ActionType): State => {\r\n  switch (action.type) {\r\n    case \"req-getEndScreen\": {\r\n      return {\r\n        ...state,\r\n        gameState: { type: \"getEndScreen\" },\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { reducer } from \"./reducer\";\r\nimport { createStore} from \"redux\";\r\n\r\nexport const store = createStore(\r\n  reducer,\r\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n);","import { initialState } from \"./initialState\";\r\nimport { waitingStart } from \"./phases/waitingStart\";\r\nimport {\r\n  trownDice,\r\n  playerMove,\r\n  takeCard,\r\n  interactWithEnemy,\r\n  applyCard,\r\n} from \"./phases/gameStarted\";\r\nimport { getPlayersOrder } from \"./phases/gameStarted\";\r\nimport { endGame } from \"./phases/endGame\";\r\nimport { MoveDirection, State, CardItem } from \"./types\";\r\n\r\n\r\nexport type ActionType =\r\n  | { type: \"clickedStartButton\" }\r\n  | { type: \"diceThrown\"; payload: number }\r\n  | { type: \"playerMoved\"; payload: MoveDirection }\r\n  | { type: \"req-openCard\" }\r\n  | { type: \"req-changePlayerHealth\" }\r\n  | { type: \"req-deleteCard\" }\r\n  | { type: \"req-getNextPlayer\" }\r\n  | { type: \"req-checkEnemyCard\" }\r\n  | { type: \"req-openEnemyCard\" }\r\n  | { type: \"req-getBattleResult\" }\r\n  | { type: \"req-getEndScreen\" }\r\n  | { type: \"req-checkAvailableNeighboringCell\" }\r\n  | { type: \"req-cleanAvailableCells\" }\r\n  | { type: \"req-getPlayerMoveResult\" }\r\n  | { type: \"req-takeCard\" }\r\n  | {\r\n      type: \"cardChoosed\";\r\n      payload: {\r\n        index: number;\r\n        card: CardItem;\r\n      };\r\n    }\r\n  | { type: \"req-choosePlayer\" }\r\n  | { type: \"req-healPlayer\"; payload: number }\r\n  | {\r\n      type: \"req-fillHole\";\r\n      payload: { coord: number; direction: MoveDirection };\r\n    }\r\n  | { type: \"req-shareCard\"; payload: number }\r\n  | { type: \"req-defeatEnemy\" }\r\n  | { type: \"req-removeEnemyCard\" };\r\n\r\nexport const reducer = (\r\n  state: State = initialState,\r\n  action: ActionType\r\n): State => {\r\n  const [phaseOuter, phaseInner] = state.gameState.type.split(\".\");\r\n\r\n  switch (phaseOuter) {\r\n    case \"waitingStart\": {\r\n      return waitingStart(state, action);\r\n    }\r\n\r\n    case \"gameStarted\": {\r\n      switch (phaseInner) {\r\n        case \"trownDice\": {\r\n          return trownDice(state, action);\r\n        }\r\n\r\n        case \"playerMove\": {\r\n          return playerMove(state, action);\r\n        }\r\n\r\n        case \"takeCard\": {\r\n          return takeCard(state, action);\r\n        }\r\n        case \"applyCard\": {\r\n          return applyCard(state, action);\r\n        }\r\n\r\n        case \"getPlayersOrder\": {\r\n          return getPlayersOrder(state, action);\r\n        }\r\n\r\n        default:\r\n          return state;\r\n      }\r\n    }\r\n    case \"interactWithEnemy\": {\r\n      return interactWithEnemy(state, action);\r\n    }\r\n\r\n    case \"endGame\": {\r\n      return endGame(state, action);\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { Provider, useSelector } from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\nimport \"./index.css\";\r\nimport {\r\n  PlayGrid,\r\n  MoveControls,\r\n  Dice,\r\n  StatusList,\r\n  PlayersStatusList,\r\n} from \"./features\";\r\nimport { StartScreen, EndScreen } from \"./pages\";\r\nimport { State } from \"./business/types\";\r\nimport { store } from \"./business/store\";\r\nimport {\r\n  useOpenCard,\r\n  useEndScreen,\r\n  usePlayerMove,\r\n  useInteractWithEnemy,\r\n} from \"./business/effects\";\r\nimport { PlayerStatus } from \"./features/PlayerStatus\";\r\n\r\nconst Field = styled.div`\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Game = styled.div`\r\n  width: 900px;\r\n  height: 600px;\r\n  margin: 40px auto;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  cursor: default;\r\n  & > * {\r\n  }\r\n`;\r\n\r\nconst RightPanel = styled.div`\r\n  width: 300px;\r\n  height: 600px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-grow: 0;\r\n  align-items: start;\r\n  margin: 0 30px;\r\n  padding: 50px 0;\r\n  box-sizing: border-box;\r\n  & > * {\r\n  }\r\n`;\r\n\r\nconst LeftPanel = styled.div`\r\n  display: flex;\r\n  align-self: start;\r\n  background-color: white;\r\n  height: 100px;\r\n  margin: 0 30px;\r\n  border-radius: 5px;\r\n  padding: 5px 0;\r\n`;\r\n\r\nconst GameControls = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n  padding: 0 15px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Test = styled.div`\r\n  position: absolute;\r\n  z-index: 1;\r\n  width: 600px;\r\n  height: 600px;\r\n  background-color: rgb(218 222 201 / 77%);\r\n`;\r\n\r\nexport function GetApp() {\r\n  const { gameState } = useSelector((state: State) => ({ ...state }));\r\n\r\n  useOpenCard();\r\n  usePlayerMove();\r\n  useEndScreen();\r\n  useInteractWithEnemy();\r\n\r\n  const getGameScreen = () => {\r\n    switch (gameState.type) {\r\n      case \"waitingStart\":\r\n        return <StartScreen />;\r\n\r\n      case \"getEndScreen\":\r\n        return <EndScreen />;\r\n\r\n      default:\r\n        return (\r\n          <>\r\n            <LeftPanel>\r\n              <PlayersStatusList />\r\n            </LeftPanel>\r\n            <Field id=\"field\">\r\n              {/*        <Test /> */}\r\n              <PlayGrid />\r\n            </Field>\r\n            <RightPanel>\r\n              <StatusList />\r\n              <GameControls>\r\n                <Dice />\r\n                <MoveControls />\r\n              </GameControls>\r\n              {/*   <PlayerStatus /> */}\r\n            </RightPanel>\r\n          </>\r\n        );\r\n    }\r\n  };\r\n\r\n  return <Game>{getGameScreen()}</Game>;\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <GetApp />\r\n    </Provider>\r\n  );\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { State } from \"../types\";\r\n\r\nexport function useOpenCard() {\r\n\r\n  const [doEffect] = useSelector((state: State) => [state.doEffect]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(\r\n    function openCard() {\r\n      switch (doEffect?.type) {\r\n        case \"!openCard\": {\r\n          const timerOpen = setTimeout(\r\n            () =>\r\n              dispatch({\r\n                type: \"req-openCard\",\r\n              }),\r\n            1000\r\n          );\r\n          return () => {\r\n            clearTimeout(timerOpen);\r\n          };\r\n        }\r\n\r\n        case \"!takeCard\": {\r\n          const timerTakeCard = setTimeout(\r\n            () =>\r\n              dispatch({\r\n                type: \"req-takeCard\",\r\n              }),\r\n            500\r\n          );\r\n          return () => {\r\n            clearTimeout(timerTakeCard);\r\n          };\r\n        }\r\n        case \"!changePlayerHealth\": {\r\n          const timerChangePlayerHealth = setTimeout(\r\n            () =>\r\n              dispatch({\r\n                type: \"req-changePlayerHealth\",\r\n              }),\r\n            500\r\n          );\r\n          return () => {\r\n            clearTimeout(timerChangePlayerHealth);\r\n          };\r\n        }\r\n\r\n        case \"!deleteCard\": {\r\n          const timerDeleteCard = setTimeout(\r\n            () =>\r\n              dispatch({\r\n                type: \"req-deleteCard\",\r\n              }),\r\n            500\r\n          );\r\n          return () => {\r\n            clearTimeout(timerDeleteCard);\r\n          };\r\n        }\r\n\r\n        case \"!getNextPlayer\": {\r\n          dispatch({ type: \"req-getNextPlayer\" });\r\n          break;\r\n        }\r\n\r\n        default: {\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    [doEffect]\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { State } from \"../types\";\r\n\r\nexport function usePlayerMove() {\r\n  const [doEffect] = useSelector((state: State) => [state.doEffect]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(\r\n    function playerMove() {\r\n      switch (doEffect?.type) {\r\n        case \"!checkAvailableNeighboringCell\": {\r\n          dispatch({\r\n            type: \"req-checkAvailableNeighboringCell\",\r\n          });\r\n          break;\r\n        }\r\n\r\n        case \"!cleanMarkedCell\": {\r\n          const timerMarkCell = setTimeout(\r\n            () =>\r\n              dispatch({\r\n                type: \"req-cleanAvailableCells\",\r\n              }),\r\n            0\r\n          );\r\n          return () => {\r\n            clearTimeout(timerMarkCell);\r\n          };\r\n        }\r\n        case \"!getPlayerMoveResult\": {\r\n          dispatch({\r\n            type: \"req-getPlayerMoveResult\",\r\n          });\r\n          break;\r\n        }\r\n\r\n        default:\r\n          break;\r\n      }\r\n    },\r\n    [doEffect]\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { State } from \"../types\";\r\n\r\nexport function useEndScreen() {\r\n  const dispatch = useDispatch();\r\n  const gameState = useSelector((state: State) => state.gameState);\r\n\r\n  useEffect(\r\n    function getEndScreen() {\r\n      switch (gameState.type) {\r\n        case \"endGame\":\r\n          const timer = setTimeout(\r\n            () => dispatch({ type: \"req-getEndScreen\" }),\r\n            1000\r\n          );\r\n\r\n          return () => clearTimeout(timer);\r\n\r\n        default:\r\n          break;\r\n      }\r\n    },\r\n    [gameState.type, dispatch]\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { State } from \"../types\";\r\n\r\nexport function useInteractWithEnemy() {\r\n  const [doEffect] = useSelector((state: State) => [state.doEffect]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    switch (doEffect?.type) {\r\n      case \"!checkApperanceEnemyCard\": {\r\n        dispatch({\r\n          type: \"req-checkEnemyCard\",\r\n        });\r\n        break;\r\n      }\r\n\r\n      case \"!openEnemyCard\": {\r\n        const timerOpen = setTimeout(\r\n          () =>\r\n            dispatch({\r\n              type: \"req-openEnemyCard\",\r\n            }),\r\n          1000\r\n        );\r\n        return () => {\r\n          clearTimeout(timerOpen);\r\n        };\r\n      }\r\n\r\n      case \"!getBattleResult\": {\r\n        const timerGetResult = setTimeout(\r\n          () => dispatch({ type: \"req-getBattleResult\" }),\r\n          2000\r\n        );\r\n\r\n        return () => {\r\n          clearTimeout(timerGetResult);\r\n        };\r\n      }\r\n\r\n      case \"!removeEnemyCard\": {\r\n        const timerRemoveEnemy = setTimeout(\r\n          () => dispatch({ type: \"req-removeEnemyCard\" }),\r\n          1000\r\n        );\r\n        return () => {\r\n          clearTimeout(timerRemoveEnemy);\r\n        };\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  }, [doEffect]);\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}